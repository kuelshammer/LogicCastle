{"numTotalTestSuites":9,"numPassedTestSuites":9,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":28,"numPassedTests":28,"numFailedTests":0,"numPendingTests":0,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1750540952973,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should handle strategic analysis integration","status":"passed","title":"should handle strategic analysis integration","duration":10.562875000000076,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should handle multiple consecutive moves without corruption","status":"passed","title":"should handle multiple consecutive moves without corruption","duration":3.4955830000000105,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should apply even/odd strategy with DOM feedback","status":"passed","title":"should apply even/odd strategy with DOM feedback","duration":2.09695899999997,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should detect Zugzwang situations with UI integration","status":"passed","title":"should detect Zugzwang situations with UI integration","duration":1.6315000000000737,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should analyze fork opportunities with DOM updates","status":"passed","title":"should analyze fork opportunities with DOM updates","duration":1.1757499999999936,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should fallback to safe random with DOM state","status":"passed","title":"should fallback to safe random with DOM state","duration":1.2019579999999905,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Enhanced Smart (DOM-dependent)"],"fullName":"AI Strategy Enhanced Smart (DOM-dependent) should maintain performance under complex board states","status":"passed","title":"should maintain performance under complex board states","duration":0.9978750000000218,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Consistency (DOM-dependent)"],"fullName":"AI Strategy Consistency (DOM-dependent) should maintain move determinism for identical states","status":"passed","title":"should maintain move determinism for identical states","duration":0.9394999999999527,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Consistency (DOM-dependent)"],"fullName":"AI Strategy Consistency (DOM-dependent) should show differences between random vs strategic bots","status":"passed","title":"should show differences between random vs strategic bots","duration":1.0578329999999596,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Consistency (DOM-dependent)"],"fullName":"AI Strategy Consistency (DOM-dependent) should show defensive vs offensive preferences","status":"passed","title":"should show defensive vs offensive preferences","duration":1.1350840000000062,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Consistency (DOM-dependent)"],"fullName":"AI Strategy Consistency (DOM-dependent) should prevent state corruption during analysis","status":"passed","title":"should prevent state corruption during analysis","duration":2.4029580000000124,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Consistency (DOM-dependent)"],"fullName":"AI Strategy Consistency (DOM-dependent) should handle cross-bot performance in complex positions","status":"passed","title":"should handle cross-bot performance in complex positions","duration":1.400916000000052,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Smart Random (DOM-dependent)"],"fullName":"AI Strategy Smart Random (DOM-dependent) should handle random fallback behavior with DOM","status":"passed","title":"should handle random fallback behavior with DOM","duration":1.4344579999999496,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Smart Random (DOM-dependent)"],"fullName":"AI Strategy Smart Random (DOM-dependent) should maintain multiple move sequence consistency","status":"passed","title":"should maintain multiple move sequence consistency","duration":1.313874999999939,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Smart Random (DOM-dependent)"],"fullName":"AI Strategy Smart Random (DOM-dependent) should perform well with helper analysis integration","status":"passed","title":"should perform well with helper analysis integration","duration":1.630457999999976,"failureMessages":[],"meta":{}},{"ancestorTitles":["AI Strategy Smart Random (DOM-dependent)"],"fullName":"AI Strategy Smart Random (DOM-dependent) should handle state isolation across multiple calls","status":"passed","title":"should handle state isolation across multiple calls","duration":0.7627909999999929,"failureMessages":[],"meta":{}}],"startTime":1750540953642,"endTime":1750540953675.7627,"status":"passed","message":"","name":"/Users/max/LogicCastle/tests/vitest/ai-strategy-dom-tests.vitest.js"},{"assertionResults":[{"ancestorTitles":["Simple Math Tests (Vitest Demo)"],"fullName":"Simple Math Tests (Vitest Demo) should perform basic calculations","status":"passed","title":"should perform basic calculations","duration":6.496125000000006,"failureMessages":[],"meta":{}},{"ancestorTitles":["Simple Math Tests (Vitest Demo)"],"fullName":"Simple Math Tests (Vitest Demo) should work with DOM elements","status":"passed","title":"should work with DOM elements","duration":1.7035410000000866,"failureMessages":[],"meta":{}},{"ancestorTitles":["Simple Math Tests (Vitest Demo)"],"fullName":"Simple Math Tests (Vitest Demo) should handle async operations","status":"passed","title":"should handle async operations","duration":13.02516700000001,"failureMessages":[],"meta":{}},{"ancestorTitles":["Simple Math Tests (Vitest Demo)"],"fullName":"Simple Math Tests (Vitest Demo) should provide performance timing","status":"passed","title":"should provide performance timing","duration":1.0017910000000256,"failureMessages":[],"meta":{}},{"ancestorTitles":["Array and Object Tests"],"fullName":"Array and Object Tests should handle array operations","status":"passed","title":"should handle array operations","duration":0.9707089999999425,"failureMessages":[],"meta":{}},{"ancestorTitles":["Array and Object Tests"],"fullName":"Array and Object Tests should handle object operations","status":"passed","title":"should handle object operations","duration":0.37770799999998417,"failureMessages":[],"meta":{}},{"ancestorTitles":["Array and Object Tests"],"fullName":"Array and Object Tests should handle deep equality","status":"passed","title":"should handle deep equality","duration":0.41645900000003166,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling Tests"],"fullName":"Error Handling Tests should catch thrown errors","status":"passed","title":"should catch thrown errors","duration":0.5075839999999516,"failureMessages":[],"meta":{}},{"ancestorTitles":["Error Handling Tests"],"fullName":"Error Handling Tests should handle function calls that should not throw","status":"passed","title":"should handle function calls that should not throw","duration":0.7709999999999582,"failureMessages":[],"meta":{}},{"ancestorTitles":["Game Logic Simulation (without actual classes)"],"fullName":"Game Logic Simulation (without actual classes) should simulate board operations","status":"passed","title":"should simulate board operations","duration":0.5529579999999896,"failureMessages":[],"meta":{}},{"ancestorTitles":["Game Logic Simulation (without actual classes)"],"fullName":"Game Logic Simulation (without actual classes) should simulate win detection logic","status":"passed","title":"should simulate win detection logic","duration":0.2741250000000264,"failureMessages":[],"meta":{}},{"ancestorTitles":["Game Logic Simulation (without actual classes)"],"fullName":"Game Logic Simulation (without actual classes) should simulate valid moves checking","status":"passed","title":"should simulate valid moves checking","duration":0.42141700000001947,"failureMessages":[],"meta":{}}],"startTime":1750540953642,"endTime":1750540953668.4214,"status":"passed","message":"","name":"/Users/max/LogicCastle/tests/vitest/simple-backend.vitest.js"}]}