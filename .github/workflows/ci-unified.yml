name: LogicCastle CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Fast quality checks - fail fast
  quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        
    - name: 🔍 ESLint check
      run: npm run lint:check
      
    - name: 💅 Prettier format check  
      run: npm run format:check

  # Unit tests - fast feedback
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        
    - name: 🧪 Run Vitest unit tests
      run: npm run test:ci-fast
      env:
        CI_TIMEOUT_MULTIPLIER: 2
        
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-node-${{ matrix.node-version }}
        path: |
          test-results-vitest.json
          test-results-vitest.xml
        retention-days: 3

  # Integration tests with Puppeteer
  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        # Install Chrome dependencies for Puppeteer
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        
    - name: 🌐 Start HTTP server
      run: |
        npm run serve &
        sleep 5
        curl -f http://localhost:8080 || (echo "Server failed to start" && exit 1)
        
    - name: 🔗 Run integration tests
      run: npm run test:ci-slow
      env:
        CI_TIMEOUT_MULTIPLIER: 3
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
        
    - name: 📊 Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          test-results.json
          test-results.xml
        retention-days: 3

  # Browser compatibility tests
  test-browser:
    name: 🌐 Browser Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-unit]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        sudo apt-get update
        sudo apt-get install -y chromium-browser firefox
        
    - name: 🌐 Start HTTP server
      run: |
        npm run serve &
        sleep 5
        
    - name: 🧪 Test basic functionality
      run: |
        node -e "
        const puppeteer = require('puppeteer');
        
        (async () => {
          const browser = await puppeteer.launch({
            executablePath: '/usr/bin/chromium-browser',
            headless: true,
            args: ['--no-sandbox', '--disable-dev-shm-usage']
          });
          
          const page = await browser.newPage();
          
          // Test main page
          await page.goto('http://localhost:8080/index.html');
          const title = await page.title();
          console.log('✅ Main page loads:', title);
          
          // Test Connect4 page
          await page.goto('http://localhost:8080/games/connect4/index.html');
          const connect4Title = await page.title();
          console.log('✅ Connect4 page loads:', connect4Title);
          
          // Check critical elements exist
          const gameBoard = await page.$('#gameBoard');
          const newGameBtn = await page.$('#newGameBtn');
          
          if (!gameBoard) throw new Error('❌ Game board not found');
          if (!newGameBtn) throw new Error('❌ New game button not found');
          
          console.log('✅ All critical elements present');
          
          await browser.close();
        })();
        "

  # Performance tests
  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-unit]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm install -g lighthouse
        
    - name: 🌐 Start HTTP server
      run: |
        npm run serve &
        sleep 5
        
    - name: ⚡ Run Lighthouse performance tests
      run: |
        lighthouse http://localhost:8080/index.html \
          --output json \
          --output-path ./lighthouse-main.json \
          --quiet \
          --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" || echo "Lighthouse completed with warnings"
          
        # Extract and display key metrics
        if [ -f lighthouse-main.json ]; then
          node -e "
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('./lighthouse-main.json'));
            const metrics = report.lhr.audits;
            const score = Math.round(report.lhr.categories.performance.score * 100);
            console.log('📊 Performance Score:', score);
            console.log('🎨 First Contentful Paint:', metrics['first-contentful-paint'].displayValue);
            console.log('🖼️ Largest Contentful Paint:', metrics['largest-contentful-paint'].displayValue);
            
            if (score < 70) {
              console.log('⚠️ Performance score below threshold (70)');
              process.exit(1);
            }
          "
        fi

  # Security checks
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 🔍 Run security audit
      run: |
        npm audit --audit-level moderate || {
          echo "⚠️ Security vulnerabilities found. Review and fix before merging."
          npm audit --audit-level moderate --json > audit-results.json
          exit 1
        }

  # Deployment (only on main branch success)
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test-unit, test-integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        
    - name: 📝 Create deployment summary
      run: |
        echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Results:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All unit tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Live Site:" >> $GITHUB_STEP_SUMMARY
        echo "[https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY

  # Publish test results
  publish-results:
    name: 📊 Publish Test Results
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    if: always()
    
    steps:
    - name: 📥 Download test artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*-test-results*'
        merge-multiple: true
        
    - name: 📊 Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: LogicCastle Test Results
        path: 'test-results*.xml'
        reporter: java-junit
        fail-on-error: false