{"version":3,"file":"ModalManager-BhmvPGU8.js","sources":["../../assets/js/ui-modules/components/ModalManager.js"],"sourcesContent":["/**\n * ModalManager - Centralized modal system for all games\n * \n * Eliminates duplicate modal handling code found in every game UI.\n * Provides consistent modal behavior, keyboard handling, and animations.\n * \n * Features:\n * - Multiple modal types (help, error, custom)\n * - Keyboard shortcuts (F1, Escape, etc.)\n * - Click-outside-to-close behavior\n * - Modal stacking and z-index management\n * - Animation support\n */\n\nexport class ModalManager {\n    constructor(config = {}) {\n        this.config = this.mergeDefaultConfig(config);\n        this.modals = new Map();\n        this.activeModals = new Set();\n        this.isInitialized = false;\n        \n        // Auto-initialize for production use\n        this.init();\n    }\n\n    /**\n     * Merge user config with defaults\n     */\n    mergeDefaultConfig(userConfig) {\n        // Only add defaults if user config is not empty or contains modal configurations\n        const hasModalConfigs = userConfig && Object.keys(userConfig).length > 0;\n        \n        const defaultConfig = hasModalConfigs ? {\n            // Default modal configurations - only if user provided some config\n            help: {\n                id: 'helpModal',\n                closeKey: 'F1',\n                closeOnEscape: true,\n                closeOnOutsideClick: true\n            },\n            error: {\n                id: 'errorModal',\n                closeKey: null,\n                closeOnEscape: true,\n                closeOnOutsideClick: false\n            }\n        } : {};\n\n        // Merge with user config\n        const merged = { ...defaultConfig };\n        \n        for (const [modalType, userModalConfig] of Object.entries(userConfig)) {\n            if (merged[modalType]) {\n                merged[modalType] = { ...merged[modalType], ...userModalConfig };\n            } else {\n                merged[modalType] = {\n                    closeOnEscape: true,\n                    closeOnOutsideClick: true,\n                    ...userModalConfig\n                };\n            }\n        }\n\n        return merged;\n    }\n\n    /**\n     * Initialize the modal manager\n     */\n    async init() {\n        if (this.isInitialized) {\n            return Promise.resolve();\n        }\n\n        // Delay initialization to avoid constructor auto-init issues\n        await new Promise(resolve => setTimeout(resolve, 0));\n        \n        this.registerModals();\n        this.setupKeyboardHandling();\n        this.isInitialized = true;\n        \n        console.log(`🪟 ModalManager initialized with ${this.modals.size} modals`);\n        return Promise.resolve();\n    }\n\n    /**\n     * Register all configured modals\n     */\n    registerModals() {\n        for (const [modalType, modalConfig] of Object.entries(this.config)) {\n            this.registerModal(modalType, modalConfig);\n        }\n    }\n\n    /**\n     * Register a single modal\n     * @param {string} modalType - The modal type identifier\n     * @param {Object} config - Modal configuration\n     */\n    registerModal(modalType, config) {\n        const element = document.getElementById(config.id);\n        \n        if (!element) {\n            // Silent degradation for minimal UI - don't register missing modals\n            return false;\n        }\n\n        const modal = {\n            element,\n            config,\n            isActive: false\n        };\n\n        this.modals.set(modalType, modal);\n        this.setupModalEventListeners(modalType, modal);\n        \n        console.debug(`📋 Registered modal: ${modalType} (${config.id})`);\n        return true;\n    }\n\n    /**\n     * Setup event listeners for a modal\n     */\n    setupModalEventListeners(modalType, modal) {\n        const { element, config } = modal;\n\n        // Click outside to close - check config dynamically for test compatibility\n        element.addEventListener('click', (e) => {\n            if (e.target === element) {\n                // Check current config state, not initial config\n                const currentModal = this.modals.get(modalType);\n                if (currentModal && currentModal.config.closeOnOutsideClick !== false) {\n                    this.hide(modalType);\n                }\n            }\n        });\n\n        // Close button handling (look for data-modal-close attribute)\n        const closeButtons = element.querySelectorAll('[data-modal-close]');\n        closeButtons.forEach(button => {\n            button.addEventListener('click', () => this.hide(modalType));\n        });\n\n        // Also look for elements with .close class (test compatibility)\n        const closeClassButtons = element.querySelectorAll('.close');\n        closeClassButtons.forEach(button => {\n            button.addEventListener('click', () => this.hide(modalType));\n        });\n\n        // Also look for standard close button IDs\n        const standardCloseIds = [\n            `close${modalType.charAt(0).toUpperCase() + modalType.slice(1)}Btn`,\n            `${modalType}CloseBtn`,\n            'closeBtn'\n        ];\n\n        standardCloseIds.forEach(closeId => {\n            const closeBtn = element.querySelector(`#${closeId}`);\n            if (closeBtn) {\n                closeBtn.addEventListener('click', () => this.hide(modalType));\n            }\n        });\n    }\n\n    /**\n     * Setup global keyboard handling\n     */\n    setupKeyboardHandling() {\n        // Remove any existing listeners to prevent duplicates\n        if (this._keydownHandler) {\n            document.removeEventListener('keydown', this._keydownHandler);\n        }\n        \n        this._keydownHandler = (e) => {\n            // Handle Escape key for all active modals FIRST\n            if (e.key === 'Escape') {\n                this.handleEscapeKey(e);\n                return; // Don't process modal shortcuts after escape handling\n            }\n\n            // Handle specific modal keyboard shortcuts\n            this.handleModalShortcuts(e);\n        };\n        \n        document.addEventListener('keydown', this._keydownHandler);\n    }\n\n    /**\n     * Handle Escape key press\n     */\n    handleEscapeKey(e) {\n        // For test compatibility: if multiple modals are open, close all that allow escape\n        const activeModalTypes = [...this.activeModals];\n        let closedAny = false;\n        \n        // Synchronously close all modals that should close on escape\n        for (const modalType of activeModalTypes) {\n            const modal = this.modals.get(modalType);\n            if (modal && modal.config.closeOnEscape !== false) {\n                this.hide(modalType);\n                closedAny = true;\n            }\n        }\n        \n        if (closedAny) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * Handle modal-specific keyboard shortcuts\n     */\n    handleModalShortcuts(e) {\n        for (const [modalType, modal] of this.modals) {\n            if (modal.config.closeKey && e.key === modal.config.closeKey) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.toggle(modalType);\n                return; // Important: return early to prevent multiple handlers\n            }\n        }\n    }\n\n    /**\n     * Show a modal\n     * @param {string} modalType - The modal type to show\n     * @param {Object} options - Display options\n     */\n    show(modalType, options = {}) {\n        const modal = this.modals.get(modalType);\n        \n        if (!modal) {\n            // Silent degradation for missing modals\n            return false;\n        }\n\n        if (modal.isActive) {\n            console.debug(`📋 Modal already active: ${modalType}`);\n            return true;\n        }\n\n        // Set content if provided\n        if (options.content) {\n            this.setModalContent(modal, options.content);\n        }\n\n        // Show modal - use both 'active' and remove 'hidden' for test compatibility\n        modal.element.classList.add('active');\n        modal.element.classList.remove('hidden');\n        modal.isActive = true;\n        this.activeModals.add(modalType);\n\n        // Manage z-index for modal stacking\n        this.updateModalZIndex(modal);\n\n        // Focus management\n        this.manageFocus(modal, 'show');\n\n        console.debug(`📋 Showed modal: ${modalType}`);\n        this.emitModalEvent('show', modalType, modal);\n        \n        return true;\n    }\n\n    /**\n     * Hide a modal\n     * @param {string} modalType - The modal type to hide\n     */\n    hide(modalType) {\n        const modal = this.modals.get(modalType);\n        \n        if (!modal) {\n            // Silent degradation for missing modals\n            return false;\n        }\n\n        if (!modal.isActive) {\n            console.debug(`📋 Modal already hidden: ${modalType}`);\n            return true;\n        }\n\n        // Hide modal - use both remove 'active' and add 'hidden' for test compatibility\n        modal.element.classList.remove('active');\n        modal.element.classList.add('hidden');\n        modal.isActive = false;\n        this.activeModals.delete(modalType);\n\n        // Focus management\n        this.manageFocus(modal, 'hide');\n\n        console.debug(`📋 Hidden modal: ${modalType}`);\n        this.emitModalEvent('hide', modalType, modal);\n        \n        return true;\n    }\n\n    /**\n     * Toggle a modal's visibility\n     * @param {string} modalType - The modal type to toggle\n     * @param {Object} options - Display options for show\n     */\n    toggle(modalType, options = {}) {\n        const modal = this.modals.get(modalType);\n        \n        if (!modal) {\n            // Silent degradation for missing modals\n            return false;\n        }\n\n        if (modal.isActive) {\n            return this.hide(modalType);\n        } else {\n            return this.show(modalType, options);\n        }\n    }\n\n    /**\n     * Hide all active modals\n     */\n    hideAll() {\n        const activeModalTypes = [...this.activeModals];\n        let hiddenCount = 0;\n\n        activeModalTypes.forEach(modalType => {\n            if (this.hide(modalType)) {\n                hiddenCount++;\n            }\n        });\n\n        console.debug(`📋 Hidden ${hiddenCount} modals`);\n        return hiddenCount;\n    }\n\n    /**\n     * Check if a modal is currently active\n     * @param {string} modalType - The modal type to check\n     * @returns {boolean} True if modal is active\n     */\n    isActive(modalType) {\n        const modal = this.modals.get(modalType);\n        return modal ? modal.isActive : false;\n    }\n\n    /**\n     * Get the currently active modals\n     * @returns {string[]} Array of active modal types\n     */\n    getActiveModals() {\n        return [...this.activeModals];\n    }\n\n    /**\n     * Get the topmost (most recently shown) modal\n     * @returns {Object|null} The topmost modal object\n     */\n    getTopmostModal() {\n        if (this.activeModals.size === 0) {\n            return null;\n        }\n\n        // Return the last modal that was activated\n        const activeModalTypes = [...this.activeModals];\n        const lastModalType = activeModalTypes[activeModalTypes.length - 1];\n        return this.modals.get(lastModalType);\n    }\n\n    /**\n     * Set modal content dynamically\n     * @param {Object} modal - The modal object\n     * @param {Object} content - Content to set\n     */\n    setModalContent(modal, content) {\n        if (content.title) {\n            const titleElement = modal.element.querySelector('.modal-title, h1, h2');\n            if (titleElement) {\n                titleElement.textContent = content.title;\n            }\n        }\n\n        if (content.body) {\n            const bodyElement = modal.element.querySelector('.modal-body, .modal-content');\n            if (bodyElement) {\n                if (typeof content.body === 'string') {\n                    bodyElement.innerHTML = content.body;\n                } else {\n                    bodyElement.innerHTML = '';\n                    bodyElement.appendChild(content.body);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update modal z-index for proper stacking\n     */\n    updateModalZIndex(modal) {\n        const baseZIndex = 1000;\n        const zIndex = baseZIndex + this.activeModals.size;\n        modal.element.style.zIndex = zIndex;\n    }\n\n    /**\n     * Manage focus for accessibility\n     */\n    manageFocus(modal, action) {\n        if (action === 'show') {\n            // Store current focus\n            modal.previousFocus = document.activeElement;\n            \n            // Focus first focusable element in modal - include .close class for test compatibility\n            const focusableElement = modal.element.querySelector(\n                'button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"]), .close'\n            );\n            \n            if (focusableElement) {\n                // Set tabindex to make .close focusable if it's not already\n                if (focusableElement.classList.contains('close') && !focusableElement.hasAttribute('tabindex')) {\n                    focusableElement.setAttribute('tabindex', '0');\n                }\n                setTimeout(() => focusableElement.focus(), 100);\n            }\n        } else if (action === 'hide') {\n            // Restore previous focus\n            if (modal.previousFocus && typeof modal.previousFocus.focus === 'function') {\n                modal.previousFocus.focus();\n            }\n        }\n    }\n\n    /**\n     * Get modal type from modal object\n     */\n    getModalType(modalObj) {\n        for (const [type, modal] of this.modals) {\n            if (modal === modalObj) {\n                return type;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Emit modal events for external listeners\n     */\n    emitModalEvent(eventType, modalType, modal) {\n        const event = new CustomEvent(`modal:${eventType}`, {\n            detail: {\n                modalType,\n                element: modal.element,\n                config: modal.config\n            }\n        });\n        \n        document.dispatchEvent(event);\n    }\n\n    /**\n     * Show an error modal with specific content\n     * @param {string} title - Error title\n     * @param {string} message - Error message\n     * @param {Object} options - Additional options\n     */\n    showError(title, message, options = {}) {\n        const errorContent = {\n            title,\n            body: `<p>${message}</p>`\n        };\n\n        return this.show('error', { content: errorContent, ...options });\n    }\n\n    /**\n     * Show a confirmation modal\n     * @param {string} title - Confirmation title\n     * @param {string} message - Confirmation message\n     * @param {Function} onConfirm - Callback for confirm action\n     * @param {Function} onCancel - Callback for cancel action\n     */\n    showConfirmation(title, message, onConfirm, onCancel) {\n        const confirmContent = {\n            title,\n            body: `\n                <p>${message}</p>\n                <div class=\"modal-actions\">\n                    <button class=\"btn btn-primary\" data-action=\"confirm\">Bestätigen</button>\n                    <button class=\"btn btn-secondary\" data-action=\"cancel\">Abbrechen</button>\n                </div>\n            `\n        };\n\n        const result = this.show('confirmation', { content: confirmContent });\n        \n        if (result) {\n            const modal = this.modals.get('confirmation');\n            \n            // Add action listeners\n            const confirmBtn = modal.element.querySelector('[data-action=\"confirm\"]');\n            const cancelBtn = modal.element.querySelector('[data-action=\"cancel\"]');\n            \n            if (confirmBtn) {\n                confirmBtn.addEventListener('click', () => {\n                    this.hide('confirmation');\n                    if (onConfirm) onConfirm();\n                }, { once: true });\n            }\n            \n            if (cancelBtn) {\n                cancelBtn.addEventListener('click', () => {\n                    this.hide('confirmation');\n                    if (onCancel) onCancel();\n                }, { once: true });\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get debug information about modals\n     */\n    getDebugInfo() {\n        const modalInfo = {};\n        \n        for (const [modalType, modal] of this.modals) {\n            modalInfo[modalType] = {\n                isActive: modal.isActive,\n                elementId: modal.config.id,\n                closeKey: modal.config.closeKey,\n                closeOnEscape: modal.config.closeOnEscape,\n                closeOnOutsideClick: modal.config.closeOnOutsideClick\n            };\n        }\n\n        return {\n            totalModals: this.modals.size,\n            activeModals: [...this.activeModals],\n            modalInfo,\n            isInitialized: this.isInitialized\n        };\n    }\n\n    // === TEST-COMPATIBLE API ALIASES ===\n    \n    /**\n     * Alias for show() to match test expectations\n     */\n    showModal(modalType, options = {}) {\n        return this.show(modalType, options);\n    }\n    \n    /**\n     * Alias for hide() to match test expectations\n     */\n    hideModal(modalType) {\n        return this.hide(modalType);\n    }\n    \n    /**\n     * Alias for toggle() to match test expectations\n     */\n    toggleModal(modalType, options = {}) {\n        return this.toggle(modalType, options);\n    }\n    \n    /**\n     * Alias for isActive() to match test expectations\n     */\n    isModalVisible(modalType) {\n        return this.isActive(modalType);\n    }\n    \n    /**\n     * Alias for hideAll() to match test expectations\n     */\n    closeAllModals() {\n        return this.hideAll();\n    }\n    \n    /**\n     * Get array of registered modal names\n     */\n    getRegisteredModals() {\n        return Array.from(this.modals.keys());\n    }\n    \n    /**\n     * Get array of currently visible modal names\n     */\n    getVisibleModals() {\n        return this.getActiveModals();\n    }\n    \n    /**\n     * Check if any modal is currently visible\n     */\n    hasVisibleModal() {\n        return this.activeModals.size > 0;\n    }\n    \n    /**\n     * Get modal configuration for a specific modal\n     */\n    getModalConfig(modalType) {\n        const modal = this.modals.get(modalType);\n        return modal ? { ...modal.config } : null;\n    }\n    \n    /**\n     * Check if a modal is registered\n     */\n    hasModal(modalType) {\n        return this.modals.has(modalType);\n    }\n    \n    /**\n     * Unregister a modal\n     */\n    unregisterModal(modalType) {\n        if (this.isActive(modalType)) {\n            this.hide(modalType);\n        }\n        \n        const removed = this.modals.delete(modalType);\n        if (removed) {\n            console.debug(`📋 Unregistered modal: ${modalType}`);\n        }\n        return removed;\n    }\n    \n    /**\n     * Update modal configuration\n     */\n    updateModalConfig(modalType, newConfig) {\n        const modal = this.modals.get(modalType);\n        if (modal) {\n            // Handle property name aliases for test compatibility\n            const normalizedConfig = { ...newConfig };\n            if (normalizedConfig.closeOnBackdrop !== undefined) {\n                normalizedConfig.closeOnOutsideClick = normalizedConfig.closeOnBackdrop;\n                delete normalizedConfig.closeOnBackdrop;\n            }\n            \n            modal.config = { ...modal.config, ...normalizedConfig };\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * Set modal content (public API wrapper)\n     */\n    setModalContent(modalType, content) {\n        const modal = this.modals.get(modalType);\n        if (modal) {\n            if (typeof content === 'string') {\n                // Simple string content - set as body\n                const bodyElement = modal.element.querySelector('.modal-body, .modal-content');\n                if (bodyElement) {\n                    bodyElement.innerHTML = content;\n                }\n            } else if (content && typeof content === 'object') {\n                // Call the original setModalContent method from line 336\n                if (content.title) {\n                    const titleElement = modal.element.querySelector('.modal-title, h1, h2');\n                    if (titleElement) {\n                        titleElement.textContent = content.title;\n                    }\n                }\n\n                if (content.body) {\n                    const bodyElement = modal.element.querySelector('.modal-body, .modal-content');\n                    if (bodyElement) {\n                        if (typeof content.body === 'string') {\n                            bodyElement.innerHTML = content.body;\n                        } else {\n                            bodyElement.innerHTML = '';\n                            bodyElement.appendChild(content.body);\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * Get modal content\n     */\n    getModalContent(modalType) {\n        const modal = this.modals.get(modalType);\n        if (modal) {\n            const contentElement = modal.element.querySelector('.modal-content, .modal-body');\n            return contentElement ? contentElement.innerHTML : '';\n        }\n        return '';\n    }\n    \n    /**\n     * Set modal title\n     */\n    setModalTitle(modalType, title) {\n        const modal = this.modals.get(modalType);\n        if (modal) {\n            const titleElement = modal.element.querySelector('.modal-title, h1, h2');\n            if (titleElement) {\n                titleElement.textContent = title;\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Remove a specific message by ID (compatibility)\n     */\n    removeMessage(messageId) {\n        // This is for test compatibility - modals don't typically have message IDs\n        console.debug('📋 removeMessage called on ModalManager - noop for compatibility');\n        return false;\n    }\n    \n    // === DEBUG AND DEVELOPMENT SUPPORT ===\n    \n    /**\n     * Validate modal configuration\n     */\n    validateConfiguration() {\n        const errors = [];\n        const warnings = [];\n        \n        for (const [modalType, modal] of this.modals) {\n            // Check if DOM element exists\n            if (!modal.element) {\n                errors.push(`Modal ${modalType}: DOM element not found`);\n            }\n            \n            // Check configuration completeness\n            if (!modal.config.id) {\n                errors.push(`Modal ${modalType}: Missing id in configuration`);\n            }\n            \n            // Check for potential conflicts\n            if (modal.config.closeKey) {\n                const conflictingModals = Array.from(this.modals.entries())\n                    .filter(([type, m]) => type !== modalType && m.config.closeKey === modal.config.closeKey);\n                \n                if (conflictingModals.length > 0) {\n                    warnings.push(`Modal ${modalType}: Conflicting close key '${modal.config.closeKey}' with ${conflictingModals.map(([type]) => type).join(', ')}`);\n                }\n            }\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    \n    /**\n     * Get modal statistics\n     */\n    getStatistics() {\n        const totalModals = this.modals.size;\n        const visibleModals = this.activeModals.size;\n        const hiddenModals = totalModals - visibleModals;\n        \n        const modalsByType = {};\n        for (const [modalType] of this.modals) {\n            modalsByType[modalType] = this.isActive(modalType) ? 'visible' : 'hidden';\n        }\n        \n        return {\n            totalModals,\n            visibleModals,\n            hiddenModals,\n            modalsByType,\n            hasVisibleModals: visibleModals > 0\n        };\n    }\n    \n    /**\n     * Enhanced debug information\n     */\n    getDebugInfo() {\n        const baseInfo = {\n            totalModals: this.modals.size,\n            activeModals: [...this.activeModals],\n            isInitialized: this.isInitialized\n        };\n        \n        const modalInfo = {};\n        for (const [modalType, modal] of this.modals) {\n            modalInfo[modalType] = {\n                isActive: modal.isActive,\n                elementId: modal.config.id,\n                closeKey: modal.config.closeKey,\n                closeOnEscape: modal.config.closeOnEscape,\n                closeOnOutsideClick: modal.config.closeOnOutsideClick,\n                element: modal.element ? 'found' : 'missing',\n                zIndex: modal.element?.style.zIndex || 'auto'\n            };\n        }\n        \n        return {\n            ...baseInfo,\n            registeredModals: this.getRegisteredModals(),\n            visibleModals: this.getVisibleModals(),\n            modalInfo\n        };\n    }\n\n    /**\n     * Cleanup and destroy the modal manager\n     */\n    destroy() {\n        this.hideAll();\n        \n        // Remove keyboard event listener\n        if (this._keydownHandler) {\n            document.removeEventListener('keydown', this._keydownHandler);\n            this._keydownHandler = null;\n        }\n        \n        this.modals.clear();\n        this.activeModals.clear();\n        this.isInitialized = false;\n        \n        console.log('🗑️ ModalManager destroyed');\n    }\n}"],"names":["ModalManager","config","userConfig","merged","modalType","userModalConfig","resolve","modalConfig","element","modal","e","currentModal","button","closeId","closeBtn","activeModalTypes","closedAny","options","hiddenCount","lastModalType","content","titleElement","bodyElement","zIndex","action","focusableElement","modalObj","type","eventType","event","title","message","errorContent","onConfirm","onCancel","confirmContent","result","confirmBtn","cancelBtn","modalInfo","removed","newConfig","normalizedConfig","contentElement","messageId","errors","warnings","conflictingModals","m","totalModals","visibleModals","hiddenModals","modalsByType","baseInfo"],"mappings":"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"}