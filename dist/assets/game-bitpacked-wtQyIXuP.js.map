{"version":3,"file":"game-bitpacked-wtQyIXuP.js","sources":["../../games/gomoku/js/game-bitpacked.js"],"sourcesContent":["/**\n * Gomoku BitPackedBoard Integration\n * \n * High-performance Gomoku game using BitPackedBoard<15,15,2> for AI optimization.\n * Memory efficiency: 57 bytes instead of 225 bytes (75% reduction).\n * Performance benefits for Monte Carlo Tree Search and Alpha-Beta Pruning.\n */\n\nimport init, { GomokuGame } from '../../../game_engine/pkg/game_engine.js';\n\nexport class GomokuGameBitPacked {\n    constructor() {\n        this.board = null;\n        this.initialized = false;\n        \n        // Game state tracking\n        this.gameHistory = [];\n        this.currentMoveIndex = -1;\n        \n        // Event callbacks\n        this.onGameStateChange = null;\n        this.onMoveComplete = null;\n        this.onGameEnd = null;\n    }\n    \n    /**\n     * Initialize the BitPackedBoard WASM engine\n     */\n    async init() {\n        try {\n            console.log('üöÄ Initializing BitPackedBoard<15,15,2> Gomoku Engine...');\n            \n            // Initialize WASM module\n            await init();\n            \n            // Create BitPackedBoard instance\n            this.board = new GomokuGame();\n            this.initialized = true;\n            \n            console.log('‚úÖ BitPackedBoard Gomoku initialized successfully');\n            // Memory usage tracking would be here if available in WASM API\n            console.log('‚úÖ BitPackedBoard Gomoku ready for 15x15 gameplay');\n            \n            return true;\n        } catch (error) {\n            console.error('‚ùå Failed to initialize BitPackedBoard Gomoku:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Make a move at the specified position\n     * @param {number} row - Row (0-14)\n     * @param {number} col - Column (0-14)\n     * @returns {boolean} True if game is won\n     */\n    makeMove(row, col) {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        try {\n            // Make move using BitPackedBoard\n            const gameWon = this.board.make_move(row, col);\n            \n            // Record move in history\n            this.gameHistory.push({ row, col, player: this.board.current_player() });\n            this.currentMoveIndex++;\n            \n            // Trigger callbacks\n            if (this.onMoveComplete) {\n                this.onMoveComplete({ row, col, gameWon });\n            }\n            \n            if (gameWon && this.onGameEnd) {\n                this.onGameEnd({ winner: this.board.winner() });\n            }\n            \n            if (this.onGameStateChange) {\n                this.onGameStateChange(this.getGameState());\n            }\n            \n            return { success: true, gameWon, row, col };\n        } catch (error) {\n            console.warn(`Invalid move at (${row}, ${col}):`, error.message);\n            return { success: false, reason: error.message };\n        }\n    }\n    \n    /**\n     * Get current game state\n     */\n    getGameState() {\n        if (!this.initialized) {\n            return null;\n        }\n        \n        return {\n            board: this.getBoardState(),\n            currentPlayer: this.board.current_player(),\n            moveCount: this.board.move_count(),\n            isGameOver: this.isGameOver(),\n            winner: this.board.winner(),\n            legalMoves: this.getLegalMoves()\n        };\n    }\n    \n    /**\n     * Get legal moves as array of {row, col} objects\n     */\n    getLegalMoves() {\n        if (!this.initialized) {\n            return [];\n        }\n        \n        const moves = [];\n        // For Gomoku, any empty position is a legal move\n        for (let row = 0; row < 15; row++) {\n            for (let col = 0; col < 15; col++) {\n                if (this.board.is_valid_move(row, col)) {\n                    moves.push({ row, col });\n                }\n            }\n        }\n        \n        return moves;\n    }\n    \n    /**\n     * Get cell value at position\n     * @param {number} row - Row (0-14)\n     * @param {number} col - Column (0-14)\n     * @returns {number} 0=empty, 1=player1, 2=player2\n     */\n    getCellValue(row, col) {\n        if (!this.initialized) {\n            return 0;\n        }\n        \n        return this.board.get_cell(row, col);\n    }\n    \n    /**\n     * Check if move is valid (required by UI)\n     */\n    isValidMove(row, col) {\n        return this.isValidPosition(row, col);\n    }\n    \n    /**\n     * Check if position is valid\n     */\n    isValidPosition(row, col) {\n        if (!this.initialized) {\n            return false;\n        }\n        \n        return this.board.is_valid_move(row, col);\n    }\n    \n    /**\n     * Reset game to starting state\n     */\n    resetGame() {\n        if (!this.initialized) {\n            return;\n        }\n        \n        this.board.reset();\n        this.gameHistory = [];\n        this.currentMoveIndex = -1;\n        \n        if (this.onGameStateChange) {\n            this.onGameStateChange(this.getGameState());\n        }\n        \n        console.log('üîÑ Game reset to starting position');\n    }\n    \n    /**\n     * Start new game (alias for resetGame to match UI expectations)\n     */\n    newGame() {\n        this.resetGame();\n    }\n    \n    /**\n     * Undo last move (placeholder - WASM doesn't support undo yet)\n     */\n    undoMove() {\n        // TODO: Implement undo functionality\n        // For now, return failure since WASM API doesn't support undo\n        console.warn('‚ö†Ô∏è Undo not supported by WASM API yet');\n        return { success: false, reason: 'Undo not supported by WASM API' };\n    }\n    \n    /**\n     * Get current player (1 or 2)\n     */\n    getCurrentPlayer() {\n        if (!this.initialized) {\n            return 1;\n        }\n        \n        return this.board.current_player();\n    }\n    \n    /**\n     * Check if game is over\n     */\n    isGameOver() {\n        if (!this.initialized) {\n            return false;\n        }\n        \n        // Game is over if there's a winner\n        return this.board.winner() !== undefined;\n    }\n    \n    /**\n     * Get winner (1, 2, or null)\n     */\n    getWinner() {\n        if (!this.initialized) {\n            return null;\n        }\n        \n        const winner = this.board.winner();\n        return winner !== undefined ? winner : null;\n    }\n    \n    /**\n     * Count stones for a player\n     */\n    countStones(player) {\n        if (!this.initialized) {\n            return 0;\n        }\n        \n        // Count stones manually since API doesn't provide this\n        let count = 0;\n        for (let row = 0; row < 15; row++) {\n            for (let col = 0; col < 15; col++) {\n                if (this.board.get_cell(row, col) === player) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    /**\n     * Get move count\n     */\n    getMoveCount() {\n        if (!this.initialized) {\n            return 0;\n        }\n        \n        return this.board.move_count();\n    }\n    \n    /**\n     * Get game history\n     */\n    getGameHistory() {\n        return [...this.gameHistory];\n    }\n    \n    /**\n     * Get memory usage in bytes\n     */\n    getMemoryUsage() {\n        if (!this.initialized) {\n            return 0;\n        }\n        \n        // Memory usage not available in current API\n        return 57; // Estimated BitPacked size\n    }\n    \n    /**\n     * Get current board state as 2D array\n     */\n    getBoardState() {\n        if (!this.initialized) {\n            return Array(15).fill().map(() => Array(15).fill(0));\n        }\n        \n        const board = [];\n        for (let row = 0; row < 15; row++) {\n            const rowArray = [];\n            for (let col = 0; col < 15; col++) {\n                rowArray.push(this.board.get_cell(row, col));\n            }\n            board.push(rowArray);\n        }\n        return board;\n    }\n    \n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        const memoryUsage = this.getMemoryUsage();\n        const naiveMemory = 225; // 15x15 array of bytes\n        const savings = ((naiveMemory - memoryUsage) / naiveMemory * 100);\n        \n        return {\n            memoryUsage,\n            naiveMemory,\n            memorySavings: savings.toFixed(1) + '%',\n            boardSize: '15√ó15',\n            bitsPerCell: 2,\n            totalCells: 225,\n            engineType: 'BitPackedBoard<15,15,2>'\n        };\n    }\n    \n    /**\n     * Check if current game supports AI analysis\n     */\n    supportsAdvancedAI() {\n        return this.initialized; // BitPackedBoard is optimized for AI\n    }\n}\n\nexport default GomokuGameBitPacked;"],"names":["GomokuGameBitPacked","init","GomokuGame","error","row","col","gameWon","moves","winner","player","count","board","rowArray","memoryUsage","naiveMemory","savings"],"mappings":"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"}