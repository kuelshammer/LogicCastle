import{_ as o,G as n}from"./game_engine-DD1aZRKp.js";class l{constructor(){this.board=null,this.initialized=!1,this.gameHistory=[],this.currentMoveIndex=-1,this.onGameStateChange=null,this.onMoveComplete=null,this.onGameEnd=null}async init(){try{return await o(),this.board=new n,this.initialized=!0,!0}catch(e){throw e}}makeMove(e,t){if(!this.initialized)throw new Error("Game not initialized");try{const i=this.board.make_move(e,t);return this.gameHistory.push({row:e,col:t,player:this.board.current_player()}),this.currentMoveIndex++,this.onMoveComplete&&this.onMoveComplete({row:e,col:t,gameWon:i}),i&&this.onGameEnd&&this.onGameEnd({winner:this.board.winner()}),this.onGameStateChange&&this.onGameStateChange(this.getGameState()),{success:!0,gameWon:i,row:e,col:t}}catch(i){return{success:!1,reason:i.message}}}getGameState(){return this.initialized?{board:this.getBoardState(),currentPlayer:this.board.current_player(),moveCount:this.board.move_count(),isGameOver:this.isGameOver(),winner:this.board.winner(),legalMoves:this.getLegalMoves()}:null}getLegalMoves(){if(!this.initialized)return[];const e=[];for(let t=0;t<15;t++)for(let i=0;i<15;i++)this.board.is_valid_move(t,i)&&e.push({row:t,col:i});return e}getCellValue(e,t){return this.initialized?this.board.get_cell(e,t):0}isValidMove(e,t){return this.isValidPosition(e,t)}isValidPosition(e,t){return this.initialized?this.board.is_valid_move(e,t):!1}resetGame(){this.initialized&&(this.board.reset(),this.gameHistory=[],this.currentMoveIndex=-1,this.onGameStateChange&&this.onGameStateChange(this.getGameState()))}newGame(){this.resetGame()}undoMove(){return{success:!1,reason:"Undo not supported by WASM API"}}getCurrentPlayer(){return this.initialized?this.board.current_player():1}isGameOver(){return this.initialized?this.board.winner()!==void 0:!1}getWinner(){if(!this.initialized)return null;const e=this.board.winner();return e!==void 0?e:null}countStones(e){if(!this.initialized)return 0;let t=0;for(let i=0;i<15;i++)for(let r=0;r<15;r++)this.board.get_cell(i,r)===e&&t++;return t}getMoveCount(){return this.initialized?this.board.move_count():0}getGameHistory(){return[...this.gameHistory]}getMemoryUsage(){return this.initialized?57:0}getBoardState(){if(!this.initialized)return Array(15).fill().map(()=>Array(15).fill(0));const e=[];for(let t=0;t<15;t++){const i=[];for(let r=0;r<15;r++)i.push(this.board.get_cell(t,r));e.push(i)}return e}getPerformanceStats(){const e=this.getMemoryUsage(),t=225,i=(t-e)/t*100;return{memoryUsage:e,naiveMemory:t,memorySavings:i.toFixed(1)+"%",boardSize:"15Ã—15",bitsPerCell:2,totalCells:225,engineType:"BitPackedBoard<15,15,2>"}}supportsAdvancedAI(){return this.initialized}}export{l as GomokuGameBitPacked,l as default};
//# sourceMappingURL=game-bitpacked-wtQyIXuP.js.map
