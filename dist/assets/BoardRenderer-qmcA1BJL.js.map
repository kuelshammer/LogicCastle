{"version":3,"file":"BoardRenderer-qmcA1BJL.js","sources":["../../games/connect4/js/components/BoardRenderer.js"],"sourcesContent":["/**\n * BoardRenderer - Connect4 Board Rendering & Visual Updates\n * \n * Extracted from Connect4UINew for focused responsibility.\n * Handles all board creation, coordinate labels, and visual updates.\n * \n * Responsibilities:\n * - Board DOM creation & styling\n * - Coordinate label management\n * - Board state visual updates\n * - Responsive sizing & layout\n */\n\nexport class BoardRenderer {\n    constructor(gameBoard, topCoords, bottomCoords) {\n        this.gameBoard = gameBoard;\n        this.topCoords = topCoords;\n        this.bottomCoords = bottomCoords;\n        \n        // Board configuration\n        this.rows = 6;\n        this.cols = 7;\n        this.cells = [];\n        this.discs = [];\n        \n        // Visual state\n        this.initialized = false;\n    }\n\n    /**\n     * Initialize the Connect4 board (6x7 grid)\n     * Extracted from Connect4UINew.initializeBoard()\n     */\n    initializeBoard() {\n        if (!this.gameBoard) {\n            console.error('‚ùå Game board element not found');\n            return false;\n        }\n\n        // Clear existing board\n        this.gameBoard.innerHTML = '';\n        this.cells = [];\n        this.discs = [];\n        \n        // Apply Connect4 board styles\n        this._applyBoardStyles();\n        \n        // Create 6x7 grid (42 cells total)\n        this._createBoardCells();\n        \n        console.log(`üî¥ Connect4 board initialized (${this.rows}x${this.cols} grid, ${this.cells.length} cells)`);\n        console.log(`üîç DEBUG: Created ${this.cells.length} cells and ${this.discs.length} discs`);\n        console.log(`üîç DEBUG: GameBoard innerHTML length: ${this.gameBoard.innerHTML.length}`);\n        \n        if (this.cells.length > 0) {\n            console.log(`üîç DEBUG: First cell structure: ${this.cells[0].outerHTML}`);\n        }\n        \n        this.initialized = true;\n        return true;\n    }\n\n    /**\n     * Apply modern Tailwind CSS Grid styles with glassmorphism\n     * @private\n     */\n    _applyBoardStyles() {\n        // Modern Tailwind approach with glassmorphism\n        this.gameBoard.className = 'grid grid-cols-7 grid-rows-6 gap-2 p-6 rounded-2xl bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800 shadow-2xl max-w-2xl mx-auto aspect-[7/6]';\n        \n        // Add glassmorphism overlay effect\n        this.gameBoard.style.backdropFilter = 'blur(10px)';\n        this.gameBoard.style.background = 'linear-gradient(135deg, rgba(59, 130, 246, 0.8), rgba(29, 78, 216, 0.9))';\n        this.gameBoard.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.25), inset 0 1px 0 rgba(255, 255, 255, 0.1)';\n        \n        console.log('üé® Applied modern Tailwind CSS Grid with glassmorphism');\n    }\n\n    /**\n     * Create all board cells and disc placeholders\n     * @private\n     */\n    _createBoardCells() {\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.cols; col++) {\n                const { cell, disc } = this._createCell(row, col);\n                \n                this.cells.push(cell);\n                this.discs.push(disc);\n                this.gameBoard.appendChild(cell);\n            }\n        }\n    }\n\n    /**\n     * Create individual cell with disc placeholder using Tailwind classes\n     * @private\n     */\n    _createCell(row, col) {\n        const cell = document.createElement('div');\n        cell.className = 'cell game-slot flex items-center justify-center relative cursor-pointer aspect-square rounded-full bg-blue-500 border-4 border-blue-800 hover:bg-blue-400 transition-all duration-200';\n        cell.dataset.row = row;\n        cell.dataset.col = col;\n        cell.dataset.index = row * this.cols + col;\n        \n        // Add glassmorphism effect for cells\n        cell.style.background = 'radial-gradient(circle, rgba(59, 130, 246, 0.9), rgba(29, 78, 216, 0.8))';\n        cell.style.boxShadow = 'inset 0 2px 8px rgba(0, 0, 0, 0.2), 0 4px 12px rgba(0, 0, 0, 0.15)';\n        \n        // Add empty disc placeholder with Tailwind\n        const disc = document.createElement('div');\n        disc.className = 'disc empty w-[85%] h-[85%] rounded-full transition-all duration-300 relative';\n        \n        // Modern glassmorphism for empty disc slots\n        disc.style.background = 'radial-gradient(circle, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05))';\n        disc.style.border = '1px solid rgba(255, 255, 255, 0.2)';\n        disc.style.backdropFilter = 'blur(8px)';\n        disc.style.boxShadow = 'inset 0 1px 2px rgba(255, 255, 255, 0.1)';\n        \n        cell.appendChild(disc);\n        \n        // Store references\n        this.cells.push(cell);\n        this.discs.push(disc);\n        \n        return cell;\n    }\n\n    /**\n     * Create coordinate labels for columns\n     * Extracted from Connect4UINew.createCoordinateLabels()\n     */\n    createCoordinateLabels() {\n        // Ensure coordinate containers exist\n        this._ensureCoordinateContainers();\n        \n        // Create top coordinate labels\n        this._createTopCoordinates();\n        \n        // Create bottom coordinate labels\n        this._createBottomCoordinates();\n        \n        console.log('üî¢ Coordinate labels created for all 7 columns');\n    }\n\n    /**\n     * Ensure coordinate containers exist in DOM\n     * @private\n     */\n    _ensureCoordinateContainers() {\n        if (!this.topCoords) {\n            this.topCoords = document.getElementById('topCoords');\n            if (!this.topCoords && this.gameBoard?.parentElement) {\n                this.topCoords = this._createCoordinateContainer('topCoords', true);\n            }\n        }\n        \n        if (!this.bottomCoords) {\n            this.bottomCoords = document.getElementById('bottomCoords');\n            if (!this.bottomCoords && this.gameBoard?.parentElement) {\n                this.bottomCoords = this._createCoordinateContainer('bottomCoords', false);\n            }\n        }\n    }\n\n    /**\n     * Create coordinate container element\n     * @private\n     */\n    _createCoordinateContainer(id, isTop) {\n        const container = this.gameBoard.parentElement;\n        if (!container) return null;\n        \n        const coords = document.createElement('div');\n        coords.id = id;\n        coords.className = `board-coords ${isTop ? 'top' : 'bottom'}`;\n        \n        if (isTop) {\n            container.insertBefore(coords, this.gameBoard);\n        } else {\n            container.appendChild(coords);\n        }\n        \n        return coords;\n    }\n\n    /**\n     * Create top coordinate labels\n     * @private\n     */\n    _createTopCoordinates() {\n        if (!this.topCoords) return;\n        \n        this._applyCoordinateGridStyles(this.topCoords);\n        this.topCoords.innerHTML = '';\n        \n        for (let col = 1; col <= this.cols; col++) {\n            const coord = this._createCoordinateLabel(col);\n            this.topCoords.appendChild(coord);\n        }\n        \n        console.log(`üî¢ Created ${this.topCoords.children.length} top coord labels with FORCED CSS Grid alignment`);\n    }\n\n    /**\n     * Create bottom coordinate labels\n     * @private\n     */\n    _createBottomCoordinates() {\n        if (!this.bottomCoords) return;\n        \n        this._applyCoordinateGridStyles(this.bottomCoords);\n        this.bottomCoords.innerHTML = '';\n        \n        for (let col = 1; col <= this.cols; col++) {\n            const coord = this._createCoordinateLabel(col);\n            this.bottomCoords.appendChild(coord);\n        }\n        \n        console.log(`üî¢ Created ${this.bottomCoords.children.length} bottom coord labels with FORCED CSS Grid alignment`);\n    }\n\n    /**\n     * Apply CSS Grid styles to coordinate containers\n     * @private\n     */\n    _applyCoordinateGridStyles(coordElement) {\n        Object.assign(coordElement.style, {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(7, 1fr)',\n            gap: '8px',\n            width: '100%',\n            maxWidth: 'min(80vw, calc(70vh * 7 / 6))',\n            maxHeight: 'min(70vh, calc(80vw * 6 / 7))',\n            padding: '20px', // CRITICAL: Match gameBoard padding exactly\n            margin: '0.25rem auto',\n            boxSizing: 'border-box'\n        });\n        \n        console.log(`üéØ Forced CSS Grid alignment for ${coordElement.id}:`, coordElement.style);\n    }\n\n    /**\n     * Create individual coordinate label\n     * @private\n     */\n    _createCoordinateLabel(col) {\n        const coord = document.createElement('div');\n        coord.className = 'coord text-center font-bold text-sm';\n        coord.dataset.col = col - 1; // 0-indexed for interactions\n        \n        Object.assign(coord.style, {\n            color: '#666',\n            transition: 'all 0.3s ease',\n            padding: '0.25rem',\n            cursor: 'pointer'\n        });\n        \n        coord.textContent = col;\n        return coord;\n    }\n\n    /**\n     * Update the board display with current game state\n     * Extracted from Connect4UINew.updateBoard()\n     */\n    updateBoard(game) {\n        if (!this.initialized || !game) return;\n        \n        // HOTFIX: Check if game is properly initialized and has required methods\n        if (!game.initialized || typeof game.getCell !== 'function') {\n            console.log('‚ö†Ô∏è Game not ready for board update - skipping update');\n            return;\n        }\n        \n        // Update each cell based on game state\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.cols; col++) {\n                const cellValue = game.getCell(row, col);\n                const disc = this.getDiscAt(row, col);\n                \n                if (disc) {\n                    this._updateDiscVisual(disc, cellValue);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update board visual representation after move\n     * Extracted from Connect4UINew.updateBoardVisual()\n     */\n    updateBoardVisual(row, col, player) {\n        const slot = this.getCellAt(row, col);\n        \n        if (slot) {\n            const disc = slot.querySelector('.disc');\n            if (disc) {\n                disc.classList.remove('empty', 'preview');\n                disc.classList.add(player === 1 ? 'yellow' : 'red');\n                \n                // Apply player-specific colors directly\n                if (player === 1) {\n                    Object.assign(disc.style, {\n                        background: '#FFD700', // Yellow\n                        border: '3px solid #FFA000',\n                        boxShadow: '0 2px 8px rgba(255, 215, 0, 0.6)'\n                    });\n                } else {\n                    Object.assign(disc.style, {\n                        background: '#F44336', // Red\n                        border: '3px solid #D32F2F',\n                        boxShadow: '0 2px 8px rgba(244, 67, 54, 0.6)'\n                    });\n                }\n                \n                console.log(`üî¥ Disc placed at (${row}, ${col}) for player ${player}`);\n            }\n        }\n    }\n\n    /**\n     * Update individual disc visual based on cell value\n     * @private\n     */\n    _updateDiscVisual(disc, cellValue) {\n        if (cellValue === 0) {\n            // Empty cell\n            disc.className = 'disc empty';\n            disc.style.background = 'transparent';\n            disc.style.border = 'none';\n            disc.style.boxShadow = 'none';\n        } else if (cellValue === 1) {\n            // Yellow player\n            disc.className = 'disc yellow';\n            Object.assign(disc.style, {\n                background: '#FFD700',\n                border: '3px solid #FFA000',\n                boxShadow: '0 2px 8px rgba(255, 215, 0, 0.6)'\n            });\n        } else if (cellValue === 2) {\n            // Red player\n            disc.className = 'disc red';\n            Object.assign(disc.style, {\n                background: '#F44336',\n                border: '3px solid #D32F2F',\n                boxShadow: '0 2px 8px rgba(244, 67, 54, 0.6)'\n            });\n        }\n    }\n\n    /**\n     * Get cell element at specific position\n     */\n    getCellAt(row, col) {\n        return this.gameBoard?.querySelector(\n            `.game-slot[data-row=\"${row}\"][data-col=\"${col}\"]`\n        );\n    }\n\n    /**\n     * Get disc element at specific position\n     */\n    getDiscAt(row, col) {\n        const cell = this.getCellAt(row, col);\n        return cell?.querySelector('.disc');\n    }\n\n    /**\n     * Clear all board visual state\n     */\n    clearBoard() {\n        for (const disc of this.discs) {\n            disc.className = 'disc empty';\n            disc.style.background = 'transparent';\n            disc.style.border = 'none';\n            disc.style.boxShadow = 'none';\n        }\n    }\n\n    /**\n     * Destroy board renderer and cleanup\n     */\n    destroy() {\n        this.cells = [];\n        this.discs = [];\n        this.initialized = false;\n        \n        if (this.gameBoard) {\n            this.gameBoard.innerHTML = '';\n        }\n    }\n\n    /**\n     * Get board dimensions\n     */\n    getDimensions() {\n        return { rows: this.rows, cols: this.cols };\n    }\n\n    /**\n     * Check if board is initialized\n     */\n    isInitialized() {\n        return this.initialized;\n    }\n}"],"names":["BoardRenderer","gameBoard","topCoords","bottomCoords","row","col","cell","disc","id","isTop","container","coords","coord","coordElement","game","cellValue","player","slot"],"mappings":"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"}