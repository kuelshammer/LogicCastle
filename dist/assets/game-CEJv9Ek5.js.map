{"version":3,"file":"game-CEJv9Ek5.js","sources":["../../games/connect4/js/game.js"],"sourcesContent":["/**\n * Connect4 BitPackedBoard Integration\n * \n * High-performance Connect4 game using BitPackedBoard<6,7,2> for AI optimization.\n * Memory efficiency: ~12 bytes instead of 84 bytes (85% reduction).\n * Performance benefits for Minimax and Alpha-Beta Pruning.\n * \n * ULTRATHINK Refactoring: Performance parity with Gomoku goldstandard.\n */\n\nimport init, { Connect4Game } from '../../../game_engine/pkg/game_engine.js';\n\nexport class Connect4GameBitPacked {\n    constructor() {\n        this.board = null;\n        this.initialized = false;\n        \n        // Game configuration\n        this.rows = 6;\n        this.cols = 7;\n        \n        // Game state tracking\n        this.gameHistory = [];\n        this.currentMoveIndex = -1;\n        \n        // Event system\n        this.eventListeners = new Map();\n        \n        // Performance tracking\n        this.moveStartTime = null;\n        this.totalMoves = 0;\n        this.averageMoveTime = 0;\n    }\n    \n    /**\n     * Initialize the BitPackedBoard WASM engine\n     */\n    async init() {\n        try {\n            console.log('üöÄ Initializing BitPackedBoard<6,7,2> Connect4 Engine...');\n            \n            // Initialize WASM module\n            await init();\n            \n            // Create Connect4Game instance\n            this.board = new Connect4Game();\n            this.initialized = true;\n            \n            console.log('‚úÖ BitPackedBoard Connect4 initialized successfully');\n            \n            const memoryUsage = this.board.memory_usage();\n            const naiveMemoryUsage = 84; // 6 * 7 * 2 bytes for naive implementation\n            \n            console.log(`üìä Memory usage: ${memoryUsage} bytes (vs ${naiveMemoryUsage} bytes naive implementation)`);\n            \n            if (memoryUsage <= naiveMemoryUsage) {\n                const efficiency = ((naiveMemoryUsage - memoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                console.log(`üî¢ Memory efficiency: ${efficiency}% savings`);\n            } else {\n                const overhead = ((memoryUsage - naiveMemoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                console.log(`üî¢ Memory overhead: ${overhead}% (optimized for performance, not size)`);\n            }\n            \n            console.log(`‚ö° Performance optimized for ${this.rows}x${this.cols} board`);\n            \n            this.emit('initialized', { memoryUsage: this.board.memory_usage() });\n            \n            return true;\n        } catch (error) {\n            console.error('‚ùå Failed to initialize BitPackedBoard Connect4:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Make a move in the specified column\n     * @param {number} col - Column (0-6)\n     * @returns {Object} Move result with game state\n     */\n    makeMove(col) {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        this.moveStartTime = performance.now();\n        \n        try {\n            // Validate column\n            if (col < 0 || col >= this.cols) {\n                throw new Error(`Invalid column: ${col}. Must be 0-${this.cols - 1}`);\n            }\n            \n            // Check if column is full\n            if (!this.isValidMove(col)) {\n                throw new Error(`Column ${col} is full`);\n            }\n            \n            const currentPlayer = this.board.get_current_player();\n            \n            // Make move using BitPackedBoard\n            const moveResult = this.board.make_move(col);\n            \n            // Calculate move execution time\n            const moveTime = performance.now() - this.moveStartTime;\n            this.totalMoves++;\n            this.averageMoveTime = (this.averageMoveTime * (this.totalMoves - 1) + moveTime) / this.totalMoves;\n            \n            // Record move in history\n            const move = {\n                col,\n                player: currentPlayer,\n                moveNumber: this.board.get_move_count(),\n                timestamp: Date.now(),\n                executionTime: moveTime\n            };\n            \n            this.gameHistory.push(move);\n            this.currentMoveIndex++;\n            \n            // Create comprehensive move result\n            const result = {\n                col,\n                player: currentPlayer,\n                board: this.getBoard(),\n                winner: moveResult.winner,\n                isGameOver: moveResult.is_game_over,\n                moveNumber: this.board.get_move_count(),\n                winningLine: moveResult.winning_line,\n                executionTime: moveTime\n            };\n            \n            console.log(`üéÆ Move ${result.moveNumber}: Player ${currentPlayer} ‚Üí Column ${col + 1} (${moveTime.toFixed(2)}ms)`);\n            \n            // Emit events\n            this.emit('move', result);\n            this.emit('moveMade', result); // Alias for compatibility\n            \n            if (result.isGameOver) {\n                const gameEndData = {\n                    winner: result.winner,\n                    winningLine: result.winningLine,\n                    totalMoves: this.totalMoves,\n                    averageMoveTime: this.averageMoveTime\n                };\n                \n                console.log(`üèÅ Game Over! Winner: ${result.winner || 'Draw'}`);\n                this.emit('gameOver', gameEndData);\n            }\n            \n            return result;\n            \n        } catch (error) {\n            console.error(`‚ùå Move failed in column ${col}:`, error.message);\n            throw error;\n        }\n    }\n    \n    /**\n     * Check if a move is valid in the given column\n     * @param {number} col - Column (0-6)\n     * @returns {boolean} True if move is valid\n     */\n    isValidMove(col) {\n        if (!this.initialized) return false;\n        if (col < 0 || col >= this.cols) return false;\n        \n        try {\n            return this.board.is_valid_move(col);\n        } catch (error) {\n            return false;\n        }\n    }\n    \n    /**\n     * Get current game state\n     */\n    getGameState() {\n        if (!this.initialized) {\n            return null;\n        }\n        \n        return {\n            board: this.board.get_board(),\n            currentPlayer: this.board.get_current_player(),\n            moveCount: this.board.get_move_count(),\n            isGameOver: this.board.is_game_over(),\n            winner: this.board.get_winner(),\n            validMoves: this.getValidMoves(),\n            memoryUsage: this.board.memory_usage(),\n            performanceStats: {\n                totalMoves: this.totalMoves,\n                averageMoveTime: this.averageMoveTime\n            }\n        };\n    }\n    \n    /**\n     * Get current board as 2D array\n     */\n    getBoard() {\n        if (!this.initialized) return null;\n        \n        const flatBoard = this.board.get_board();\n        const board2D = [];\n        \n        for (let row = 0; row < this.rows; row++) {\n            board2D[row] = [];\n            for (let col = 0; col < this.cols; col++) {\n                board2D[row][col] = flatBoard[row * this.cols + col];\n            }\n        }\n        \n        return board2D;\n    }\n    \n    /**\n     * Get cell value at specific position\n     * @param {number} row - Row (0-5)\n     * @param {number} col - Column (0-6)\n     * @returns {number} Cell value (0=empty, 1=player1, 2=player2)\n     */\n    getCell(row, col) {\n        if (!this.initialized) return 0;\n        if (row < 0 || row >= this.rows || col < 0 || col >= this.cols) return 0;\n        \n        try {\n            return this.board.get_cell(row, col);\n        } catch (error) {\n            return 0;\n        }\n    }\n    \n    /**\n     * Get current player\n     * @returns {number} Current player (1 or 2)\n     */\n    getCurrentPlayer() {\n        if (!this.initialized) return 1;\n        return this.board.get_current_player();\n    }\n    \n    /**\n     * Get move count\n     * @returns {number} Number of moves made\n     */\n    getMoveCount() {\n        if (!this.initialized) return 0;\n        return this.board.get_move_count();\n    }\n    \n    /**\n     * Check if game is over\n     * @returns {boolean} True if game is over\n     */\n    isGameOver() {\n        if (!this.initialized) return false;\n        return this.board.is_game_over();\n    }\n    \n    /**\n     * Get game winner\n     * @returns {number|null} Winner (1, 2) or null for draw/ongoing\n     */\n    getWinner() {\n        if (!this.initialized) return null;\n        return this.board.get_winner();\n    }\n    \n    /**\n     * Get all valid moves\n     * @returns {number[]} Array of valid column indices\n     */\n    getValidMoves() {\n        if (!this.initialized) return [];\n        \n        const validMoves = [];\n        for (let col = 0; col < this.cols; col++) {\n            if (this.isValidMove(col)) {\n                validMoves.push(col);\n            }\n        }\n        return validMoves;\n    }\n    \n    /**\n     * Reset game to initial state\n     */\n    newGame() {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        try {\n            this.board.reset();\n            this.gameHistory = [];\n            this.currentMoveIndex = -1;\n            this.totalMoves = 0;\n            this.averageMoveTime = 0;\n            \n            console.log('üÜï New Connect4 game started');\n            this.emit('newGame', this.getGameState());\n            \n        } catch (error) {\n            console.error('‚ùå Failed to reset game:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Check if undo is possible\n     * @returns {boolean} True if undo is available\n     */\n    canUndo() {\n        return this.initialized && this.board.can_undo();\n    }\n    \n    /**\n     * Undo last move\n     * @returns {Object} Undo result\n     */\n    undoMove() {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        if (!this.canUndo()) {\n            throw new Error('Cannot undo: no moves to undo');\n        }\n        \n        try {\n            const previousState = this.getGameState();\n            this.board.undo_move();\n            \n            // Update history\n            if (this.gameHistory.length > 0) {\n                this.gameHistory.pop();\n                this.currentMoveIndex--;\n            }\n            \n            const undoResult = {\n                previousState,\n                currentState: this.getGameState()\n            };\n            \n            console.log('‚Ü∂ Move undone');\n            this.emit('undo', undoResult);\n            \n            return undoResult;\n            \n        } catch (error) {\n            console.error('‚ùå Failed to undo move:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Get AI-optimized board representation for minimax\n     */\n    getAIBoard() {\n        if (!this.initialized) return null;\n        return this.board.get_ai_board();\n    }\n    \n    /**\n     * Evaluate board position for AI (if implemented in WASM)\n     */\n    evaluatePosition(player) {\n        if (!this.initialized) return 0;\n        \n        try {\n            return this.board.evaluate_position_for_player(player);\n        } catch (error) {\n            // Fallback to basic evaluation\n            return 0;\n        }\n    }\n    \n    /**\n     * Get threatening moves for player\n     */\n    getThreateningMoves(player) {\n        if (!this.initialized) return [];\n        \n        try {\n            return this.board.get_threatening_moves(player);\n        } catch (error) {\n            return [];\n        }\n    }\n    \n    /**\n     * Get winning moves for player\n     */\n    getWinningMoves(player) {\n        if (!this.initialized) return [];\n        \n        try {\n            return this.board.get_winning_moves(player);\n        } catch (error) {\n            return [];\n        }\n    }\n    \n    /**\n     * Get blocking moves for player\n     */\n    getBlockingMoves(player) {\n        if (!this.initialized) return [];\n        \n        try {\n            return this.board.get_blocking_moves(player);\n        } catch (error) {\n            return [];\n        }\n    }\n    \n    /**\n     * Get AI move suggestion using WASM engine\n     * @returns {number|null} Column index (0-6) or null if no move available\n     */\n    getAIMove() {\n        if (!this.initialized) {\n            console.warn('‚ö†Ô∏è WASM board not initialized for AI move');\n            return null;\n        }\n        \n        try {\n            const aiMove = this.board.get_ai_move();\n            console.log(`ü§ñ WASM AI suggests move: ${aiMove}`);\n            return aiMove;\n        } catch (error) {\n            console.error('‚ùå WASM AI move failed:', error);\n            return null;\n        }\n    }\n    \n    // ==================== EVENT SYSTEM ====================\n    \n    /**\n     * Add event listener\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n    \n    /**\n     * Remove event listener\n     */\n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * Emit event\n     * @private\n     */\n    emit(event, data) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            for (const callback of listeners) {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`‚ùå Event callback error for '${event}':`, error);\n                }\n            }\n        }\n    }\n    \n    // ==================== PERFORMANCE & DEBUGGING ====================\n    \n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        const memoryUsage = this.initialized ? this.board.memory_usage() : 0;\n        const naiveMemoryUsage = 84; // 6 * 7 * 2 bytes for naive implementation\n        \n        let memoryEfficiency = '0%';\n        if (this.initialized) {\n            if (memoryUsage <= naiveMemoryUsage) {\n                const efficiency = ((naiveMemoryUsage - memoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                memoryEfficiency = `${efficiency}% savings`;\n            } else {\n                const overhead = ((memoryUsage - naiveMemoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                memoryEfficiency = `${overhead}% overhead`;\n            }\n        }\n        \n        return {\n            totalMoves: this.totalMoves,\n            averageMoveTime: this.averageMoveTime,\n            memoryUsage: memoryUsage,\n            memoryEfficiency: memoryEfficiency\n        };\n    }\n    \n    /**\n     * Get game history\n     */\n    getHistory() {\n        return [...this.gameHistory]; // Return copy\n    }\n    \n    /**\n     * Export game state for analysis\n     */\n    exportGame() {\n        return {\n            history: this.getHistory(),\n            finalState: this.getGameState(),\n            performance: this.getPerformanceStats(),\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Debug board state\n     */\n    debugBoard() {\n        if (!this.initialized) {\n            console.log('üö´ Game not initialized');\n            return;\n        }\n        \n        const board = this.getBoard();\n        console.log('üéØ Connect4 Board State:');\n        console.log('   1 2 3 4 5 6 7');\n        \n        for (let row = 0; row < this.rows; row++) {\n            let rowStr = `${row + 1}: `;\n            for (let col = 0; col < this.cols; col++) {\n                const cell = board[row][col];\n                rowStr += (cell === 0 ? '.' : (cell === 1 ? 'Y' : 'R')) + ' ';\n            }\n            console.log(rowStr);\n        }\n        \n        console.log(`Current Player: ${this.getCurrentPlayer()}`);\n        console.log(`Move Count: ${this.getMoveCount()}`);\n        console.log(`Game Over: ${this.isGameOver()}`);\n        console.log(`Winner: ${this.getWinner() || 'None'}`);\n        console.log(`Valid Moves: [${this.getValidMoves().map(c => c + 1).join(', ')}]`);\n    }\n    \n    /**\n     * Destroy game instance and cleanup\n     */\n    destroy() {\n        this.eventListeners.clear();\n        this.gameHistory = [];\n        this.initialized = false;\n        this.board = null;\n        \n        console.log('üóëÔ∏è Connect4GameBitPacked destroyed');\n    }\n}"],"names":["Connect4GameBitPacked","init","Connect4Game","memoryUsage","naiveMemoryUsage","efficiency","overhead","error","col","currentPlayer","moveResult","moveTime","move","result","gameEndData","flatBoard","board2D","row","validMoves","previousState","undoResult","player","event","callback","listeners","index","data","memoryEfficiency","board","rowStr","cell"],"mappings":"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"}