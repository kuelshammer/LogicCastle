{"version":3,"file":"ui-production-BPB11lUc.js","sources":["../../games/gomoku/js/gomoku-config.js","../../games/gomoku/js/components/GomokuBoardRenderer.js","../../games/gomoku/js/components/GomokuInteractionHandler.js","../../games/gomoku/js/components/GomokuAssistanceManager.js","../../games/gomoku/js/components/MemoryManager.js","../../games/gomoku/js/components/OptimizedElementBinder.js","../../games/gomoku/js/components/GomokuAnimationManager.js","../../games/gomoku/js/ui-production.js"],"sourcesContent":["/**\n * Gomoku UI Configuration\n * \n * Based on Connect4 goldstandard configuration system.\n * Adapted for 15x15 Gomoku board and 5-in-a-row gameplay.\n */\n\nexport const GOMOKU_UI_CONFIG = {\n    // DOM Element Configuration\n    elements: {\n        // Core game elements (required)\n        required: [\n            'gameBoard',\n            'currentPlayerIndicator', \n            'gameStatus'\n        ],\n        \n        // UI control elements (optional but expected)\n        optional: [\n            // Game info\n            'blackScore',\n            'whiteScore', \n            'moveCounter',\n            \n            // Control buttons\n            'newGameBtn',\n            'undoBtn',\n            'resetScoreBtn',\n            'helpBtn',\n            'assistanceBtn',\n            \n            // Modals\n            'helpModal',\n            'assistanceModal',\n            'closeHelpBtn',\n            'closeAssistanceBtn',\n            \n            // Game mode\n            'gameMode',\n            \n            // Player assistance checkboxes\n            'player1-undo',\n            'player2-undo',\n            'player1-threats',\n            'player2-threats',\n            'player1-winning-moves',\n            'player2-winning-moves',\n            'player1-blocked-positions',\n            'player2-blocked-positions'\n        ]\n    },\n\n    // Modal Configuration \n    modals: {\n        help: {\n            id: 'helpModal',\n            closeKey: 'F1',\n            closeOnEscape: true,\n            closeOnOutsideClick: true\n        },\n        \n        assistance: {\n            id: 'assistanceModal',\n            closeKey: 'F2',\n            closeOnEscape: true,\n            closeOnOutsideClick: false\n        }\n    },\n\n    // Keyboard Shortcuts Configuration\n    keyboard: {\n        // Function keys\n        'F1': 'toggleModal_help',\n        'F2': 'toggleModal_assistance', \n        'F3': 'resetScore',\n        \n        // Game controls\n        'n': 'newGame',\n        'N': 'newGame',\n        'u': 'undoMove',\n        'U': 'undoMove',\n        'r': 'resetScore',\n        'R': 'resetScore',\n        \n        // Ctrl combinations\n        'Ctrl+z': 'undoMove',\n        'Ctrl+Z': 'undoMove',\n        'Ctrl+n': 'newGame',\n        'Ctrl+N': 'newGame'\n    },\n\n    // Performance Configuration\n    performance: {\n        enableAnimations: true,\n        animationDuration: 300,\n        \n        // Intersection rendering optimization\n        useLazyRendering: true,\n        renderBatchSize: 25,  // 25 intersections per batch for 15x15 board\n        \n        // Preview system configuration\n        enableHoverPreviews: true,\n        previewDelay: 50,     // ms delay before showing preview\n        \n        // Assistance system performance\n        assistanceUpdateDelay: 100,  // ms delay for assistance calculations\n        maxHighlightedPositions: 20   // limit highlights for performance\n    },\n\n    // Game-specific Configuration\n    game: {\n        boardSize: 15,        // 15x15 Gomoku board\n        winCondition: 5,      // 5 stones in a row to win\n        enableForbiddenMoves: false,  // Standard Gomoku rules (no forbidden moves)\n        \n        // Stone placement rules\n        allowOverwrite: false,\n        requireIntersectionClick: true,\n        \n        // AI configuration\n        defaultAILevel: 'medium',\n        aiThinkingTime: 600,   // ms\n        \n        // Assistance features\n        assistanceFeatures: [\n            'threats',         // Show threat positions  \n            'winning-moves',   // Show winning opportunities\n            'blocked-positions', // Show blocked positions\n            'undo'             // Allow undo moves\n        ]\n    }\n};\n\n/**\n * Create game-mode specific configuration\n * @param {string} mode - Game mode ('two-player', 'single-player', 'demo')\n * @returns {Object} Configuration object\n */\nexport function createGomokuConfig(mode = 'two-player') {\n    const baseConfig = { ...GOMOKU_UI_CONFIG };\n    \n    switch (mode) {\n        case 'single-player':\n            baseConfig.game.aiEnabled = true;\n            baseConfig.game.defaultAILevel = 'medium';\n            baseConfig.performance.aiThinkingTime = 800;\n            break;\n            \n        case 'two-player':\n        default:\n            baseConfig.game.aiEnabled = false;\n            baseConfig.game.autoPlay = false;\n            break;\n    }\n    \n    return baseConfig;\n}","/**\n * GomokuBoardRenderer - Gomoku Board Rendering & Visual Updates\n * \n * Adapted from Connect4 BoardRenderer for 15x15 Gomoku board.\n * Handles all board creation, intersection management, and visual updates.\n * \n * Responsibilities:\n * - Board DOM creation & styling\n * - Intersection management (15x15 = 225 intersections)\n * - Stone placement and updates\n * - Board state visual updates\n * - Responsive sizing & layout\n */\n\nexport class GomokuBoardRenderer {\n    constructor(gameBoard) {\n        this.gameBoard = gameBoard;\n        \n        // Board configuration\n        this.boardSize = 15;\n        this.intersections = [];\n        this.stones = [];\n        \n        // Visual state\n        this.initialized = false;\n        \n        // Star points (traditional Gomoku board markings)\n        this.starPoints = [\n            [3, 3], [3, 11], [7, 7], [11, 3], [11, 11]\n        ];\n    }\n\n    /**\n     * Initialize the Gomoku board (15x15 grid)\n     * Adapted from Connect4 BoardRenderer.initializeBoard()\n     */\n    initializeBoard() {\n        if (!this.gameBoard) {\n            console.error('‚ùå Game board element not found');\n            return false;\n        }\n\n        // Clear existing board\n        this.gameBoard.innerHTML = '';\n        this.intersections = [];\n        this.stones = [];\n        \n        // Apply Gomoku board styles\n        this._applyBoardStyles();\n        \n        // Create 15x15 grid (225 intersections total)\n        this._createBoardIntersections();\n        \n        console.log(`‚ö´ Gomoku board initialized (${this.boardSize}x${this.boardSize} grid, ${this.intersections.length} intersections)`);\n        console.log(`üîç DEBUG: Created ${this.intersections.length} intersections`);\n        console.log(`üîç DEBUG: GameBoard innerHTML length: ${this.gameBoard.innerHTML.length}`);\n        \n        if (this.intersections.length > 0) {\n            console.log(`üîç DEBUG: First intersection structure: ${this.intersections[0].outerHTML}`);\n        }\n        \n        this.initialized = true;\n        return true;\n    }\n\n    /**\n     * Apply CSS Grid styles and responsive constraints to board\n     * @private\n     */\n    _applyBoardStyles() {\n        // Use UI-Module System with Tailwind classes - container handles sizing\n        this.gameBoard.className = 'game-board gomoku-board game-board-intersections';\n        \n        // Apply Gomoku-specific styles with responsive constraints\n        Object.assign(this.gameBoard.style, {\n            display: 'grid',\n            gridTemplateColumns: `repeat(${this.boardSize}, 1fr)`,\n            gridTemplateRows: `repeat(${this.boardSize}, 1fr)`,\n            gap: '1px',\n            aspectRatio: '1/1',\n            background: 'linear-gradient(45deg, #8B4513, #A0522D)',\n            borderRadius: '12px',\n            padding: '20px',\n            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n            border: '3px solid #654321',\n            width: '600px',\n            height: '600px',\n            margin: '1rem auto',\n            position: 'relative'\n        });\n        \n        console.log('üé® Applied CSS Grid styles for 15x15 Gomoku board');\n    }\n\n    /**\n     * Create all board intersections\n     * @private\n     */\n    _createBoardIntersections() {\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                const intersection = this._createIntersection(row, col);\n                this.intersections.push(intersection);\n                this.gameBoard.appendChild(intersection);\n            }\n        }\n    }\n\n    /**\n     * Create a single intersection element\n     * @private\n     */\n    _createIntersection(row, col) {\n        const intersection = document.createElement('div');\n        intersection.className = 'intersection';\n        intersection.dataset.row = row;\n        intersection.dataset.col = col;\n        \n        // Add star point marking if applicable\n        if (this._isStarPoint(row, col)) {\n            intersection.classList.add('star-point');\n        }\n        \n        // Apply intersection styles\n        Object.assign(intersection.style, {\n            background: 'linear-gradient(45deg, #DEB887, #F5DEB3)',\n            border: '1px solid #8B4513',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            transition: 'all 0.2s ease',\n            position: 'relative',\n            userSelect: 'none'\n        });\n        \n        return intersection;\n    }\n\n    /**\n     * Check if position is a star point\n     * @private\n     */\n    _isStarPoint(row, col) {\n        return this.starPoints.some(([starRow, starCol]) => starRow === row && starCol === col);\n    }\n\n    /**\n     * Place a stone at specific position\n     */\n    placeStone(row, col, player) {\n        const intersection = this.getIntersectionAt(row, col);\n        if (!intersection) {\n            console.warn(`‚ö†Ô∏è Intersection not found at (${row}, ${col})`);\n            return false;\n        }\n\n        // Remove any existing stone\n        const existingStone = intersection.querySelector('.stone');\n        if (existingStone) {\n            existingStone.remove();\n        }\n\n        // Create new stone\n        const stone = this._createStone(player);\n        intersection.appendChild(stone);\n\n        // Add last move indicator\n        this._clearLastMoveIndicators();\n        intersection.classList.add('last-move');\n\n        console.log(`‚ö´ Stone placed at (${row}, ${col}) for player ${player}`);\n        return true;\n    }\n\n    /**\n     * Create a stone element\n     * @private\n     */\n    _createStone(player) {\n        const stone = document.createElement('div');\n        stone.className = `stone ${player === 1 ? 'black' : 'white'} placing`;\n        \n        // Apply stone styles\n        Object.assign(stone.style, {\n            width: '85%',\n            height: '85%',\n            borderRadius: '50%',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.4)',\n            position: 'relative'\n        });\n\n        if (player === 1) { // Black stone\n            Object.assign(stone.style, {\n                background: 'radial-gradient(circle at 30% 30%, #444, #000)',\n                border: '2px solid #222'\n            });\n        } else { // White stone\n            Object.assign(stone.style, {\n                background: 'radial-gradient(circle at 30% 30%, #fff, #ddd)',\n                border: '2px solid #ccc'\n            });\n        }\n\n        return stone;\n    }\n\n    /**\n     * Get intersection element at specific position\n     */\n    getIntersectionAt(row, col) {\n        return this.gameBoard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    }\n\n    /**\n     * Clear all stones from the board\n     */\n    clearBoard() {\n        this.intersections.forEach(intersection => {\n            const stone = intersection.querySelector('.stone');\n            if (stone) {\n                stone.remove();\n            }\n            intersection.classList.remove('last-move', 'winning-stone', 'threat-highlight', 'assistance-highlight');\n        });\n        \n        console.log('üßπ Gomoku board cleared');\n    }\n\n    /**\n     * Update board from game state\n     */\n    updateFromGameState(game) {\n        if (!game || !game.getBoard) {\n            console.warn('‚ö†Ô∏è Invalid game instance for board update');\n            return;\n        }\n\n        // Clear existing stones\n        this.clearBoard();\n\n        // Get board state from game\n        const board = game.getBoard();\n        \n        // Place stones according to game state\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                const cellValue = board[row] && board[row][col];\n                if (cellValue && cellValue !== 0) {\n                    this.placeStone(row, col, cellValue);\n                }\n            }\n        }\n    }\n\n    /**\n     * Highlight winning line\n     */\n    highlightWinningLine(positions) {\n        if (!Array.isArray(positions)) {\n            console.warn('‚ö†Ô∏è Invalid winning positions');\n            return;\n        }\n\n        positions.forEach(([row, col]) => {\n            const intersection = this.getIntersectionAt(row, col);\n            if (intersection) {\n                intersection.classList.add('winning-stone');\n            }\n        });\n\n        console.log(`üèÜ Highlighted winning line with ${positions.length} stones`);\n    }\n\n    /**\n     * Clear last move indicators\n     * @private\n     */\n    _clearLastMoveIndicators() {\n        this.intersections.forEach(intersection => {\n            intersection.classList.remove('last-move');\n        });\n    }\n\n    /**\n     * Show stone preview at position\n     */\n    showStonePreview(row, col, player) {\n        const intersection = this.getIntersectionAt(row, col);\n        if (!intersection || intersection.querySelector('.stone')) {\n            return; // Position occupied\n        }\n\n        intersection.dataset.hoverPreview = player === 1 ? 'black' : 'white';\n    }\n\n    /**\n     * Hide stone preview\n     */\n    hideStonePreview() {\n        this.intersections.forEach(intersection => {\n            delete intersection.dataset.hoverPreview;\n        });\n    }\n\n    /**\n     * Add threat highlight to intersection\n     */\n    addThreatHighlight(row, col) {\n        const intersection = this.getIntersectionAt(row, col);\n        if (intersection) {\n            intersection.classList.add('threat-highlight');\n        }\n    }\n\n    /**\n     * Add assistance highlight to intersection  \n     */\n    addAssistanceHighlight(row, col) {\n        const intersection = this.getIntersectionAt(row, col);\n        if (intersection) {\n            intersection.classList.add('assistance-highlight');\n        }\n    }\n\n    /**\n     * Clear all assistance highlights\n     */\n    clearAssistanceHighlights() {\n        this.intersections.forEach(intersection => {\n            intersection.classList.remove('threat-highlight', 'assistance-highlight');\n        });\n    }\n\n    /**\n     * Get all intersections\n     */\n    getAllIntersections() {\n        return this.intersections;\n    }\n\n    /**\n     * Check if position is valid\n     */\n    isValidPosition(row, col) {\n        return row >= 0 && row < this.boardSize && col >= 0 && col < this.boardSize;\n    }\n\n    /**\n     * Check if position is empty\n     */\n    isPositionEmpty(row, col) {\n        const intersection = this.getIntersectionAt(row, col);\n        return intersection && !intersection.querySelector('.stone');\n    }\n}","/**\n * GomokuInteractionHandler - Gomoku User Interaction Management\n * \n * Adapted from Connect4 InteractionHandler for 15x15 Gomoku board.\n * Handles all user interactions: clicks, hover, keyboard.\n * \n * Responsibilities:\n * - Intersection click & hover handling\n * - Stone preview system\n * - Keyboard interactions\n * - Touch/mobile interaction support\n * - Position validation & feedback\n */\n\nexport class GomokuInteractionHandler {\n    constructor(game, boardRenderer, elements) {\n        this.game = game;\n        this.boardRenderer = boardRenderer;\n        this.elements = elements;\n        \n        // Interaction state\n        this.hoveredPosition = null;\n        this.previewStone = null;\n        this.isProcessingMove = false;\n        \n        // Event listeners for cleanup\n        this.eventListeners = [];\n        \n        // Callback functions\n        this.onPositionClickCallback = null;\n        this.onPositionHoverCallback = null;\n        this.onPositionHoverLeaveCallback = null;\n    }\n\n    /**\n     * Setup all intersection interactions (click, hover)\n     */\n    setupEventHandlers(onMoveCallback) {\n        this.onPositionClickCallback = onMoveCallback;\n        \n        if (!this.boardRenderer || !this.boardRenderer.gameBoard) {\n            console.warn('‚ö†Ô∏è BoardRenderer not available for interaction setup');\n            return;\n        }\n\n        // Setup intersection click handlers\n        this._setupIntersectionClickHandlers();\n        \n        // Setup intersection hover handlers for stone preview\n        this._setupIntersectionHoverHandlers();\n        \n        // Setup keyboard interactions\n        this._setupKeyboardHandlers();\n        \n        console.log('üéØ Gomoku interaction handlers set up (intersections + keyboard + hover)');\n    }\n\n    /**\n     * Setup intersection click event handlers\n     * @private\n     */\n    _setupIntersectionClickHandlers() {\n        const clickHandler = (event) => {\n            const intersection = event.target.closest('.intersection');\n            if (intersection) {\n                const row = parseInt(intersection.dataset.row);\n                const col = parseInt(intersection.dataset.col);\n                this.handlePositionClick(row, col);\n            }\n        };\n\n        this.boardRenderer.gameBoard.addEventListener('click', clickHandler);\n        this._addEventListener(this.boardRenderer.gameBoard, 'click', clickHandler);\n        \n        console.log('üéØ Setup intersection click handlers for 15x15 board');\n    }\n\n    /**\n     * Setup intersection hover event handlers for stone preview\n     * @private\n     */\n    _setupIntersectionHoverHandlers() {\n        const mouseEnterHandler = (event) => {\n            const intersection = event.target.closest('.intersection');\n            if (intersection && !intersection.querySelector('.stone')) {\n                const row = parseInt(intersection.dataset.row);\n                const col = parseInt(intersection.dataset.col);\n                this.handlePositionHover(row, col);\n            }\n        };\n\n        const mouseLeaveHandler = (event) => {\n            const intersection = event.target.closest('.intersection');\n            if (intersection) {\n                this.handlePositionHoverLeave();\n            }\n        };\n\n        this.boardRenderer.gameBoard.addEventListener('mouseenter', mouseEnterHandler, true);\n        this.boardRenderer.gameBoard.addEventListener('mouseleave', mouseLeaveHandler, true);\n        \n        this._addEventListener(this.boardRenderer.gameBoard, 'mouseenter', mouseEnterHandler, true);\n        this._addEventListener(this.boardRenderer.gameBoard, 'mouseleave', mouseLeaveHandler, true);\n        \n        console.log('üéØ Setup intersection hover handlers for stone preview');\n    }\n\n    /**\n     * Setup keyboard interactions\n     * @private\n     */\n    _setupKeyboardHandlers() {\n        const keyHandler = (event) => {\n            // Handle number keys for quick column focus (1-9, 0 for 10)\n            if (event.key >= '1' && event.key <= '9') {\n                const col = parseInt(event.key) - 1;\n                if (col < 15) {\n                    this.focusColumn(col);\n                    event.preventDefault();\n                }\n            } else if (event.key === '0') {\n                this.focusColumn(9); // 0 maps to column 10 (index 9)\n                event.preventDefault();\n            }\n            \n            // Handle letter keys for columns 11-15\n            const letterColumnMap = {\n                'q': 10, 'w': 11, 'e': 12, 'r': 13, 't': 14\n            };\n            \n            if (letterColumnMap[event.key.toLowerCase()]) {\n                this.focusColumn(letterColumnMap[event.key.toLowerCase()]);\n                event.preventDefault();\n            }\n        };\n\n        document.addEventListener('keydown', keyHandler);\n        this._addEventListener(document, 'keydown', keyHandler);\n        \n        console.log('üéØ Setup keyboard handlers for quick column focus');\n    }\n\n    /**\n     * Handle intersection click\n     */\n    handlePositionClick(row, col) {\n        if (this.isProcessingMove) {\n            console.log('‚ö†Ô∏è Move already in progress, ignoring click');\n            return;\n        }\n\n        console.log(`üéØ Intersection clicked: (${row}, ${col})`);\n\n        // Validate position\n        if (!this.boardRenderer.isValidPosition(row, col)) {\n            console.warn(`‚ö†Ô∏è Invalid position: (${row}, ${col})`);\n            return;\n        }\n\n        // Check if position is empty\n        if (!this.boardRenderer.isPositionEmpty(row, col)) {\n            console.warn(`‚ö†Ô∏è Position already occupied: (${row}, ${col})`);\n            return;\n        }\n\n        // Execute move callback\n        if (this.onPositionClickCallback) {\n            this.onPositionClickCallback(row, col);\n        }\n    }\n\n    /**\n     * Handle intersection hover\n     */\n    handlePositionHover(row, col) {\n        if (this.isProcessingMove) return;\n\n        this.hoveredPosition = { row, col };\n        \n        // Show stone preview\n        this.showStonePreview(row, col);\n        \n        // Execute hover callback if provided\n        if (this.onPositionHoverCallback) {\n            this.onPositionHoverCallback(row, col);\n        }\n    }\n\n    /**\n     * Handle intersection hover leave\n     */\n    handlePositionHoverLeave() {\n        this.hoveredPosition = null;\n        \n        // Hide stone preview\n        this.hideStonePreview();\n        \n        // Execute hover leave callback if provided\n        if (this.onPositionHoverLeaveCallback) {\n            this.onPositionHoverLeaveCallback();\n        }\n    }\n\n    /**\n     * Show stone preview at position\n     */\n    showStonePreview(row, col) {\n        if (!this.game || !this.boardRenderer) return;\n\n        // Hide previous preview\n        this.hideStonePreview();\n\n        // Get current player for preview\n        const currentPlayer = this.game.getCurrentPlayer ? this.game.getCurrentPlayer() : 1;\n        \n        // Show preview through BoardRenderer\n        this.boardRenderer.showStonePreview(row, col, currentPlayer);\n    }\n\n    /**\n     * Hide stone preview\n     */\n    hideStonePreview() {\n        if (this.boardRenderer) {\n            this.boardRenderer.hideStonePreview();\n        }\n    }\n\n    /**\n     * Focus on specific column (visual highlight)\n     */\n    focusColumn(col) {\n        if (col < 0 || col >= 15) {\n            console.warn(`‚ö†Ô∏è Invalid column for focus: ${col}`);\n            return;\n        }\n\n        // Clear previous focus\n        this._clearColumnFocus();\n\n        // Highlight all intersections in the column\n        for (let row = 0; row < 15; row++) {\n            const intersection = this.boardRenderer.getIntersectionAt(row, col);\n            if (intersection && this.boardRenderer.isPositionEmpty(row, col)) {\n                intersection.classList.add('column-focus');\n                \n                // Add temporary styles for focus indication\n                intersection.style.background = 'linear-gradient(45deg, #F0E68C, #FFFFE0)';\n                intersection.style.boxShadow = '0 0 10px rgba(255, 215, 0, 0.6)';\n            }\n        }\n\n        // Auto-clear focus after 2 seconds\n        setTimeout(() => {\n            this._clearColumnFocus();\n        }, 2000);\n\n        console.log(`üéØ Focused on column ${col + 1}`);\n    }\n\n    /**\n     * Clear column focus styling\n     * @private\n     */\n    _clearColumnFocus() {\n        const focusedIntersections = this.boardRenderer.gameBoard.querySelectorAll('.column-focus');\n        focusedIntersections.forEach(intersection => {\n            intersection.classList.remove('column-focus');\n            intersection.style.background = '';\n            intersection.style.boxShadow = '';\n        });\n    }\n\n    /**\n     * Set processing state\n     */\n    setProcessingMove(processing) {\n        this.isProcessingMove = processing;\n        \n        if (processing) {\n            this.hideStonePreview();\n        }\n    }\n\n    /**\n     * Add event listener and track for cleanup\n     * @private\n     */\n    _addEventListener(element, event, handler, useCapture = false) {\n        this.eventListeners.push({ element, event, handler, useCapture });\n    }\n\n    /**\n     * Clean up all event listeners\n     */\n    cleanup() {\n        this.eventListeners.forEach(({ element, event, handler, useCapture }) => {\n            element.removeEventListener(event, handler, useCapture);\n        });\n        this.eventListeners = [];\n        \n        console.log('üßπ GomokuInteractionHandler cleaned up');\n    }\n\n    /**\n     * Enable interactions\n     */\n    enable() {\n        this.isProcessingMove = false;\n        \n        // Re-enable hover effects\n        if (this.boardRenderer && this.boardRenderer.gameBoard) {\n            this.boardRenderer.gameBoard.style.pointerEvents = 'auto';\n        }\n    }\n\n    /**\n     * Disable interactions\n     */\n    disable() {\n        this.isProcessingMove = true;\n        this.hideStonePreview();\n        \n        // Disable hover effects\n        if (this.boardRenderer && this.boardRenderer.gameBoard) {\n            this.boardRenderer.gameBoard.style.pointerEvents = 'none';\n        }\n    }\n\n    /**\n     * Get current hovered position\n     */\n    getHoveredPosition() {\n        return this.hoveredPosition;\n    }\n\n    /**\n     * Check if position is being processed\n     */\n    isPositionProcessing() {\n        return this.isProcessingMove;\n    }\n}","/**\n * GomokuAssistanceManager - Gomoku Player Assistance System\n * \n * Adapted from Connect4 AssistanceManager for 15x15 Gomoku gameplay.\n * Provides intelligent assistance features for players.\n * \n * Features:\n * - Threat detection and highlighting\n * - Winning move identification\n * - Blocked position detection\n * - Visual feedback for assistance features\n */\n\nexport class GomokuAssistanceManager {\n    constructor(game, boardRenderer, elements) {\n        this.game = game;\n        this.boardRenderer = boardRenderer;\n        this.elements = elements;\n        \n        // Player assistance settings\n        this.assistanceSettings = {\n            player1: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            },\n            player2: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            }\n        };\n        \n        // Tracked elements for cleanup\n        this.highlightedElements = new Set();\n    }\n\n    /**\n     * Setup player assistance system\n     * Adapted from Connect4 AssistanceManager.setupAssistanceSystem()\n     */\n    setupAssistanceSystem() {\n        const players = ['player1', 'player2'];\n        const features = ['undo', 'threats', 'winning-moves', 'blocked-positions'];\n        \n        for (const player of players) {\n            for (const feature of features) {\n                const elementId = `${player}-${feature}`;\n                const checkbox = this.elements[elementId];\n                \n                if (checkbox) {\n                    const changeHandler = () => {\n                        this.toggleAssistance(player, feature);\n                    };\n                    checkbox.addEventListener('change', changeHandler);\n                } else {\n                    console.warn(`‚ö†Ô∏è Assistance checkbox not found: ${elementId}`);\n                }\n            }\n        }\n        \n        console.log('üéØ Gomoku player assistance system set up');\n    }\n\n    /**\n     * Update assistance highlights based on current settings\n     */\n    updateAssistanceHighlights() {\n        if (!this.game || !this.game.initialized || typeof this.game.getCurrentPlayer !== 'function') {\n            console.log('‚ö†Ô∏è GomokuAssistanceManager: Game not ready for assistance highlights');\n            return;\n        }\n        \n        // Clear existing highlights\n        this.clearAssistanceHighlights();\n        \n        const currentPlayer = this.game.getCurrentPlayer();\n        const playerKey = currentPlayer === 1 ? 'player1' : 'player2';\n        const settings = this.assistanceSettings[playerKey];\n        \n        console.log(`üîç GomokuAssistanceManager: Updating highlights for ${playerKey} (Player ${currentPlayer})`);\n        console.log(`üîç GomokuAssistanceManager: Settings:`, settings);\n        \n        if (settings.threats) {\n            console.log('üîç Highlighting threats...');\n            this.highlightThreats();\n        }\n        \n        if (settings['winning-moves']) {\n            console.log('üîç Highlighting winning moves...');\n            this.highlightWinningMoves();\n        }\n        \n        if (settings['blocked-positions']) {\n            console.log('üîç Highlighting blocked positions...');\n            this.highlightBlockedPositions();\n        }\n        \n        console.log(`‚úÖ GomokuAssistanceManager: Highlights updated for ${playerKey}`);\n    }\n\n    /**\n     * Highlight threat positions\n     */\n    highlightThreats() {\n        if (!this.game || !this.game.getThreateningMoves) return;\n        \n        try {\n            const currentPlayer = this.game.getCurrentPlayer();\n            const opponent = currentPlayer === 1 ? 2 : 1;\n            const threats = this.game.getThreateningMoves(opponent);\n            \n            this.highlightPositions(threats, 'threat-position');\n            console.log(`üéØ Highlighted ${threats.length} threat positions for opponent ${opponent}`);\n        } catch (error) {\n            console.warn('‚ö†Ô∏è Failed to highlight threats:', error.message);\n        }\n    }\n\n    /**\n     * Highlight winning move positions\n     */\n    highlightWinningMoves() {\n        if (!this.game) {\n            console.warn('‚ö†Ô∏è No game instance for winning moves');\n            return;\n        }\n        \n        if (!this.game.getWinningMoves) {\n            console.warn('‚ö†Ô∏è getWinningMoves method not available on game instance');\n            return;\n        }\n        \n        try {\n            const currentPlayer = this.game.getCurrentPlayer();\n            console.log(`üîç Getting winning moves for player ${currentPlayer}...`);\n            \n            const winningMoves = this.game.getWinningMoves(currentPlayer);\n            console.log(`üîç Winning moves result:`, winningMoves);\n            \n            if (Array.isArray(winningMoves) && winningMoves.length > 0) {\n                this.highlightPositions(winningMoves, 'winning-position');\n                console.log(`üéØ Highlighted ${winningMoves.length} winning move positions for player ${currentPlayer}`);\n            } else {\n                console.log(`‚ÑπÔ∏è No winning moves available for player ${currentPlayer}`);\n            }\n        } catch (error) {\n            console.error('‚ùå Failed to highlight winning moves:', error);\n        }\n    }\n\n    /**\n     * Highlight blocked/dangerous positions\n     */\n    highlightBlockedPositions() {\n        if (!this.game || !this.game.getBlockingMoves) return;\n        \n        try {\n            const currentPlayer = this.game.getCurrentPlayer();\n            const blockedPositions = this.game.getBlockingMoves(currentPlayer);\n            \n            this.highlightPositions(blockedPositions, 'blocked-position');\n            console.log(`üéØ Highlighted ${blockedPositions.length} blocked positions for player ${currentPlayer}`);\n        } catch (error) {\n            console.warn('‚ö†Ô∏è Failed to highlight blocked positions:', error.message);\n        }\n    }\n\n    /**\n     * Highlight specific positions with given class\n     */\n    highlightPositions(positions, highlightClass) {\n        if (!Array.isArray(positions)) return;\n        \n        for (const position of positions) {\n            this.highlightPosition(position, highlightClass);\n        }\n    }\n\n    /**\n     * Highlight single position with class\n     */\n    highlightPosition(position, highlightClass) {\n        let row, col;\n        \n        // Handle different position formats\n        if (Array.isArray(position) && position.length >= 2) {\n            [row, col] = position;\n        } else if (position && typeof position === 'object') {\n            row = position.row;\n            col = position.col;\n        } else {\n            console.warn('‚ö†Ô∏è Invalid position format:', position);\n            return;\n        }\n        \n        // Highlight the intersection\n        this._highlightIntersection(row, col, highlightClass);\n    }\n\n    /**\n     * Highlight intersection at position\n     * @private\n     */\n    _highlightIntersection(row, col, highlightClass) {\n        console.log(`üîç Highlighting intersection at (${row}, ${col}) with class ${highlightClass}`);\n        \n        const intersection = this.boardRenderer.getIntersectionAt(row, col);\n        if (intersection) {\n            intersection.classList.add(highlightClass);\n            this.highlightedElements.add(intersection);\n            console.log(`‚úÖ Added ${highlightClass} to intersection (${row}, ${col})`);\n        } else {\n            console.warn(`‚ö†Ô∏è Intersection not found at (${row}, ${col})`);\n        }\n    }\n\n    /**\n     * Clear all assistance highlights\n     */\n    clearAssistanceHighlights() {\n        // Remove highlight classes from all tracked elements\n        for (const element of this.highlightedElements) {\n            element.classList.remove(\n                'winning-position', \n                'threat-position', \n                'blocked-position',\n                'assistance-highlight'\n            );\n        }\n        this.highlightedElements.clear();\n        \n        // Also clear BoardRenderer highlights\n        if (this.boardRenderer) {\n            this.boardRenderer.clearAssistanceHighlights();\n        }\n        \n        console.log('üßπ Assistance highlights cleared');\n    }\n\n    /**\n     * Toggle assistance setting for specific player and type\n     */\n    toggleAssistance(player, type) {\n        if (!this.assistanceSettings[player]) {\n            console.warn(`‚ö†Ô∏è Invalid player: ${player}`);\n            return;\n        }\n        \n        const oldValue = this.assistanceSettings[player][type];\n        this.assistanceSettings[player][type] = !oldValue;\n        \n        console.log(`üîÑ Toggled ${player} ${type}: ${oldValue} ‚Üí ${!oldValue}`);\n        \n        // Update highlights after toggle\n        this.updateAssistanceHighlights();\n        \n        return this.assistanceSettings[player][type];\n    }\n\n    /**\n     * Get current assistance setting for player and type\n     */\n    getAssistanceSetting(player, type) {\n        if (!this.assistanceSettings[player]) {\n            console.warn(`‚ö†Ô∏è Invalid player: ${player}`);\n            return false;\n        }\n        \n        return this.assistanceSettings[player][type] || false;\n    }\n\n    /**\n     * Update assistance checkboxes based on current settings\n     */\n    updateAssistanceCheckboxes() {\n        const players = ['player1', 'player2'];\n        const features = ['undo', 'threats', 'winning-moves', 'blocked-positions'];\n        \n        for (const player of players) {\n            for (const feature of features) {\n                const elementId = `${player}-${feature}`;\n                const checkbox = this.elements[elementId];\n                \n                if (checkbox && checkbox.type === 'checkbox') {\n                    checkbox.checked = this.getAssistanceSetting(player, feature);\n                }\n            }\n        }\n        \n        console.log('üîÑ Assistance checkboxes updated');\n    }\n\n    /**\n     * Enable assistance for player\n     */\n    enableAssistance(player, features = ['threats', 'winning-moves']) {\n        if (!this.assistanceSettings[player]) {\n            console.warn(`‚ö†Ô∏è Invalid player: ${player}`);\n            return;\n        }\n        \n        features.forEach(feature => {\n            this.assistanceSettings[player][feature] = true;\n        });\n        \n        this.updateAssistanceCheckboxes();\n        this.updateAssistanceHighlights();\n        \n        console.log(`‚úÖ Enabled assistance for ${player}:`, features);\n    }\n\n    /**\n     * Disable assistance for player\n     */\n    disableAssistance(player, features = null) {\n        if (!this.assistanceSettings[player]) {\n            console.warn(`‚ö†Ô∏è Invalid player: ${player}`);\n            return;\n        }\n        \n        if (features === null) {\n            // Disable all features\n            features = Object.keys(this.assistanceSettings[player]);\n        }\n        \n        features.forEach(feature => {\n            this.assistanceSettings[player][feature] = false;\n        });\n        \n        this.updateAssistanceCheckboxes();\n        this.clearAssistanceHighlights();\n        \n        console.log(`‚ùå Disabled assistance for ${player}:`, features);\n    }\n\n    /**\n     * Get all assistance settings\n     */\n    getAllSettings() {\n        return JSON.parse(JSON.stringify(this.assistanceSettings));\n    }\n\n    /**\n     * Set assistance settings\n     */\n    setSettings(settings) {\n        this.assistanceSettings = { ...this.assistanceSettings, ...settings };\n        this.updateAssistanceCheckboxes();\n        this.updateAssistanceHighlights();\n        \n        console.log('üîÑ Assistance settings updated:', this.assistanceSettings);\n    }\n\n    /**\n     * Reset all assistance settings\n     */\n    resetSettings() {\n        this.assistanceSettings = {\n            player1: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            },\n            player2: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            }\n        };\n        \n        this.updateAssistanceCheckboxes();\n        this.clearAssistanceHighlights();\n        \n        console.log('üîÑ Assistance settings reset to defaults');\n    }\n}","/**\n * MemoryManager - Comprehensive Memory Management for Connect4\n * \n * ULTRATHINK Refactoring: Prevents memory leaks and ensures proper cleanup\n * of all game resources including WASM instances, event listeners, and DOM references.\n * \n * Features:\n * - Automatic event listener tracking and cleanup\n * - WASM instance lifecycle management\n * - DOM reference cleanup\n * - Memory usage monitoring\n * - Garbage collection optimization\n * - Resource leak detection\n */\n\nexport class MemoryManager {\n    constructor() {\n        // Resource tracking (correct data structures)\n        this.eventListeners = new Set();\n        this.wasmInstances = new Set();\n        this.components = new Map(); // Named components (key-value)\n        this.timers = new Set(); // Combined timeouts/intervals\n        this.domObservers = new Set();\n        \n        // Internal tracking (for implementation)\n        this.timeouts = new Set();\n        this.intervals = new Set();\n        this.componentInstances = new Set(); // For backward compatibility\n        \n        // Test-compatible metrics\n        this.metrics = {\n            eventListenersAdded: 0,\n            eventListenersRemoved: 0,\n            wasmInstancesRegistered: 0,\n            componentsRegistered: 0,\n            timersCreated: 0,\n            memoryOptimizations: 0\n        };\n        \n        // Memory monitoring\n        this.memoryMetrics = {\n            initialUsage: 0,\n            currentUsage: 0,\n            peakUsage: 0,\n            gcCount: 0,\n            leakDetections: []\n        };\n        \n        // Cleanup callbacks\n        this.cleanupCallbacks = new Set();\n        \n        // State\n        this.isDestroyed = false;\n        this.monitoringEnabled = false;\n        \n        // Initialize monitoring\n        this.initializeMonitoring();\n    }\n    \n    /**\n     * Initialize memory monitoring\n     * @private\n     */\n    initializeMonitoring() {\n        if (typeof window !== 'undefined' && window.performance?.memory) {\n            this.memoryMetrics.initialUsage = window.performance.memory.usedJSHeapSize;\n            console.log(`üìä Initial memory usage: ${this.formatBytes(this.memoryMetrics.initialUsage)}`);\n        }\n    }\n    \n    /**\n     * Start memory monitoring with periodic checks\n     */\n    startMonitoring(intervalMs = 30000) {\n        if (this.monitoringEnabled) return;\n        \n        this.monitoringEnabled = true;\n        \n        const monitoringInterval = setInterval(() => {\n            this.updateMemoryMetrics();\n            this.detectLeaks();\n        }, intervalMs);\n        \n        this.trackInterval(monitoringInterval);\n        \n        console.log(`üìä Memory monitoring started (checking every ${intervalMs}ms)`);\n    }\n    \n    /**\n     * Stop memory monitoring\n     */\n    stopMonitoring() {\n        this.monitoringEnabled = false;\n        console.log('üìä Memory monitoring stopped');\n    }\n    \n    /**\n     * Update memory metrics\n     * @private\n     */\n    updateMemoryMetrics() {\n        if (typeof window !== 'undefined' && window.performance?.memory) {\n            const memory = window.performance.memory;\n            this.memoryMetrics.currentUsage = memory.usedJSHeapSize;\n            \n            if (this.memoryMetrics.currentUsage > this.memoryMetrics.peakUsage) {\n                this.memoryMetrics.peakUsage = this.memoryMetrics.currentUsage;\n            }\n        }\n    }\n    \n    /**\n     * Detect potential memory leaks\n     * @private\n     */\n    detectLeaks() {\n        const thresholds = {\n            eventListeners: 100,\n            timeouts: 50,\n            components: 10\n        };\n        \n        const issues = [];\n        \n        if (this.eventListeners.size > thresholds.eventListeners) {\n            issues.push(`Excessive event listeners: ${this.eventListeners.size}`);\n        }\n        \n        if (this.timeouts.size > thresholds.timeouts) {\n            issues.push(`Excessive timeouts: ${this.timeouts.size}`);\n        }\n        \n        if (this.componentInstances.size > thresholds.components) {\n            issues.push(`Excessive components: ${this.componentInstances.size}`);\n        }\n        \n        if (issues.length > 0) {\n            const leak = {\n                timestamp: Date.now(),\n                issues: issues,\n                memoryUsage: this.memoryMetrics.currentUsage\n            };\n            \n            this.memoryMetrics.leakDetections.push(leak);\n            console.warn('üö® Potential memory leaks detected:', issues);\n        }\n    }\n    \n    // ==================== EVENT LISTENER MANAGEMENT ====================\n    \n    /**\n     * Track and add event listener with automatic cleanup\n     */\n    addEventListener(element, event, handler, options = false) {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot add event listener: MemoryManager is destroyed');\n            return;\n        }\n        \n        element.addEventListener(event, handler, options);\n        \n        const listenerInfo = {\n            element,\n            event,\n            handler,\n            options,\n            timestamp: Date.now()\n        };\n        \n        this.eventListeners.add(listenerInfo);\n        this.metrics.eventListenersAdded++;\n        \n        return listenerInfo;\n    }\n    \n    /**\n     * Remove specific event listener\n     * Supports two signatures:\n     * 1. removeEventListener(listenerInfo) - using returned object from addEventListener\n     * 2. removeEventListener(element, event, handler) - direct element/event/handler\n     */\n    removeEventListener(elementOrListenerInfo, event = null, handler = null) {\n        // Handle listenerInfo object (first signature)\n        if (elementOrListenerInfo && typeof elementOrListenerInfo === 'object' && \n            elementOrListenerInfo.element && elementOrListenerInfo.event) {\n            const listenerInfo = elementOrListenerInfo;\n            if (this.eventListeners.has(listenerInfo)) {\n                listenerInfo.element.removeEventListener(\n                    listenerInfo.event, \n                    listenerInfo.handler, \n                    listenerInfo.options\n                );\n                this.eventListeners.delete(listenerInfo);\n                this.metrics.eventListenersRemoved++;\n            }\n            return;\n        }\n        \n        // Handle direct element/event/handler (second signature)\n        if (elementOrListenerInfo && event && handler) {\n            const element = elementOrListenerInfo;\n            \n            // Find matching listener in our set\n            for (const listenerInfo of this.eventListeners) {\n                if (listenerInfo.element === element && \n                    listenerInfo.event === event && \n                    listenerInfo.handler === handler) {\n                    \n                    element.removeEventListener(event, handler, listenerInfo.options);\n                    this.eventListeners.delete(listenerInfo);\n                    this.metrics.eventListenersRemoved++;\n                    break;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Clean up all tracked event listeners\n     * @private\n     */\n    cleanupEventListeners() {\n        console.log(`üßπ Cleaning up ${this.eventListeners.size} event listeners`);\n        \n        for (const listenerInfo of this.eventListeners) {\n            try {\n                listenerInfo.element.removeEventListener(\n                    listenerInfo.event, \n                    listenerInfo.handler, \n                    listenerInfo.options\n                );\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Failed to remove event listener:', error);\n            }\n        }\n        \n        this.eventListeners.clear();\n    }\n    \n    // ==================== WASM INSTANCE MANAGEMENT ====================\n    \n    /**\n     * Register a WASM instance for memory tracking and cleanup\n     */\n    registerWasmInstance(wasmInstance, identifier = 'unnamed') {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot register WASM instance: MemoryManager is destroyed');\n            return;\n        }\n        \n        const wasmInfo = {\n            instance: wasmInstance,\n            identifier,\n            timestamp: Date.now(),\n            memorySize: wasmInstance.memory?.buffer?.byteLength || 0\n        };\n        \n        this.wasmInstances.add(wasmInfo);\n        console.log(`ü¶Ä Registered WASM instance: ${identifier} (${this.formatBytes(wasmInfo.memorySize)})`);\n        \n        return wasmInfo;\n    }\n    \n    /**\n     * Unregister a specific WASM instance\n     */\n    unregisterWasmInstance(wasmInfo) {\n        if (wasmInfo && this.wasmInstances.has(wasmInfo)) {\n            this.wasmInstances.delete(wasmInfo);\n            console.log(`üóëÔ∏è Unregistered WASM instance: ${wasmInfo.identifier}`);\n        }\n    }\n    \n    /**\n     * Get comprehensive WASM memory usage (for tests)\n     */\n    getWasmMemoryUsage() {\n        let totalMemoryBytes = 0;\n        let totalInstances = 0;\n        \n        for (const wasmInfo of this.wasmInstances) {\n            totalInstances++;\n            \n            // Try to get current memory usage if available\n            if (wasmInfo.instance?.exports?.get_memory_usage) {\n                try {\n                    totalMemoryBytes += wasmInfo.instance.exports.get_memory_usage();\n                } catch (error) {\n                    // Fallback to stored memory size\n                    totalMemoryBytes += wasmInfo.memorySize || 0;\n                }\n            } else {\n                totalMemoryBytes += wasmInfo.memorySize || 0;\n            }\n        }\n        \n        return {\n            totalInstances,\n            totalMemoryBytes\n        };\n    }\n    \n    /**\n     * Register a WASM instance for memory tracking and cleanup\n     */\n    registerWasmInstance(wasmInstance, identifier = 'unnamed') {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot register WASM instance: MemoryManager is destroyed');\n            return;\n        }\n        \n        const wasmInfo = {\n            instance: wasmInstance,\n            identifier,\n            timestamp: Date.now(),\n            memorySize: wasmInstance.memory?.buffer?.byteLength || 0\n        };\n        \n        this.wasmInstances.add(wasmInfo);\n        this.metrics.wasmInstancesRegistered++;\n        console.log(`ü¶Ä Registered WASM instance: ${identifier} (${this.formatBytes(wasmInfo.memorySize)})`);\n        \n        return wasmInfo;\n    }\n    \n    /**\n     * Clean up all tracked WASM instances\n     * @private\n     */\n    cleanupWasmInstances() {\n        console.log(`üßπ Cleaning up ${this.wasmInstances.size} WASM instances`);\n        \n        for (const wasmInfo of this.wasmInstances) {\n            try {\n                // Call free method if available\n                if (wasmInfo.instance?.free) {\n                    wasmInfo.instance.free();\n                }\n                // Call exports.cleanup if available\n                if (wasmInfo.instance?.exports?.cleanup) {\n                    wasmInfo.instance.exports.cleanup();\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Failed to destroy WASM instance:', error);\n            }\n        }\n        \n        this.wasmInstances.clear();\n    }\n    \n    // ==================== COMPONENT REGISTRATION ====================\n    \n    /**\n     * Register a component for tracking and cleanup\n     */\n    registerComponent(name, component) {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot register component: MemoryManager is destroyed');\n            return;\n        }\n        \n        this.components.set(name, component);\n        this.metrics.componentsRegistered++;\n        console.log(`üì¶ Registered component: ${name}`);\n        \n        return component;\n    }\n    \n    /**\n     * Unregister a component by name\n     */\n    unregisterComponent(name) {\n        if (this.components.has(name)) {\n            const component = this.components.get(name);\n            this.components.delete(name);\n            console.log(`üóëÔ∏è Unregistered component: ${name}`);\n            return component;\n        }\n    }\n    \n    /**\n     * Clean up all registered components\n     * @private\n     */\n    cleanupComponents() {\n        console.log(`üßπ Cleaning up ${this.components.size} components`);\n        \n        for (const [name, component] of this.components) {\n            try {\n                // Call destroy method if available\n                if (component?.destroy) {\n                    component.destroy();\n                }\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è Failed to cleanup component ${name}:`, error);\n            }\n        }\n        \n        this.components.clear();\n    }\n    \n    // ==================== TIMEOUT/INTERVAL MANAGEMENT ====================\n    \n    /**\n     * Track setTimeout with automatic cleanup\n     */\n    setTimeout(callback, delay, ...args) {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot set timeout: MemoryManager is destroyed');\n            return null;\n        }\n        \n        const timeoutId = setTimeout(() => {\n            this.timeouts.delete(timeoutId);\n            callback(...args);\n        }, delay);\n        \n        this.timeouts.add(timeoutId);\n        return timeoutId;\n    }\n    \n    /**\n     * Track setInterval with automatic cleanup\n     */\n    setInterval(callback, interval, ...args) {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot set interval: MemoryManager is destroyed');\n            return null;\n        }\n        \n        const intervalId = setInterval(callback, interval, ...args);\n        this.intervals.add(intervalId);\n        return intervalId;\n    }\n    \n    /**\n     * Track interval (for external intervals)\n     */\n    trackInterval(intervalId) {\n        this.intervals.add(intervalId);\n    }\n    \n    /**\n     * Clear specific timeout\n     */\n    clearTimeout(timeoutId) {\n        clearTimeout(timeoutId);\n        this.timeouts.delete(timeoutId);\n    }\n    \n    /**\n     * Clear specific interval\n     */\n    clearInterval(intervalId) {\n        clearInterval(intervalId);\n        this.intervals.delete(intervalId);\n    }\n    \n    /**\n     * Clean up all timeouts and intervals\n     * @private\n     */\n    cleanupTimeouts() {\n        console.log(`üßπ Cleaning up ${this.timeouts.size} timeouts and ${this.intervals.size} intervals`);\n        \n        for (const timeoutId of this.timeouts) {\n            clearTimeout(timeoutId);\n        }\n        this.timeouts.clear();\n        \n        for (const intervalId of this.intervals) {\n            clearInterval(intervalId);\n        }\n        this.intervals.clear();\n    }\n    \n    // ==================== DOM OBSERVER MANAGEMENT ====================\n    \n    /**\n     * Track DOM observer with automatic cleanup\n     */\n    trackObserver(observer) {\n        this.domObservers.add(observer);\n        return observer;\n    }\n    \n    /**\n     * Create and track MutationObserver\n     */\n    createMutationObserver(callback, target, options) {\n        const observer = new MutationObserver(callback);\n        observer.observe(target, options);\n        this.trackObserver(observer);\n        return observer;\n    }\n    \n    /**\n     * Create and track ResizeObserver\n     */\n    createResizeObserver(callback, target) {\n        if (typeof ResizeObserver === 'undefined') {\n            console.warn('‚ö†Ô∏è ResizeObserver not supported');\n            return null;\n        }\n        \n        const observer = new ResizeObserver(callback);\n        observer.observe(target);\n        this.trackObserver(observer);\n        return observer;\n    }\n    \n    /**\n     * Clean up all DOM observers\n     * @private\n     */\n    cleanupObservers() {\n        console.log(`üßπ Cleaning up ${this.domObservers.size} DOM observers`);\n        \n        for (const observer of this.domObservers) {\n            try {\n                observer.disconnect();\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Failed to disconnect observer:', error);\n            }\n        }\n        \n        this.domObservers.clear();\n    }\n    \n    // ==================== WASM INSTANCE MANAGEMENT ====================\n    \n    /**\n     * Track WASM instance for cleanup\n     */\n    trackWasmInstance(instance, destroyMethod = 'free', identifier = 'unnamed') {\n        const wasmInfo = {\n            instance,\n            destroyMethod,\n            identifier,\n            timestamp: Date.now(),\n            memorySize: instance.memory?.buffer?.byteLength || 0\n        };\n        \n        this.wasmInstances.add(wasmInfo);\n        console.log(`üì¶ WASM instance tracked for cleanup: ${identifier} (${this.formatBytes(wasmInfo.memorySize)})`);\n        \n        return wasmInfo;\n    }\n    \n    /**\n     * Clean up all WASM instances\n     * @private\n     */\n    cleanupWasmInstances() {\n        console.log(`üßπ Cleaning up ${this.wasmInstances.size} WASM instances`);\n        \n        for (const wasmInfo of this.wasmInstances) {\n            try {\n                if (wasmInfo.instance && typeof wasmInfo.instance[wasmInfo.destroyMethod] === 'function') {\n                    wasmInfo.instance[wasmInfo.destroyMethod]();\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Failed to destroy WASM instance:', error);\n            }\n        }\n        \n        this.wasmInstances.clear();\n    }\n    \n    // ==================== COMPONENT MANAGEMENT ====================\n    \n    /**\n     * Track component instance for cleanup\n     */\n    trackComponent(component, destroyMethod = 'destroy', identifier = null) {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è Cannot track component: MemoryManager is destroyed');\n            return;\n        }\n        \n        const componentInfo = {\n            component,\n            destroyMethod,\n            name: component.constructor.name,\n            identifier: identifier || component.constructor.name,\n            timestamp: Date.now()\n        };\n        \n        this.componentInstances.add(componentInfo);\n        console.log(`üß© Component tracked: ${componentInfo.identifier}`);\n        \n        return componentInfo;\n    }\n    \n    /**\n     * Untrack component\n     */\n    untrackComponent(componentInfo) {\n        this.componentInstances.delete(componentInfo);\n    }\n    \n    /**\n     * Clean up all tracked components\n     * @private\n     */\n    cleanupComponents() {\n        console.log(`üßπ Cleaning up ${this.componentInstances.size} components`);\n        \n        for (const componentInfo of this.componentInstances) {\n            try {\n                if (componentInfo.component && typeof componentInfo.component[componentInfo.destroyMethod] === 'function') {\n                    componentInfo.component[componentInfo.destroyMethod]();\n                }\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è Failed to destroy component ${componentInfo.name}:`, error);\n            }\n        }\n        \n        this.componentInstances.clear();\n    }\n    \n    // ==================== CLEANUP CALLBACKS ====================\n    \n    /**\n     * Add custom cleanup callback\n     */\n    addCleanupCallback(callback, description = 'custom cleanup') {\n        const callbackInfo = {\n            callback,\n            description,\n            timestamp: Date.now()\n        };\n        \n        this.cleanupCallbacks.add(callbackInfo);\n        console.log(`üîß Cleanup callback added: ${description}`);\n        \n        return callbackInfo;\n    }\n    \n    /**\n     * Remove cleanup callback\n     */\n    removeCleanupCallback(callbackInfo) {\n        this.cleanupCallbacks.delete(callbackInfo);\n    }\n    \n    /**\n     * Execute all cleanup callbacks\n     * @private\n     */\n    executeCleanupCallbacks() {\n        console.log(`üßπ Executing ${this.cleanupCallbacks.size} cleanup callbacks`);\n        \n        for (const callbackInfo of this.cleanupCallbacks) {\n            try {\n                callbackInfo.callback();\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è Cleanup callback failed (${callbackInfo.description}):`, error);\n            }\n        }\n        \n        this.cleanupCallbacks.clear();\n    }\n    \n    // ==================== GARBAGE COLLECTION ====================\n    \n    /**\n     * Force garbage collection (if available)\n     */\n    forceGarbageCollection() {\n        if (typeof window !== 'undefined' && window.gc) {\n            window.gc();\n            this.memoryMetrics.gcCount++;\n            console.log('üóëÔ∏è Forced garbage collection');\n        } else {\n            console.log('üóëÔ∏è Garbage collection not available (try --expose-gc flag)');\n        }\n    }\n    \n    /**\n     * Optimize memory by cleaning up and forcing GC\n     */\n    optimizeMemory() {\n        console.log('‚ö° Optimizing memory usage...');\n        \n        const beforeUsage = this.getMemoryUsage();\n        \n        // Clean up resources\n        this.partialCleanup();\n        \n        // Force GC if available\n        this.forceGarbageCollection();\n        \n        const afterUsage = this.getMemoryUsage();\n        const saved = beforeUsage - afterUsage;\n        \n        if (saved > 0) {\n            console.log(`‚úÖ Memory optimized: ${this.formatBytes(saved)} freed`);\n        }\n        \n        return saved;\n    }\n    \n    /**\n     * Partial cleanup without destroying the manager\n     */\n    partialCleanup() {\n        // Clean up completed timeouts\n        const completedTimeouts = Array.from(this.timeouts).filter(id => {\n            // Timeouts that have completed are no longer valid\n            return false; // We can't reliably detect completed timeouts\n        });\n        \n        // Clean up dead component references\n        const deadComponents = Array.from(this.componentInstances).filter(info => {\n            return !info.component || info.component.isDestroyed;\n        });\n        \n        deadComponents.forEach(info => this.componentInstances.delete(info));\n        \n        console.log('üßπ Partial cleanup completed');\n    }\n    \n    // ==================== MONITORING & REPORTING ====================\n    \n    /**\n     * Get current memory usage\n     */\n    getMemoryUsage() {\n        if (typeof window !== 'undefined' && window.performance?.memory) {\n            return window.performance.memory.usedJSHeapSize;\n        }\n        return 0;\n    }\n    \n    /**\n     * Get comprehensive memory report\n     */\n    getMemoryReport() {\n        this.updateMemoryMetrics();\n        \n        const report = {\n            timestamp: Date.now(),\n            memory: {\n                initial: this.memoryMetrics.initialUsage,\n                current: this.memoryMetrics.currentUsage,\n                peak: this.memoryMetrics.peakUsage,\n                increase: this.memoryMetrics.currentUsage - this.memoryMetrics.initialUsage\n            },\n            resources: {\n                eventListeners: this.eventListeners.size,\n                timeouts: this.timeouts.size,\n                intervals: this.intervals.size,\n                observers: this.domObservers.size,\n                wasmInstances: this.wasmInstances.size,\n                components: this.componentInstances.size,\n                cleanupCallbacks: this.cleanupCallbacks.size\n            },\n            gcCount: this.memoryMetrics.gcCount,\n            leakDetections: this.memoryMetrics.leakDetections.length,\n            isDestroyed: this.isDestroyed\n        };\n        \n        return report;\n    }\n    \n    /**\n     * Log memory report to console\n     */\n    logMemoryReport() {\n        const report = this.getMemoryReport();\n        \n        console.log('üìä Memory Manager Report:');\n        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');\n        console.log(`üß† Memory Usage:`);\n        console.log(`   Initial: ${this.formatBytes(report.memory.initial)}`);\n        console.log(`   Current: ${this.formatBytes(report.memory.current)}`);\n        console.log(`   Peak: ${this.formatBytes(report.memory.peak)}`);\n        console.log(`   Increase: ${this.formatBytes(report.memory.increase)}`);\n        console.log(`üìä Tracked Resources:`);\n        console.log(`   Event Listeners: ${report.resources.eventListeners}`);\n        console.log(`   Timeouts: ${report.resources.timeouts}`);\n        console.log(`   Intervals: ${report.resources.intervals}`);\n        console.log(`   DOM Observers: ${report.resources.observers}`);\n        console.log(`   WASM Instances: ${report.resources.wasmInstances}`);\n        console.log(`   Components: ${report.resources.components}`);\n        console.log(`   Cleanup Callbacks: ${report.resources.cleanupCallbacks}`);\n        console.log(`üóëÔ∏è GC Count: ${report.gcCount}`);\n        console.log(`üö® Leak Detections: ${report.leakDetections}`);\n        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');\n    }\n    \n    /**\n     * Format bytes for human-readable display\n     * @private\n     */\n    formatBytes(bytes) {\n        if (bytes === 0) return '0 B';\n        \n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        \n        return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n    }\n    \n    // ==================== DESTRUCTION ====================\n    \n    /**\n     * Destroy memory manager and clean up all tracked resources\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            console.warn('‚ö†Ô∏è MemoryManager already destroyed');\n            return;\n        }\n        \n        console.log('üóëÔ∏è Destroying MemoryManager and cleaning up all resources...');\n        \n        const startTime = performance.now();\n        \n        try {\n            // Stop monitoring\n            this.stopMonitoring();\n            \n            // Execute cleanup callbacks first\n            this.executeCleanupCallbacks();\n            \n            // Clean up all tracked resources\n            this.cleanupComponents();\n            this.cleanupWasmInstances();\n            this.cleanupEventListeners();\n            this.cleanupTimeouts();\n            this.cleanupObservers();\n            \n            // Force garbage collection\n            this.forceGarbageCollection();\n            \n            // Mark as destroyed\n            this.isDestroyed = true;\n            \n            const cleanupTime = performance.now() - startTime;\n            console.log(`‚úÖ MemoryManager destroyed successfully in ${cleanupTime.toFixed(2)}ms`);\n            \n        } catch (error) {\n            console.error('‚ùå Error during MemoryManager destruction:', error);\n        }\n    }\n    \n    // ==================== TEST API METHODS ====================\n    \n    /**\n     * Get total count of tracked resources (for tests)\n     */\n    getTrackedResourceCount() {\n        return this.eventListeners.size + \n               this.wasmInstances.size + \n               this.components.size + \n               this.timers.size;\n    }\n    \n    /**\n     * Check if there are potential memory leaks (for tests)\n     */\n    hasLeaks() {\n        return this.memoryMetrics.leakDetections.length > 0;\n    }\n    \n    /**\n     * Unregister specific WASM instance (for tests)\n     */\n    unregisterWasmInstance(wasmInfo) {\n        if (wasmInfo && this.wasmInstances.has(wasmInfo)) {\n            // Call cleanup method if available\n            try {\n                if (wasmInfo.instance?.free) {\n                    wasmInfo.instance.free();\n                }\n                if (wasmInfo.instance?.exports?.cleanup) {\n                    wasmInfo.instance.exports.cleanup();\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Failed to cleanup WASM instance during unregister:', error);\n            }\n            \n            this.wasmInstances.delete(wasmInfo);\n            console.log(`üóëÔ∏è Unregistered WASM instance: ${wasmInfo.identifier}`);\n        }\n    }\n}","/**\n * OptimizedElementBinder - Clean ElementBinder for Refactored Connect4\n * \n * ULTRATHINK Refactoring: Removes test compatibility patches and focuses on\n * production performance and reliability.\n * \n * Key improvements over generic ElementBinder:\n * - Connect4-specific element validation\n * - Performance optimized DOM queries\n * - Memory efficient element caching\n * - No test compatibility overhead\n * - Enhanced error recovery\n */\n\nexport class OptimizedElementBinder {\n    constructor(config = {}) {\n        this.config = {\n            required: config.required || [],\n            optional: config.optional || [],\n            validateStructure: config.validateStructure !== false,\n            enableRecovery: config.enableRecovery !== false,\n            cacheSelectors: config.cacheSelectors !== false\n        };\n        \n        // Element storage\n        this.boundElements = new Map();\n        this.elementCache = new Map();\n        this.missingElements = new Set();\n        \n        // Performance tracking\n        this.bindingMetrics = {\n            startTime: null,\n            endTime: null,\n            elementCount: 0,\n            cacheHits: 0,\n            recoveredElements: 0\n        };\n        \n        // Recovery strategies\n        this.recoveryStrategies = this.initializeRecoveryStrategies();\n    }\n\n    /**\n     * Initialize element recovery strategies\n     * @private\n     */\n    initializeRecoveryStrategies() {\n        return {\n            // Try common Connect4 element naming patterns\n            'gameBoard': ['game-board', 'board', 'connect4-board'],\n            'topCoords': ['top-coords', 'column-labels-top', 'coords-top'],\n            'bottomCoords': ['bottom-coords', 'column-labels-bottom', 'coords-bottom'],\n            'currentPlayerIndicator': ['current-player', 'player-indicator', 'active-player'],\n            'gameStatus': ['game-status', 'status', 'game-state'],\n            'yellowScore': ['yellow-score', 'player1-score', 'score-yellow'],\n            'redScore': ['red-score', 'player2-score', 'score-red'],\n            'moveCounter': ['move-counter', 'move-count', 'moves'],\n            'newGameBtn': ['new-game', 'restart-game', 'reset-game'],\n            'undoBtn': ['undo', 'undo-move', 'back'],\n            'resetScoreBtn': ['reset-score', 'clear-score', 'reset-scores'],\n            'helpBtn': ['help', 'show-help', 'help-button'],\n            'assistanceBtn': ['assistance', 'hints', 'help-assistance']\n        };\n    }\n\n    /**\n     * Bind all configured DOM elements with performance monitoring\n     * @returns {Object} Object containing all bound elements\n     */\n    async bindElements() {\n        this.bindingMetrics.startTime = performance.now();\n        \n        try {\n            console.log('üìé Starting optimized element binding...');\n            \n            // Clear previous bindings\n            this.resetBindings();\n            \n            // Bind required elements with recovery\n            await this.bindRequiredElements();\n            \n            // Bind optional elements\n            await this.bindOptionalElements();\n            \n            // Validate Connect4-specific structure\n            if (this.config.validateStructure) {\n                this.validateConnect4Structure();\n            }\n            \n            // Finalize binding process\n            this.finalizeBinding();\n            \n            return this.getElementsObject();\n            \n        } catch (error) {\n            console.error('‚ùå Element binding failed:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Reset all binding state\n     * @private\n     */\n    resetBindings() {\n        this.boundElements.clear();\n        this.missingElements.clear();\n        this.bindingMetrics.elementCount = 0;\n        this.bindingMetrics.cacheHits = 0;\n        this.bindingMetrics.recoveredElements = 0;\n    }\n\n    /**\n     * Bind required elements with recovery strategies\n     * @private\n     */\n    async bindRequiredElements() {\n        console.log(`üìé Binding ${this.config.required.length} required elements...`);\n        \n        for (const elementId of this.config.required) {\n            const element = await this.bindElementWithRecovery(elementId, true);\n            \n            if (!element) {\n                this.missingElements.add(elementId);\n                console.error(`‚ùå Required element missing: ${elementId}`);\n            }\n        }\n        \n        // Check for critical failures\n        if (this.missingElements.size > 0) {\n            const critical = Array.from(this.missingElements).filter(id => \n                ['gameBoard', 'newGameBtn'].includes(id)\n            );\n            \n            if (critical.length > 0) {\n                throw new Error(`Critical elements missing: ${critical.join(', ')}`);\n            }\n        }\n    }\n\n    /**\n     * Bind optional elements\n     * @private\n     */\n    async bindOptionalElements() {\n        console.log(`üìé Binding ${this.config.optional.length} optional elements...`);\n        \n        for (const elementId of this.config.optional) {\n            await this.bindElementWithRecovery(elementId, false);\n        }\n    }\n\n    /**\n     * Bind element with automatic recovery strategies\n     * @private\n     */\n    async bindElementWithRecovery(elementId, isRequired = false) {\n        this.bindingMetrics.elementCount++;\n        \n        // Try direct binding first\n        let element = this.findElement(elementId);\n        \n        // Try recovery strategies if direct binding failed\n        if (!element && this.config.enableRecovery) {\n            element = this.tryRecoveryStrategies(elementId);\n            \n            if (element) {\n                this.bindingMetrics.recoveredElements++;\n                console.log(`üîß Recovered element '${elementId}' using fallback strategy`);\n            }\n        }\n        \n        // Store result\n        if (element) {\n            this.boundElements.set(elementId, element);\n            console.debug(`üìé Bound element: ${elementId}`);\n        } else {\n            this.boundElements.set(elementId, null);\n            \n            if (isRequired) {\n                console.error(`‚ùå Required element missing: ${elementId}`);\n            } else {\n                console.debug(`‚ö†Ô∏è Optional element missing: ${elementId}`);\n            }\n        }\n        \n        return element;\n    }\n\n    /**\n     * Find element by ID with caching\n     * @private\n     */\n    findElement(elementId) {\n        // Check cache first\n        if (this.config.cacheSelectors && this.elementCache.has(elementId)) {\n            this.bindingMetrics.cacheHits++;\n            return this.elementCache.get(elementId);\n        }\n        \n        // Query DOM\n        const element = document.getElementById(elementId);\n        \n        // Cache result\n        if (this.config.cacheSelectors) {\n            this.elementCache.set(elementId, element);\n        }\n        \n        return element;\n    }\n\n    /**\n     * Try recovery strategies for missing elements\n     * @private\n     */\n    tryRecoveryStrategies(elementId) {\n        const strategies = this.recoveryStrategies[elementId];\n        if (!strategies) return null;\n        \n        for (const fallbackId of strategies) {\n            const element = document.getElementById(fallbackId);\n            if (element) {\n                console.log(`üîß Found '${elementId}' using fallback: '${fallbackId}'`);\n                return element;\n            }\n        }\n        \n        // Try class-based selectors as last resort\n        return this.tryClassBasedRecovery(elementId);\n    }\n\n    /**\n     * Try class-based recovery for common patterns\n     * @private\n     */\n    tryClassBasedRecovery(elementId) {\n        const classPatterns = {\n            'gameBoard': ['.game-board', '.board', '.connect4-board'],\n            'newGameBtn': ['.new-game', '.restart-btn', '.reset-btn'],\n            'undoBtn': ['.undo', '.undo-btn'],\n            'helpBtn': ['.help', '.help-btn'],\n            'assistanceBtn': ['.assistance', '.hints-btn']\n        };\n        \n        const patterns = classPatterns[elementId];\n        if (!patterns) return null;\n        \n        for (const pattern of patterns) {\n            const element = document.querySelector(pattern);\n            if (element) {\n                console.log(`üîß Found '${elementId}' using class selector: '${pattern}'`);\n                return element;\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Validate Connect4-specific DOM structure\n     * @private\n     */\n    validateConnect4Structure() {\n        console.log('üîç Validating Connect4 DOM structure...');\n        \n        const validations = [\n            this.validateGameBoard(),\n            this.validateCoordinateStructure(),\n            this.validateUIControls(),\n            this.validateModalStructure()\n        ];\n        \n        const failures = validations.filter(result => !result.valid);\n        \n        if (failures.length > 0) {\n            console.warn('‚ö†Ô∏è DOM structure validation warnings:');\n            failures.forEach(failure => {\n                console.warn(`  - ${failure.message}`);\n            });\n        } else {\n            console.log('‚úÖ DOM structure validation passed');\n        }\n    }\n\n    /**\n     * Validate game board structure\n     * @private\n     */\n    validateGameBoard() {\n        const gameBoard = this.boundElements.get('gameBoard');\n        \n        if (!gameBoard) {\n            return { valid: false, message: 'Game board element missing' };\n        }\n        \n        // Check if board has proper structure for Connect4\n        const cells = gameBoard.querySelectorAll('.game-slot, .cell');\n        const expectedCells = 42; // 6x7 Connect4 board\n        \n        if (cells.length > 0 && cells.length !== expectedCells) {\n            return { \n                valid: false, \n                message: `Expected ${expectedCells} board cells, found ${cells.length}` \n            };\n        }\n        \n        return { valid: true };\n    }\n\n    /**\n     * Validate coordinate structure\n     * @private\n     */\n    validateCoordinateStructure() {\n        const topCoords = this.boundElements.get('topCoords');\n        const bottomCoords = this.boundElements.get('bottomCoords');\n        \n        if (!topCoords && !bottomCoords) {\n            return { valid: false, message: 'No coordinate elements found' };\n        }\n        \n        // Check coordinate count (should be 7 for Connect4)\n        if (topCoords) {\n            const coords = topCoords.querySelectorAll('.coord');\n            if (coords.length > 0 && coords.length !== 7) {\n                return { \n                    valid: false, \n                    message: `Expected 7 top coordinates, found ${coords.length}` \n                };\n            }\n        }\n        \n        return { valid: true };\n    }\n\n    /**\n     * Validate UI controls\n     * @private\n     */\n    validateUIControls() {\n        const requiredControls = ['newGameBtn'];\n        const missingControls = requiredControls.filter(control => \n            !this.boundElements.get(control)\n        );\n        \n        if (missingControls.length > 0) {\n            return { \n                valid: false, \n                message: `Missing essential controls: ${missingControls.join(', ')}` \n            };\n        }\n        \n        return { valid: true };\n    }\n\n    /**\n     * Validate modal structure\n     * @private\n     */\n    validateModalStructure() {\n        const modals = ['helpModal', 'assistanceModal'];\n        const foundModals = modals.filter(modal => this.boundElements.get(modal));\n        \n        if (foundModals.length === 0) {\n            return { \n                valid: false, \n                message: 'No modal elements found - help system may not work' \n            };\n        }\n        \n        return { valid: true };\n    }\n\n    /**\n     * Finalize binding process and report results\n     * @private\n     */\n    finalizeBinding() {\n        this.bindingMetrics.endTime = performance.now();\n        const bindingTime = this.bindingMetrics.endTime - this.bindingMetrics.startTime;\n        \n        const boundCount = Array.from(this.boundElements.values()).filter(el => el !== null).length;\n        const totalCount = this.bindingMetrics.elementCount;\n        \n        console.log('üìä Element Binding Results:');\n        console.log(`   ‚úÖ Bound: ${boundCount}/${totalCount} elements`);\n        console.log(`   üîß Recovered: ${this.bindingMetrics.recoveredElements} elements`);\n        console.log(`   ‚ö° Cache hits: ${this.bindingMetrics.cacheHits}`);\n        console.log(`   ‚è±Ô∏è Binding time: ${bindingTime.toFixed(2)}ms`);\n        \n        if (this.missingElements.size > 0) {\n            console.log(`   ‚ùå Missing: ${Array.from(this.missingElements).join(', ')}`);\n        }\n    }\n\n    /**\n     * Get bound elements as plain object for compatibility\n     */\n    getElementsObject() {\n        const elements = {};\n        for (const [key, value] of this.boundElements) {\n            elements[key] = value;\n        }\n        return elements;\n    }\n\n    /**\n     * Get specific element by ID\n     */\n    getElement(elementId) {\n        return this.boundElements.get(elementId) || null;\n    }\n\n    /**\n     * Check if element exists and is bound\n     */\n    hasElement(elementId) {\n        return this.boundElements.has(elementId) && this.boundElements.get(elementId) !== null;\n    }\n\n    /**\n     * Get all bound elements (non-null only)\n     */\n    getBoundElements() {\n        const bound = {};\n        for (const [key, value] of this.boundElements) {\n            if (value !== null) {\n                bound[key] = value;\n            }\n        }\n        return bound;\n    }\n\n    /**\n     * Get binding performance metrics\n     */\n    getMetrics() {\n        return { ...this.bindingMetrics };\n    }\n\n    /**\n     * Rebind specific element (for dynamic DOM changes)\n     */\n    async rebindElement(elementId) {\n        console.log(`üîÑ Rebinding element: ${elementId}`);\n        \n        // Clear cache\n        if (this.config.cacheSelectors) {\n            this.elementCache.delete(elementId);\n        }\n        \n        // Rebind element\n        const wasRequired = this.config.required.includes(elementId);\n        const element = await this.bindElementWithRecovery(elementId, wasRequired);\n        \n        return element;\n    }\n\n    /**\n     * Add dynamic element to binding configuration\n     */\n    addElement(elementId, isRequired = false) {\n        if (isRequired) {\n            if (!this.config.required.includes(elementId)) {\n                this.config.required.push(elementId);\n            }\n        } else {\n            if (!this.config.optional.includes(elementId)) {\n                this.config.optional.push(elementId);\n            }\n        }\n        \n        // Bind immediately\n        return this.bindElementWithRecovery(elementId, isRequired);\n    }\n\n    /**\n     * Clear element cache\n     */\n    clearCache() {\n        this.elementCache.clear();\n        this.bindingMetrics.cacheHits = 0;\n        console.log('üßπ Element cache cleared');\n    }\n\n    /**\n     * Destroy binder and cleanup\n     */\n    destroy() {\n        this.boundElements.clear();\n        this.elementCache.clear();\n        this.missingElements.clear();\n        \n        // Reset metrics\n        this.bindingMetrics = {\n            startTime: null,\n            endTime: null,\n            elementCount: 0,\n            cacheHits: 0,\n            recoveredElements: 0\n        };\n        \n        console.log('üóëÔ∏è OptimizedElementBinder destroyed');\n    }\n}","/**\n * GomokuAnimationManager - Gomoku Animation & Visual Effects\n * \n * Adapted from Connect4 AnimationManager for Gomoku gameplay.\n * Handles all visual animations and celebratory effects.\n * \n * Features:\n * - Stone placement animations\n * - Winning line animations\n * - Confetti and celebration effects\n * - Smooth transitions and visual feedback\n */\n\nexport class GomokuAnimationManager {\n    constructor(boardRenderer) {\n        this.boardRenderer = boardRenderer;\n        \n        // Animation configuration\n        this.animationDuration = 300;\n        this.particleCount = 150;\n        this.confettiDuration = 4000;\n        \n        // Active animations for cleanup\n        this.activeAnimations = new Set();\n        this.activeTimeouts = new Set();\n        \n        // Particle engine state\n        this.particleEngine = null;\n        this.isAnimating = false;\n    }\n\n    /**\n     * Animate stone placement at position\n     */\n    animateStonePlace(row, col, player) {\n        const intersection = this.boardRenderer.getIntersectionAt(row, col);\n        if (!intersection) return;\n\n        const stone = intersection.querySelector('.stone');\n        if (!stone) return;\n\n        // Add placement animation class\n        stone.classList.add('placing');\n        \n        // Remove animation class after completion\n        const timeout = setTimeout(() => {\n            stone.classList.remove('placing');\n            this.activeTimeouts.delete(timeout);\n        }, this.animationDuration);\n        \n        this.activeTimeouts.add(timeout);\n        \n        // Add ripple effect for special moves (center or key positions)\n        if (this._isSpecialPosition(row, col)) {\n            stone.classList.add('placing-special');\n            \n            const specialTimeout = setTimeout(() => {\n                stone.classList.remove('placing-special');\n                this.activeTimeouts.delete(specialTimeout);\n            }, this.animationDuration + 200);\n            \n            this.activeTimeouts.add(specialTimeout);\n        }\n\n        console.log(`üé¨ Animated stone placement at (${row}, ${col}) for player ${player}`);\n    }\n\n    /**\n     * Show winning animation\n     */\n    showWinningAnimation(winner) {\n        console.log(`üèÜ Showing winning animation for player ${winner}`);\n        \n        // Get winning line if available\n        if (this.game && this.game.getWinningLine) {\n            const winningLine = this.game.getWinningLine();\n            if (winningLine && winningLine.length > 0) {\n                this.highlightWinningLine(winningLine);\n            }\n        }\n        \n        // Start confetti celebration\n        this.startConfettiCelebration(winner);\n        \n        // Show victory message animation\n        this.showVictoryMessage(winner);\n    }\n\n    /**\n     * Highlight winning line with animation\n     */\n    highlightWinningLine(positions) {\n        if (!Array.isArray(positions)) return;\n\n        console.log(`üéØ Highlighting winning line with ${positions.length} positions`);\n\n        // Animate each position in sequence\n        positions.forEach((position, index) => {\n            const timeout = setTimeout(() => {\n                let row, col;\n                \n                if (Array.isArray(position)) {\n                    [row, col] = position;\n                } else {\n                    row = position.row;\n                    col = position.col;\n                }\n                \n                const intersection = this.boardRenderer.getIntersectionAt(row, col);\n                if (intersection) {\n                    intersection.classList.add('winning-stone');\n                    this.boardRenderer.highlightWinningLine(positions);\n                }\n                \n                this.activeTimeouts.delete(timeout);\n            }, index * 100); // Stagger animation\n            \n            this.activeTimeouts.add(timeout);\n        });\n    }\n\n    /**\n     * Start confetti celebration\n     */\n    startConfettiCelebration(winner) {\n        // Create confetti colors based on winner\n        const colors = winner === 1 \n            ? ['#2C3E50', '#34495E', '#5D6D7E', '#85929E'] // Black/gray theme\n            : ['#F8F9FA', '#E9ECEF', '#DEE2E6', '#CED4DA']; // White/light theme\n        \n        this.isAnimating = true;\n        \n        // Get board center for confetti origin\n        const boardRect = this.boardRenderer.gameBoard.getBoundingClientRect();\n        const centerX = boardRect.left + boardRect.width / 2;\n        const centerY = boardRect.top + boardRect.height / 2;\n        \n        // Create confetti burst\n        this.createConfettiBurst(centerX, centerY, colors);\n        \n        // Stop confetti after duration\n        const stopTimeout = setTimeout(() => {\n            this.stopConfettiCelebration();\n            this.activeTimeouts.delete(stopTimeout);\n        }, this.confettiDuration);\n        \n        this.activeTimeouts.add(stopTimeout);\n        \n        console.log(`üéä Started confetti celebration for player ${winner}`);\n    }\n\n    /**\n     * Create confetti burst at position\n     */\n    createConfettiBurst(centerX, centerY, colors) {\n        for (let i = 0; i < this.particleCount; i++) {\n            const timeout = setTimeout(() => {\n                this.createConfettiParticle(centerX, centerY, colors);\n                this.activeTimeouts.delete(timeout);\n            }, Math.random() * 1000);\n            \n            this.activeTimeouts.add(timeout);\n        }\n    }\n\n    /**\n     * Create single confetti particle\n     */\n    createConfettiParticle(centerX, centerY, colors) {\n        const particle = document.createElement('div');\n        particle.className = 'confetti-particle';\n        \n        // Random color from theme\n        const color = colors[Math.floor(Math.random() * colors.length)];\n        \n        // Random size and shape\n        const size = Math.random() * 8 + 4;\n        \n        Object.assign(particle.style, {\n            position: 'fixed',\n            width: `${size}px`,\n            height: `${size}px`,\n            background: color,\n            left: `${centerX + (Math.random() - 0.5) * 100}px`,\n            top: `${centerY + (Math.random() - 0.5) * 50}px`,\n            zIndex: '1000',\n            pointerEvents: 'none',\n            borderRadius: Math.random() > 0.5 ? '50%' : '0',\n            animation: 'confetti-fall 3s linear forwards'\n        });\n        \n        document.body.appendChild(particle);\n        \n        // Remove particle after animation\n        const removeTimeout = setTimeout(() => {\n            if (particle.parentNode) {\n                particle.parentNode.removeChild(particle);\n            }\n            this.activeTimeouts.delete(removeTimeout);\n        }, 3000);\n        \n        this.activeTimeouts.add(removeTimeout);\n    }\n\n    /**\n     * Stop confetti celebration\n     */\n    stopConfettiCelebration() {\n        this.isAnimating = false;\n        \n        // Remove all remaining confetti particles\n        const particles = document.querySelectorAll('.confetti-particle');\n        particles.forEach(particle => {\n            if (particle.parentNode) {\n                particle.parentNode.removeChild(particle);\n            }\n        });\n        \n        console.log('üõë Stopped confetti celebration');\n    }\n\n    /**\n     * Show victory message animation\n     */\n    showVictoryMessage(winner) {\n        const playerName = winner === 1 ? 'Schwarz' : 'Wei√ü';\n        \n        // Create victory overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'victory-overlay';\n        overlay.innerHTML = `\n            <div class=\"victory-content\">\n                <h2>üèÜ ${playerName} gewinnt!</h2>\n                <p>Herzlichen Gl√ºckwunsch!</p>\n            </div>\n        `;\n        \n        Object.assign(overlay.style, {\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            width: '100%',\n            height: '100%',\n            background: 'rgba(0, 0, 0, 0.8)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: '999',\n            animation: 'game-over-overlay 0.5s cubic-bezier(0.34, 1.56, 0.64, 1)'\n        });\n        \n        // Style victory content\n        const content = overlay.querySelector('.victory-content');\n        Object.assign(content.style, {\n            background: 'white',\n            padding: '2rem',\n            borderRadius: '16px',\n            textAlign: 'center',\n            color: '#333',\n            boxShadow: '0 16px 64px rgba(0, 0, 0, 0.3)'\n        });\n        \n        document.body.appendChild(overlay);\n        \n        // Remove overlay after 3 seconds\n        const removeTimeout = setTimeout(() => {\n            if (overlay.parentNode) {\n                overlay.parentNode.removeChild(overlay);\n            }\n            this.activeTimeouts.delete(removeTimeout);\n        }, 3000);\n        \n        this.activeTimeouts.add(removeTimeout);\n        \n        console.log(`üèÜ Showed victory message for ${playerName}`);\n    }\n\n    /**\n     * Animate threat warning\n     */\n    animateThreatWarning(positions) {\n        if (!Array.isArray(positions)) return;\n\n        positions.forEach(position => {\n            let row, col;\n            \n            if (Array.isArray(position)) {\n                [row, col] = position;\n            } else {\n                row = position.row;\n                col = position.col;\n            }\n            \n            const intersection = this.boardRenderer.getIntersectionAt(row, col);\n            if (intersection) {\n                intersection.classList.add('threat-highlight');\n                \n                // Remove highlight after animation\n                const timeout = setTimeout(() => {\n                    intersection.classList.remove('threat-highlight');\n                    this.activeTimeouts.delete(timeout);\n                }, 2000);\n                \n                this.activeTimeouts.add(timeout);\n            }\n        });\n        \n        console.log(`‚ö†Ô∏è Animated threat warning for ${positions.length} positions`);\n    }\n\n    /**\n     * Animate board entrance\n     */\n    animateBoardEntrance() {\n        if (!this.boardRenderer.gameBoard) return;\n        \n        this.boardRenderer.gameBoard.classList.add('board-entrance');\n        \n        const timeout = setTimeout(() => {\n            this.boardRenderer.gameBoard.classList.remove('board-entrance');\n            this.activeTimeouts.delete(timeout);\n        }, 800);\n        \n        this.activeTimeouts.add(timeout);\n        \n        console.log('üé¨ Animated board entrance');\n    }\n\n    /**\n     * Clear all effects and animations\n     */\n    clearAllEffects() {\n        // Stop confetti\n        this.stopConfettiCelebration();\n        \n        // Clear all timeouts\n        this.activeTimeouts.forEach(timeout => clearTimeout(timeout));\n        this.activeTimeouts.clear();\n        \n        // Remove all animation classes\n        if (this.boardRenderer.gameBoard) {\n            const animatedElements = this.boardRenderer.gameBoard.querySelectorAll('.placing, .placing-special, .winning-stone, .threat-highlight, .assistance-highlight');\n            animatedElements.forEach(element => {\n                element.classList.remove('placing', 'placing-special', 'winning-stone', 'threat-highlight', 'assistance-highlight');\n            });\n        }\n        \n        // Remove victory overlays\n        const overlays = document.querySelectorAll('.victory-overlay');\n        overlays.forEach(overlay => {\n            if (overlay.parentNode) {\n                overlay.parentNode.removeChild(overlay);\n            }\n        });\n        \n        console.log('üßπ Cleared all animation effects');\n    }\n\n    /**\n     * Check if position is special (center or strategic)\n     * @private\n     */\n    _isSpecialPosition(row, col) {\n        // Center position\n        if (row === 7 && col === 7) return true;\n        \n        // Star points\n        const starPoints = [[3, 3], [3, 11], [7, 7], [11, 3], [11, 11]];\n        return starPoints.some(([starRow, starCol]) => starRow === row && starCol === col);\n    }\n\n    /**\n     * Set animation duration\n     */\n    setAnimationDuration(duration) {\n        this.animationDuration = Math.max(100, Math.min(1000, duration));\n        console.log(`üé¨ Animation duration set to ${this.animationDuration}ms`);\n    }\n\n    /**\n     * Enable/disable animations\n     */\n    setAnimationsEnabled(enabled) {\n        this.animationsEnabled = enabled;\n        \n        if (!enabled) {\n            this.clearAllEffects();\n        }\n        \n        console.log(`üé¨ Animations ${enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    /**\n     * Get animation status\n     */\n    isAnimationActive() {\n        return this.isAnimating || this.activeTimeouts.size > 0;\n    }\n}","/**\n * GomokuUI - Modern Implementation using UI Module System\n * \n * Based on Connect4 goldstandard implementation.\n * Adapted for 15x15 Gomoku board and 5-in-a-row gameplay.\n * \n * Features:\n * - All keyboard shortcuts (F1, F2, F3, 1-15, etc.)\n * - Modal system (help, assistance)\n * - WASM integration and AI support\n * - Player assistance system with checkboxes\n * - Complete 15x15 Gomoku board with intersection placement\n */\n\nimport { BaseGameUI } from '../../../assets/js/ui-modules/index.js';\nimport { GOMOKU_UI_CONFIG, createGomokuConfig } from './gomoku-config.js';\n\n// Component Imports\nimport { GomokuBoardRenderer } from './components/GomokuBoardRenderer.js';\nimport { GomokuInteractionHandler } from './components/GomokuInteractionHandler.js';\nimport { GomokuAssistanceManager } from './components/GomokuAssistanceManager.js';\nimport { MemoryManager } from './components/MemoryManager.js';\nimport { OptimizedElementBinder } from './components/OptimizedElementBinder.js';\nimport { GomokuAnimationManager } from './components/GomokuAnimationManager.js';\n\nexport class GomokuUI extends BaseGameUI {\n    constructor(game) {\n        // Initialize with Gomoku-specific configuration\n        super(game, GOMOKU_UI_CONFIG);\n        \n        // Gomoku-specific properties\n        this.ai = null;\n        this.gameMode = 'two-player';\n        this.isProcessingMove = false;\n        this.aiPlayer = 2; // White player (WASM Player.White)\n        this.scores = { black: 0, white: 0 };\n        \n        // Settings from legacy\n        this.animationDuration = 300;\n        this.aiThinkingDelay = 600;\n        \n        // Player assistance settings\n        this.assistanceSettings = {\n            player1: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            },\n            player2: { \n                undo: false, \n                threats: false, \n                'winning-moves': false, \n                'blocked-positions': false \n            }\n        };\n        \n        // WASM Integration\n        this.wasmIntegration = null;\n        \n        // Position hover state for preview system\n        this.hoveredPosition = null;\n        this.previewStone = null;\n        \n        // ULTRATHINK Components\n        this.boardRenderer = null;\n        this.interactionHandler = null;\n        this.assistanceManager = null;\n        this.memoryManager = null;\n        this.optimizedElementBinder = null;\n        this.animationManager = null;\n        \n        // Initialization guard to prevent multiple initializations\n        this.initialized = false;\n        \n        // Starting player rotation (1 = Black, 2 = White)\n        this.nextStartingPlayer = 1; // Black starts first game by default\n    }\n\n    /**\n     * Override beforeInit to set up Gomoku-specific initialization\n     */\n    async beforeInit() {\n        if (this.initialized) {\n            console.warn('‚ö†Ô∏è GomokuUI already initialized, skipping beforeInit');\n            return;\n        }\n        \n        console.log('‚ö´ Starting Gomoku UI initialization...');\n        \n        // Update configuration based on current game mode\n        const currentMode = document.getElementById('gameMode')?.value || 'two-player';\n        this.config = createGomokuConfig(currentMode);\n        this.gameMode = currentMode;\n    }\n\n    /**\n     * Override afterInit to complete Gomoku-specific setup\n     */\n    afterInit() {\n        if (this.initialized) {\n            console.warn('‚ö†Ô∏è GomokuUI already initialized, skipping afterInit');\n            return;\n        }\n        \n        console.log('‚ö´ Completing Gomoku UI initialization...');\n        \n        // Initialize ULTRATHINK MemoryManager (foundational)\n        this.initializeMemoryManager();\n        \n        // Initialize ULTRATHINK OptimizedElementBinder (foundational)\n        this.initializeOptimizedElementBinder();\n        \n        // Initialize ULTRATHINK BoardRenderer component\n        this.initializeBoardRenderer();\n        \n        // Initialize ULTRATHINK InteractionHandler component\n        this.initializeInteractionHandler();\n        \n        // Initialize ULTRATHINK AssistanceManager component\n        this.initializeAssistanceManager();\n        \n        // Initialize AnimationManager component with premium effects\n        this.initializeAnimationManager();\n        \n        // Update initial UI state\n        this.updateUI();\n        \n        // Debug Modal System\n        this.debugModalSystem();\n        \n        // Make testModalSystem available globally for debugging\n        window.testModalSystem = () => this.testModalSystem();\n        \n        // Mark as initialized\n        this.initialized = true;\n        console.log('‚úÖ GomokuUI initialization completed successfully');\n    }\n\n    // ==================== COMPONENT INITIALIZATION ====================\n\n    /**\n     * Initialize MemoryManager component (ULTRATHINK Phase 1)\n     */\n    initializeMemoryManager() {\n        console.log('üß† ULTRATHINK: Initializing MemoryManager component...');\n        \n        // Create MemoryManager component instance\n        this.memoryManager = new MemoryManager();\n        \n        console.log('‚úÖ MemoryManager component initialized');\n    }\n\n    /**\n     * Initialize OptimizedElementBinder component (ULTRATHINK Phase 1)\n     */\n    initializeOptimizedElementBinder() {\n        console.log('üîó ULTRATHINK: Initializing OptimizedElementBinder component...');\n        \n        // Create OptimizedElementBinder component instance\n        this.optimizedElementBinder = new OptimizedElementBinder(this.elements);\n        \n        // Track component with MemoryManager\n        if (this.memoryManager) {\n            this.memoryManager.trackComponent(this.optimizedElementBinder);\n        }\n        \n        console.log('‚úÖ OptimizedElementBinder component initialized');\n    }\n\n    /**\n     * Initialize BoardRenderer component (ULTRATHINK Phase 2)\n     * Replaces inline initializeBoard() with component-based approach\n     */\n    initializeBoardRenderer() {\n        const gameBoard = this.elements.gameBoard;\n        \n        if (!gameBoard) {\n            console.error('‚ùå Game board element not found for BoardRenderer');\n            return;\n        }\n        \n        console.log('üîß ULTRATHINK: Initializing GomokuBoardRenderer component...');\n        \n        // Create BoardRenderer component instance\n        this.boardRenderer = new GomokuBoardRenderer(gameBoard);\n        \n        // Track component with MemoryManager\n        if (this.memoryManager) {\n            this.memoryManager.trackComponent(this.boardRenderer);\n        }\n        \n        // Initialize board through component\n        const success = this.boardRenderer.initializeBoard();\n        if (!success) {\n            console.error('‚ùå GomokuBoardRenderer initialization failed');\n            return;\n        }\n        \n        console.log('‚úÖ GomokuBoardRenderer component initialized');\n    }\n\n    /**\n     * Initialize InteractionHandler component (ULTRATHINK Phase 2)\n     * Replaces inline event handling with component-based approach\n     */\n    initializeInteractionHandler() {\n        if (!this.boardRenderer) {\n            console.error('‚ùå BoardRenderer must be initialized before InteractionHandler');\n            return;\n        }\n        \n        console.log('üîß ULTRATHINK: Initializing GomokuInteractionHandler component...');\n        \n        // Create InteractionHandler component instance\n        this.interactionHandler = new GomokuInteractionHandler(\n            this.game,\n            this.boardRenderer,\n            this.elements\n        );\n        \n        // Track component with MemoryManager\n        if (this.memoryManager) {\n            this.memoryManager.trackComponent(this.interactionHandler);\n        }\n        \n        // Set up interaction event handlers through component\n        this.interactionHandler.setupEventHandlers((row, col) => {\n            this.makeMove(row, col);\n        });\n        \n        console.log('‚úÖ GomokuInteractionHandler component initialized');\n    }\n\n    /**\n     * Initialize AssistanceManager component (ULTRATHINK Phase 3)\n     * Replaces inline assistance system with component-based approach\n     */\n    initializeAssistanceManager() {\n        if (!this.boardRenderer) {\n            console.error('‚ùå BoardRenderer must be initialized before AssistanceManager');\n            return;\n        }\n        \n        console.log('üîß ULTRATHINK: Initializing GomokuAssistanceManager component...');\n        \n        // Create AssistanceManager component instance\n        this.assistanceManager = new GomokuAssistanceManager(this.game, this.boardRenderer, this.elements);\n        \n        // Track component with MemoryManager\n        if (this.memoryManager) {\n            this.memoryManager.trackComponent(this.assistanceManager);\n        }\n        \n        // Set up assistance system through component\n        this.assistanceManager.setupAssistanceSystem();\n        \n        console.log('‚úÖ GomokuAssistanceManager component initialized');\n    }\n\n    /**\n     * Initialize AnimationManager component (ULTRATHINK Phase 4)\n     */\n    initializeAnimationManager() {\n        console.log('üé¨ ULTRATHINK: Initializing GomokuAnimationManager component...');\n        \n        // Create AnimationManager component instance\n        this.animationManager = new GomokuAnimationManager(this.boardRenderer);\n        \n        // Track component with MemoryManager\n        if (this.memoryManager) {\n            this.memoryManager.trackComponent(this.animationManager);\n        }\n        \n        console.log('‚úÖ GomokuAnimationManager component initialized');\n    }\n\n    // ==================== GAME LOGIC OVERRIDES ====================\n\n    /**\n     * Make a move at specific position (row, col)\n     * Enhanced with ULTRATHINK component system\n     */\n    async makeMove(row, col) {\n        if (this.isProcessingMove) {\n            console.log('‚ö†Ô∏è Move already in progress, ignoring input');\n            return;\n        }\n        \n        console.log(`üéØ Making move at position (${row}, ${col})`);\n        \n        this.isProcessingMove = true;\n        \n        try {\n            // Validate move through game engine\n            if (!this.game || typeof this.game.isValidMove !== 'function' || !this.game.isValidMove(row, col)) {\n                console.warn(`‚ö†Ô∏è Invalid move at (${row}, ${col})`);\n                this.isProcessingMove = false;\n                return;\n            }\n            \n            // Execute move through game engine\n            const moveResult = this.game.makeMove(row, col);\n            console.log('üéØ Move result:', moveResult);\n            \n            if (moveResult && moveResult.success) {\n                // Get current player before move is processed\n                const currentPlayer = this.game.getCurrentPlayer();\n                \n                // Trigger visual update immediately through BoardRenderer\n                if (this.boardRenderer) {\n                    this.boardRenderer.placeStone(row, col, currentPlayer);\n                }\n                \n                // Trigger move animation through AnimationManager\n                if (this.animationManager) {\n                    this.animationManager.animateStonePlace(row, col, currentPlayer);\n                }\n                \n                // Update UI state\n                this.updateUI();\n                \n                // Update assistance highlights\n                this.updateAssistanceHighlights();\n                \n                // Check for game over\n                if (this.game && typeof this.game.isGameOver === 'function' && this.game.isGameOver()) {\n                    console.log('üèÅ Game over detected after move!');\n                    this.handleGameOver();\n                }\n                \n                // Handle AI move if in single-player mode\n                if (this.gameMode === 'single-player' && !this.game.isGameOver()) {\n                    setTimeout(() => {\n                        this.makeAIMove();\n                    }, this.aiThinkingDelay);\n                }\n            }\n        } catch (error) {\n            console.error('‚ùå Error making move:', error);\n        } finally {\n            this.isProcessingMove = false;\n        }\n    }\n\n    /**\n     * Handle AI move (if applicable)\n     */\n    async makeAIMove() {\n        if (!this.game || this.game.isGameOver() || this.gameMode !== 'single-player') {\n            return;\n        }\n        \n        console.log('ü§ñ AI is thinking...');\n        \n        try {\n            // Use WASM AI if available\n            if (this.game.getAIMove && typeof this.game.getAIMove === 'function') {\n                const aiMove = this.game.getAIMove();\n                if (aiMove && aiMove.row !== undefined && aiMove.col !== undefined) {\n                    await this.makeMove(aiMove.row, aiMove.col);\n                    return;\n                }\n            }\n            \n            console.warn('‚ö†Ô∏è AI move not available');\n        } catch (error) {\n            console.error('‚ùå Error getting AI move:', error);\n        }\n    }\n\n    /**\n     * Handle game over state\n     */\n    handleGameOver() {\n        console.log('üèÅ Handling game over...');\n        \n        const winner = this.game.getWinner();\n        \n        if (winner) {\n            const winnerName = winner === 1 ? 'Schwarz' : 'Wei√ü';\n            \n            // Update scores\n            if (winner === 1) {\n                this.scores.black++;\n            } else {\n                this.scores.white++;\n            }\n            \n            // Show winning animation through AnimationManager\n            if (this.animationManager) {\n                this.animationManager.showWinningAnimation(winner);\n            }\n            \n            // Show victory message\n            this.showMessage(`üéâ ${winnerName} gewinnt!`, 'success');\n            \n            // Update starting player for next game (winner starts next game)\n            this.nextStartingPlayer = winner;\n            \n        } else {\n            this.showMessage('‚öñÔ∏è Unentschieden!', 'info');\n            // Keep same starting player for draws\n        }\n        \n        // Update UI to reflect new scores\n        this.updateUI();\n    }\n\n    // ==================== GAME ACTION OVERRIDES ====================\n\n    /**\n     * Override newGame for Gomoku-specific logic\n     */\n    newGame() {\n        // Reset the game engine with proper starting player\n        if (this.game) {\n            // Check if WASM board supports starting player selection\n            if (this.game.board && typeof this.game.board.reset_with_starting_player === 'function') {\n                // Use WASM API directly with player enum (1=Black, 2=White)\n                this.game.board.reset_with_starting_player(this.nextStartingPlayer);\n                const starterName = this.nextStartingPlayer === 1 ? 'Schwarz' : 'Wei√ü';\n                console.log(`üéÆ WASM: Neues Spiel mit Startspieler: ${starterName} (${this.nextStartingPlayer})`);\n                \n                // Update JavaScript wrapper state\n                this.game.gameHistory = [];\n                this.game.currentMoveIndex = -1;\n                this.game.totalMoves = 0;\n                this.game.averageMoveTime = 0;\n            } else {\n                // Fallback to standard reset\n                this.game.newGame();\n                console.log('‚ö†Ô∏è WASM API reset_with_starting_player nicht verf√ºgbar - Standard Reset verwendet');\n            }\n        }\n        \n        // Clear board through BoardRenderer component\n        if (this.boardRenderer) {\n            this.boardRenderer.clearBoard();\n        }\n        \n        // Clear all visual effects (confetti, particles, animations)\n        if (this.animationManager) {\n            this.animationManager.clearAllEffects();\n        }\n        \n        // Clear UI state\n        this.clearAssistanceHighlights();\n        this.hideStonePreview();\n        \n        // Update UI to reflect new game state\n        this.updateUI();\n        \n        // Show message with starting player info\n        const starterName = this.nextStartingPlayer === 1 ? 'Schwarz' : 'Wei√ü';\n        this.showMessage(`üÜï Neues Spiel gestartet! ${starterName} beginnt.`, 'info');\n    }\n\n    /**\n     * Override undoMove for Gomoku-specific logic\n     */\n    undoMove() {\n        try {\n            if (!this.game || typeof this.game.undoMove !== 'function') {\n                console.warn('‚ö†Ô∏è Undo not available');\n                return;\n            }\n            \n            const undoResult = this.game.undoMove();\n            if (undoResult && undoResult.success) {\n                console.log('‚Ü©Ô∏è Move undone successfully');\n                \n                // Update board through BoardRenderer\n                if (this.boardRenderer) {\n                    this.boardRenderer.updateFromGameState(this.game);\n                }\n                \n                // Update UI\n                this.updateUI();\n                this.updateAssistanceHighlights();\n                \n                this.showMessage('‚Ü©Ô∏è Zug r√ºckg√§ngig gemacht', 'info');\n            } else {\n                console.warn('‚ö†Ô∏è Undo failed');\n                this.showMessage('‚ö†Ô∏è R√ºckg√§ngig nicht m√∂glich', 'warning');\n            }\n        } catch (error) {\n            console.error('‚ùå Error during undo:', error);\n            this.showMessage('‚ùå Fehler beim R√ºckg√§ngig machen', 'error');\n        }\n    }\n\n    // ==================== UI UPDATE METHODS ====================\n\n    /**\n     * Update UI to reflect current game state\n     */\n    updateUI() {\n        // Update current player indicator\n        this.updateCurrentPlayerIndicator();\n        \n        // Update game status\n        this.updateGameStatus();\n        \n        // Update scores\n        this.updateScores();\n        \n        // Update assistance settings if available\n        if (this.assistanceManager) {\n            this.assistanceManager.updateAssistanceCheckboxes();\n        }\n    }\n\n    /**\n     * Update current player indicator\n     */\n    updateCurrentPlayerIndicator() {\n        const indicator = this.elements.currentPlayerIndicator;\n        if (!indicator || !this.game) return;\n        \n        const currentPlayer = this.game.getCurrentPlayer();\n        const playerName = currentPlayer === 1 ? 'Schwarz' : 'Wei√ü';\n        const stoneClass = currentPlayer === 1 ? 'black' : 'white';\n        \n        indicator.innerHTML = `\n            <span class=\"player-indicator active\">\n                <span class=\"player-stone ${stoneClass}\"></span>\n                ${playerName} ist am Zug\n            </span>\n        `;\n    }\n\n    /**\n     * Update game status display\n     */\n    updateGameStatus() {\n        const statusElement = this.elements.gameStatus;\n        if (!statusElement || !this.game) return;\n        \n        if (this.game.isGameOver()) {\n            const winner = this.game.getWinner();\n            if (winner) {\n                const winnerName = winner === 1 ? 'Schwarz' : 'Wei√ü';\n                statusElement.textContent = `${winnerName} gewinnt!`;\n            } else {\n                statusElement.textContent = 'Unentschieden';\n            }\n        } else {\n            const moveCount = this.game.getMoveCount ? this.game.getMoveCount() : 0;\n            statusElement.textContent = `Zug ${moveCount + 1}`;\n        }\n    }\n\n    /**\n     * Update score display\n     */\n    updateScores() {\n        // Update scores in sidebar if elements exist\n        const blackScoreElement = this.elements.blackScore;\n        const whiteScoreElement = this.elements.whiteScore;\n        \n        if (blackScoreElement) {\n            blackScoreElement.textContent = this.scores.black;\n        }\n        if (whiteScoreElement) {\n            whiteScoreElement.textContent = this.scores.white;\n        }\n    }\n\n    // ==================== ASSISTANCE SYSTEM DELEGATES ====================\n\n    /**\n     * Setup assistance system - Delegates to AssistanceManager component\n     */\n    setupAssistanceSystem() {\n        // Delegate to component\n        if (this.assistanceManager) {\n            this.assistanceManager.setupAssistanceSystem();\n            return;\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy assistance fallback - component integration incomplete');\n    }\n\n    /**\n     * Update assistance highlights based on current settings\n     * Delegates to AssistanceManager component\n     */\n    updateAssistanceHighlights() {\n        // Delegate to component\n        if (this.assistanceManager) {\n            this.assistanceManager.updateAssistanceHighlights();\n            return;\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy assistance highlighting fallback - component integration incomplete');\n    }\n\n    /**\n     * Update assistance checkboxes based on current settings\n     * Delegates to AssistanceManager component\n     */\n    updateAssistanceCheckboxes() {\n        // Delegate to component\n        if (this.assistanceManager) {\n            this.assistanceManager.updateAssistanceCheckboxes();\n            return;\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy checkbox update fallback - component integration incomplete');\n    }\n\n    /**\n     * Clear all assistance highlights\n     * Delegates to AssistanceManager component\n     */\n    clearAssistanceHighlights() {\n        // Delegate to component\n        if (this.assistanceManager) {\n            this.assistanceManager.clearAssistanceHighlights();\n            return;\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy clear highlights fallback - component integration incomplete');\n    }\n\n    /**\n     * Toggle assistance setting for specific player and type\n     * Delegates to AssistanceManager component\n     */\n    toggleAssistance(player, type) {\n        // Delegate to component\n        if (this.assistanceManager) {\n            this.assistanceManager.toggleAssistance(player, type);\n            return this.assistanceManager.getAssistanceSetting(player, type);\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy assistance toggle fallback - component integration incomplete');\n        return false;\n    }\n\n    /**\n     * Get current assistance setting for player and type\n     * Delegates to AssistanceManager component\n     */\n    getAssistanceSetting(player, type) {\n        \n        // Delegate to component if available\n        if (this.assistanceManager) {\n            return this.assistanceManager.getAssistanceSetting(player, type);\n        }\n        \n        console.warn('‚ö†Ô∏è Using legacy assistance setting fallback - component integration incomplete');\n        return false;\n    }\n\n    // ==================== PREVIEW SYSTEM ====================\n\n    /**\n     * Show stone preview at position\n     */\n    showStonePreview(row, col) {\n        if (this.interactionHandler) {\n            this.interactionHandler.showStonePreview(row, col);\n        }\n    }\n\n    /**\n     * Hide stone preview\n     */\n    hideStonePreview() {\n        if (this.interactionHandler) {\n            this.interactionHandler.hideStonePreview();\n        }\n    }\n\n    // ==================== GAME MODE HANDLING ====================\n\n    /**\n     * Handle game mode change\n     */\n    onGameModeChange(mode) {\n        console.log(`üéÆ Game mode changed to: ${mode}`);\n        this.gameMode = mode;\n        this.config = createGomokuConfig(mode);\n        \n        // Restart game with new mode\n        this.newGame();\n    }\n\n    // ==================== DEBUG AND TESTING ====================\n\n    /**\n     * Debug Modal System\n     */\n    debugModalSystem() {\n        console.log('üß™ PHASE 2A: Debugging Modal System...');\n        \n        // Check modal elements\n        const helpModal = this.elements.helpModal;\n        const assistanceModal = this.elements.assistanceModal;\n        \n        console.log('Help Modal Element:', helpModal);\n        console.log('Assistance Modal Element:', assistanceModal);\n        \n        if (!helpModal) {\n            console.warn('‚ö†Ô∏è Help modal not found in DOM');\n        }\n        \n        if (!assistanceModal) {\n            console.warn('‚ö†Ô∏è Assistance modal not found in DOM');\n        }\n    }\n\n    /**\n     * Manual Modal Testing\n     */\n    testModalSystem() {\n        console.log('üß™ PHASE 2A: Manual Modal Testing...');\n        \n        // Test Help Modal\n        console.log('üß™ Testing Help Modal...');\n        try {\n            this.toggleModal('help');\n            console.log('‚úÖ Help Modal toggle successful');\n        } catch (error) {\n            console.error('‚ùå Help Modal toggle failed:', error);\n        }\n        \n        // Test Assistance Modal\n        setTimeout(() => {\n            console.log('üß™ Testing Assistance Modal...');\n            try {\n                this.toggleModal('assistance');\n                console.log('‚úÖ Assistance Modal toggle successful');\n            } catch (error) {\n                console.error('‚ùå Assistance Modal toggle failed:', error);\n            }\n        }, 2000);\n    }\n}"],"names":["GOMOKU_UI_CONFIG","createGomokuConfig","mode","baseConfig","GomokuBoardRenderer","gameBoard","row","col","intersection","starRow","starCol","player","existingStone","stone","game","board","cellValue","positions","GomokuInteractionHandler","boardRenderer","elements","onMoveCallback","clickHandler","event","mouseEnterHandler","mouseLeaveHandler","keyHandler","letterColumnMap","currentPlayer","processing","element","handler","useCapture","GomokuAssistanceManager","players","features","feature","elementId","checkbox","changeHandler","playerKey","settings","opponent","threats","winningMoves","blockedPositions","highlightClass","position","type","oldValue","MemoryManager","intervalMs","monitoringInterval","memory","thresholds","issues","leak","options","listenerInfo","elementOrListenerInfo","wasmInstance","identifier","wasmInfo","totalMemoryBytes","totalInstances","name","component","callback","delay","args","timeoutId","interval","intervalId","observer","target","instance","destroyMethod","componentInfo","description","callbackInfo","beforeUsage","afterUsage","saved","id","info","report","bytes","sizes","i","startTime","cleanupTime","OptimizedElementBinder","config","error","critical","isRequired","strategies","fallbackId","patterns","pattern","failures","result","failure","cells","expectedCells","topCoords","bottomCoords","coords","missingControls","control","modal","bindingTime","boundCount","el","totalCount","key","value","bound","wasRequired","GomokuAnimationManager","timeout","specialTimeout","winner","winningLine","index","colors","boardRect","centerX","centerY","stopTimeout","particle","color","size","removeTimeout","playerName","overlay","content","duration","enabled","GomokuUI","BaseGameUI","currentMode","moveResult","aiMove","winnerName","starterName","undoResult","indicator","stoneClass","statusElement","moveCount","blackScoreElement","whiteScoreElement","helpModal","assistanceModal"],"mappings":"gFAOO,MAAMA,EAAmB,CAE5B,SAAU,CAEN,SAAU,CACN,YACA,yBACA,YACZ,EAGQ,SAAU,CAEN,aACA,aACA,cAGA,aACA,UACA,gBACA,UACA,gBAGA,YACA,kBACA,eACA,qBAGA,WAGA,eACA,eACA,kBACA,kBACA,wBACA,wBACA,4BACA,2BACZ,CACA,EAGI,OAAQ,CACJ,KAAM,CACF,GAAI,YACJ,SAAU,KACV,cAAe,GACf,oBAAqB,EACjC,EAEQ,WAAY,CACR,GAAI,kBACJ,SAAU,KACV,cAAe,GACf,oBAAqB,EACjC,CACA,EAGI,SAAU,CAEN,GAAM,mBACN,GAAM,yBACN,GAAM,aAGN,EAAK,UACL,EAAK,UACL,EAAK,WACL,EAAK,WACL,EAAK,aACL,EAAK,aAGL,SAAU,WACV,SAAU,WACV,SAAU,UACV,SAAU,SAClB,EAGI,YAAa,CACT,iBAAkB,GAClB,kBAAmB,IAGnB,iBAAkB,GAClB,gBAAiB,GAGjB,oBAAqB,GACrB,aAAc,GAGd,sBAAuB,IACvB,wBAAyB,EACjC,EAGI,KAAM,CACF,UAAW,GACX,aAAc,EACd,qBAAsB,GAGtB,eAAgB,GAChB,yBAA0B,GAG1B,eAAgB,SAChB,eAAgB,IAGhB,mBAAoB,CAChB,UACA,gBACA,oBACA,MACZ,CACA,CACA,EAOO,SAASC,EAAmBC,EAAO,aAAc,CACpD,MAAMC,EAAa,CAAE,GAAGH,CAAgB,EAExC,OAAQE,EAAI,CACR,IAAK,gBACDC,EAAW,KAAK,UAAY,GAC5BA,EAAW,KAAK,eAAiB,SACjCA,EAAW,YAAY,eAAiB,IACxC,MAEJ,IAAK,aACL,QACIA,EAAW,KAAK,UAAY,GAC5BA,EAAW,KAAK,SAAW,GAC3B,KACZ,CAEI,OAAOA,CACX,CC9IO,MAAMC,CAAoB,CAC7B,YAAYC,EAAW,CACnB,KAAK,UAAYA,EAGjB,KAAK,UAAY,GACjB,KAAK,cAAgB,CAAA,EACrB,KAAK,OAAS,CAAA,EAGd,KAAK,YAAc,GAGnB,KAAK,WAAa,CACd,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,EAAE,CACrD,CACA,CAMI,iBAAkB,CACd,OAAK,KAAK,WAMV,KAAK,UAAU,UAAY,GAC3B,KAAK,cAAgB,CAAA,EACrB,KAAK,OAAS,CAAA,EAGd,KAAK,kBAAiB,EAGtB,KAAK,0BAAyB,EAM1B,KAAK,cAAc,OAAS,EAIhC,KAAK,YAAc,GACZ,IAvBI,EAwBnB,CAMI,mBAAoB,CAEhB,KAAK,UAAU,UAAY,mDAG3B,OAAO,OAAO,KAAK,UAAU,MAAO,CAChC,QAAS,OACT,oBAAqB,UAAU,KAAK,SAAS,SAC7C,iBAAkB,UAAU,KAAK,SAAS,SAC1C,IAAK,MACL,YAAa,MACb,WAAY,2CACZ,aAAc,OACd,QAAS,OACT,UAAW,gCACX,OAAQ,oBACR,MAAO,QACP,OAAQ,QACR,OAAQ,YACR,SAAU,UACtB,CAAS,CAGT,CAMI,2BAA4B,CACxB,QAASC,EAAM,EAAGA,EAAM,KAAK,UAAWA,IACpC,QAASC,EAAM,EAAGA,EAAM,KAAK,UAAWA,IAAO,CAC3C,MAAMC,EAAe,KAAK,oBAAoBF,EAAKC,CAAG,EACtD,KAAK,cAAc,KAAKC,CAAY,EACpC,KAAK,UAAU,YAAYA,CAAY,CACvD,CAEA,CAMI,oBAAoBF,EAAKC,EAAK,CAC1B,MAAMC,EAAe,SAAS,cAAc,KAAK,EACjD,OAAAA,EAAa,UAAY,eACzBA,EAAa,QAAQ,IAAMF,EAC3BE,EAAa,QAAQ,IAAMD,EAGvB,KAAK,aAAaD,EAAKC,CAAG,GAC1BC,EAAa,UAAU,IAAI,YAAY,EAI3C,OAAO,OAAOA,EAAa,MAAO,CAC9B,WAAY,2CACZ,OAAQ,oBACR,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,OAAQ,UACR,WAAY,gBACZ,SAAU,WACV,WAAY,MACxB,CAAS,EAEMA,CACf,CAMI,aAAaF,EAAKC,EAAK,CACnB,OAAO,KAAK,WAAW,KAAK,CAAC,CAACE,EAASC,CAAO,IAAMD,IAAYH,GAAOI,IAAYH,CAAG,CAC9F,CAKI,WAAWD,EAAKC,EAAKI,EAAQ,CACzB,MAAMH,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EACpD,GAAI,CAACC,EAED,MAAO,GAIX,MAAMI,EAAgBJ,EAAa,cAAc,QAAQ,EACrDI,GACAA,EAAc,OAAM,EAIxB,MAAMC,EAAQ,KAAK,aAAaF,CAAM,EACtC,OAAAH,EAAa,YAAYK,CAAK,EAG9B,KAAK,yBAAwB,EAC7BL,EAAa,UAAU,IAAI,WAAW,EAG/B,EACf,CAMI,aAAaG,EAAQ,CACjB,MAAME,EAAQ,SAAS,cAAc,KAAK,EAC1C,OAAAA,EAAM,UAAY,SAASF,IAAW,EAAI,QAAU,OAAO,WAG3D,OAAO,OAAOE,EAAM,MAAO,CACvB,MAAO,MACP,OAAQ,MACR,aAAc,MACd,WAAY,wCACZ,UAAW,gCACX,SAAU,UACtB,CAAS,EAEGF,IAAW,EACX,OAAO,OAAOE,EAAM,MAAO,CACvB,WAAY,iDACZ,OAAQ,gBACxB,CAAa,EAED,OAAO,OAAOA,EAAM,MAAO,CACvB,WAAY,iDACZ,OAAQ,gBACxB,CAAa,EAGEA,CACf,CAKI,kBAAkBP,EAAKC,EAAK,CACxB,OAAO,KAAK,UAAU,cAAc,cAAcD,CAAG,gBAAgBC,CAAG,IAAI,CACpF,CAKI,YAAa,CACT,KAAK,cAAc,QAAQC,GAAgB,CACvC,MAAMK,EAAQL,EAAa,cAAc,QAAQ,EAC7CK,GACAA,EAAM,OAAM,EAEhBL,EAAa,UAAU,OAAO,YAAa,gBAAiB,mBAAoB,sBAAsB,CAClH,CAAS,CAGT,CAKI,oBAAoBM,EAAM,CACtB,GAAI,CAACA,GAAQ,CAACA,EAAK,SAEf,OAIJ,KAAK,WAAU,EAGf,MAAMC,EAAQD,EAAK,SAAQ,EAG3B,QAASR,EAAM,EAAGA,EAAM,KAAK,UAAWA,IACpC,QAASC,EAAM,EAAGA,EAAM,KAAK,UAAWA,IAAO,CAC3C,MAAMS,EAAYD,EAAMT,CAAG,GAAKS,EAAMT,CAAG,EAAEC,CAAG,EAC1CS,GAAaA,IAAc,GAC3B,KAAK,WAAWV,EAAKC,EAAKS,CAAS,CAEvD,CAEA,CAKI,qBAAqBC,EAAW,CACvB,MAAM,QAAQA,CAAS,GAK5BA,EAAU,QAAQ,CAAC,CAACX,EAAKC,CAAG,IAAM,CAC9B,MAAMC,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EAChDC,GACAA,EAAa,UAAU,IAAI,eAAe,CAE1D,CAAS,CAGT,CAMI,0BAA2B,CACvB,KAAK,cAAc,QAAQA,GAAgB,CACvCA,EAAa,UAAU,OAAO,WAAW,CACrD,CAAS,CACT,CAKI,iBAAiBF,EAAKC,EAAKI,EAAQ,CAC/B,MAAMH,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EAChD,CAACC,GAAgBA,EAAa,cAAc,QAAQ,IAIxDA,EAAa,QAAQ,aAAeG,IAAW,EAAI,QAAU,QACrE,CAKI,kBAAmB,CACf,KAAK,cAAc,QAAQH,GAAgB,CACvC,OAAOA,EAAa,QAAQ,YACxC,CAAS,CACT,CAKI,mBAAmBF,EAAKC,EAAK,CACzB,MAAMC,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EAChDC,GACAA,EAAa,UAAU,IAAI,kBAAkB,CAEzD,CAKI,uBAAuBF,EAAKC,EAAK,CAC7B,MAAMC,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EAChDC,GACAA,EAAa,UAAU,IAAI,sBAAsB,CAE7D,CAKI,2BAA4B,CACxB,KAAK,cAAc,QAAQA,GAAgB,CACvCA,EAAa,UAAU,OAAO,mBAAoB,sBAAsB,CACpF,CAAS,CACT,CAKI,qBAAsB,CAClB,OAAO,KAAK,aACpB,CAKI,gBAAgBF,EAAKC,EAAK,CACtB,OAAOD,GAAO,GAAKA,EAAM,KAAK,WAAaC,GAAO,GAAKA,EAAM,KAAK,SAC1E,CAKI,gBAAgBD,EAAKC,EAAK,CACtB,MAAMC,EAAe,KAAK,kBAAkBF,EAAKC,CAAG,EACpD,OAAOC,GAAgB,CAACA,EAAa,cAAc,QAAQ,CACnE,CACA,CCtVO,MAAMU,CAAyB,CAClC,YAAYJ,EAAMK,EAAeC,EAAU,CACvC,KAAK,KAAON,EACZ,KAAK,cAAgBK,EACrB,KAAK,SAAWC,EAGhB,KAAK,gBAAkB,KACvB,KAAK,aAAe,KACpB,KAAK,iBAAmB,GAGxB,KAAK,eAAiB,CAAA,EAGtB,KAAK,wBAA0B,KAC/B,KAAK,wBAA0B,KAC/B,KAAK,6BAA+B,IAC5C,CAKI,mBAAmBC,EAAgB,CAC/B,KAAK,wBAA0BA,EAE3B,GAAC,KAAK,eAAiB,CAAC,KAAK,cAAc,aAM/C,KAAK,gCAA+B,EAGpC,KAAK,gCAA+B,EAGpC,KAAK,uBAAsB,EAGnC,CAMI,iCAAkC,CAC9B,MAAMC,EAAgBC,GAAU,CAC5B,MAAMf,EAAee,EAAM,OAAO,QAAQ,eAAe,EACzD,GAAIf,EAAc,CACd,MAAMF,EAAM,SAASE,EAAa,QAAQ,GAAG,EACvCD,EAAM,SAASC,EAAa,QAAQ,GAAG,EAC7C,KAAK,oBAAoBF,EAAKC,CAAG,CACjD,CACA,EAEQ,KAAK,cAAc,UAAU,iBAAiB,QAASe,CAAY,EACnE,KAAK,kBAAkB,KAAK,cAAc,UAAW,QAASA,CAAY,CAGlF,CAMI,iCAAkC,CAC9B,MAAME,EAAqBD,GAAU,CACjC,MAAMf,EAAee,EAAM,OAAO,QAAQ,eAAe,EACzD,GAAIf,GAAgB,CAACA,EAAa,cAAc,QAAQ,EAAG,CACvD,MAAMF,EAAM,SAASE,EAAa,QAAQ,GAAG,EACvCD,EAAM,SAASC,EAAa,QAAQ,GAAG,EAC7C,KAAK,oBAAoBF,EAAKC,CAAG,CACjD,CACA,EAEckB,EAAqBF,GAAU,CACZA,EAAM,OAAO,QAAQ,eAAe,GAErD,KAAK,yBAAwB,CAE7C,EAEQ,KAAK,cAAc,UAAU,iBAAiB,aAAcC,EAAmB,EAAI,EACnF,KAAK,cAAc,UAAU,iBAAiB,aAAcC,EAAmB,EAAI,EAEnF,KAAK,kBAAkB,KAAK,cAAc,UAAW,aAAcD,EAAmB,EAAI,EAC1F,KAAK,kBAAkB,KAAK,cAAc,UAAW,aAAcC,EAAmB,EAAI,CAGlG,CAMI,wBAAyB,CACrB,MAAMC,EAAcH,GAAU,CAE1B,GAAIA,EAAM,KAAO,KAAOA,EAAM,KAAO,IAAK,CACtC,MAAMhB,EAAM,SAASgB,EAAM,GAAG,EAAI,EAC9BhB,EAAM,KACN,KAAK,YAAYA,CAAG,EACpBgB,EAAM,eAAc,EAExC,MAAuBA,EAAM,MAAQ,MACrB,KAAK,YAAY,CAAC,EAClBA,EAAM,eAAc,GAIxB,MAAMI,EAAkB,CACpB,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,EACzD,EAEgBA,EAAgBJ,EAAM,IAAI,YAAW,CAAE,IACvC,KAAK,YAAYI,EAAgBJ,EAAM,IAAI,YAAW,CAAE,CAAC,EACzDA,EAAM,eAAc,EAEpC,EAEQ,SAAS,iBAAiB,UAAWG,CAAU,EAC/C,KAAK,kBAAkB,SAAU,UAAWA,CAAU,CAG9D,CAKI,oBAAoBpB,EAAKC,EAAK,CACtB,KAAK,kBAQJ,KAAK,cAAc,gBAAgBD,EAAKC,CAAG,GAM3C,KAAK,cAAc,gBAAgBD,EAAKC,CAAG,GAM5C,KAAK,yBACL,KAAK,wBAAwBD,EAAKC,CAAG,CAEjD,CAKI,oBAAoBD,EAAKC,EAAK,CACtB,KAAK,mBAET,KAAK,gBAAkB,CAAE,IAAAD,EAAK,IAAAC,CAAG,EAGjC,KAAK,iBAAiBD,EAAKC,CAAG,EAG1B,KAAK,yBACL,KAAK,wBAAwBD,EAAKC,CAAG,EAEjD,CAKI,0BAA2B,CACvB,KAAK,gBAAkB,KAGvB,KAAK,iBAAgB,EAGjB,KAAK,8BACL,KAAK,6BAA4B,CAE7C,CAKI,iBAAiBD,EAAKC,EAAK,CACvB,GAAI,CAAC,KAAK,MAAQ,CAAC,KAAK,cAAe,OAGvC,KAAK,iBAAgB,EAGrB,MAAMqB,EAAgB,KAAK,KAAK,iBAAmB,KAAK,KAAK,iBAAgB,EAAK,EAGlF,KAAK,cAAc,iBAAiBtB,EAAKC,EAAKqB,CAAa,CACnE,CAKI,kBAAmB,CACX,KAAK,eACL,KAAK,cAAc,iBAAgB,CAE/C,CAKI,YAAYrB,EAAK,CACb,GAAI,EAAAA,EAAM,GAAKA,GAAO,IAMtB,MAAK,kBAAiB,EAGtB,QAASD,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAC/B,MAAME,EAAe,KAAK,cAAc,kBAAkBF,EAAKC,CAAG,EAC9DC,GAAgB,KAAK,cAAc,gBAAgBF,EAAKC,CAAG,IAC3DC,EAAa,UAAU,IAAI,cAAc,EAGzCA,EAAa,MAAM,WAAa,2CAChCA,EAAa,MAAM,UAAY,kCAE/C,CAGQ,WAAW,IAAM,CACb,KAAK,kBAAiB,CAClC,EAAW,GAAI,EAGf,CAMI,mBAAoB,CACa,KAAK,cAAc,UAAU,iBAAiB,eAAe,EACrE,QAAQA,GAAgB,CACzCA,EAAa,UAAU,OAAO,cAAc,EAC5CA,EAAa,MAAM,WAAa,GAChCA,EAAa,MAAM,UAAY,EAC3C,CAAS,CACT,CAKI,kBAAkBqB,EAAY,CAC1B,KAAK,iBAAmBA,EAEpBA,GACA,KAAK,iBAAgB,CAEjC,CAMI,kBAAkBC,EAASP,EAAOQ,EAASC,EAAa,GAAO,CAC3D,KAAK,eAAe,KAAK,CAAE,QAAAF,EAAS,MAAAP,EAAO,QAAAQ,EAAS,WAAAC,EAAY,CACxE,CAKI,SAAU,CACN,KAAK,eAAe,QAAQ,CAAC,CAAE,QAAAF,EAAS,MAAAP,EAAO,QAAAQ,EAAS,WAAAC,KAAiB,CACrEF,EAAQ,oBAAoBP,EAAOQ,EAASC,CAAU,CAClE,CAAS,EACD,KAAK,eAAiB,CAAA,CAG9B,CAKI,QAAS,CACL,KAAK,iBAAmB,GAGpB,KAAK,eAAiB,KAAK,cAAc,YACzC,KAAK,cAAc,UAAU,MAAM,cAAgB,OAE/D,CAKI,SAAU,CACN,KAAK,iBAAmB,GACxB,KAAK,iBAAgB,EAGjB,KAAK,eAAiB,KAAK,cAAc,YACzC,KAAK,cAAc,UAAU,MAAM,cAAgB,OAE/D,CAKI,oBAAqB,CACjB,OAAO,KAAK,eACpB,CAKI,sBAAuB,CACnB,OAAO,KAAK,gBACpB,CACA,CCzUO,MAAMC,CAAwB,CACjC,YAAYnB,EAAMK,EAAeC,EAAU,CACvC,KAAK,KAAON,EACZ,KAAK,cAAgBK,EACrB,KAAK,SAAWC,EAGhB,KAAK,mBAAqB,CACtB,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,EACY,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,CACA,EAGQ,KAAK,oBAAsB,IAAI,GACvC,CAMI,uBAAwB,CACpB,MAAMc,EAAU,CAAC,UAAW,SAAS,EAC/BC,EAAW,CAAC,OAAQ,UAAW,gBAAiB,mBAAmB,EAEzE,UAAWxB,KAAUuB,EACjB,UAAWE,KAAWD,EAAU,CAC5B,MAAME,EAAY,GAAG1B,CAAM,IAAIyB,CAAO,GAChCE,EAAW,KAAK,SAASD,CAAS,EAExC,GAAIC,EAAU,CACV,MAAMC,EAAgB,IAAM,CACxB,KAAK,iBAAiB5B,EAAQyB,CAAO,CAC7D,EACoBE,EAAS,iBAAiB,SAAUC,CAAa,CACrE,CAGA,CAIA,CAKI,4BAA6B,CACzB,GAAI,CAAC,KAAK,MAAQ,CAAC,KAAK,KAAK,aAAe,OAAO,KAAK,KAAK,kBAAqB,WAE9E,OAIJ,KAAK,0BAAyB,EAG9B,MAAMC,EADgB,KAAK,KAAK,iBAAgB,IACZ,EAAI,UAAY,UAC9CC,EAAW,KAAK,mBAAmBD,CAAS,EAK9CC,EAAS,SAET,KAAK,iBAAgB,EAGrBA,EAAS,eAAe,GAExB,KAAK,sBAAqB,EAG1BA,EAAS,mBAAmB,GAE5B,KAAK,0BAAyB,CAI1C,CAKI,kBAAmB,CACf,GAAI,GAAC,KAAK,MAAQ,CAAC,KAAK,KAAK,qBAE7B,GAAI,CAEA,MAAMC,EADgB,KAAK,KAAK,iBAAgB,IACb,EAAI,EAAI,EACrCC,EAAU,KAAK,KAAK,oBAAoBD,CAAQ,EAEtD,KAAK,mBAAmBC,EAAS,iBAAiB,CAE9D,MAAwB,CAExB,CACA,CAKI,uBAAwB,CACpB,GAAK,KAAK,MAKL,KAAK,KAAK,gBAKf,GAAI,CACA,MAAMf,EAAgB,KAAK,KAAK,iBAAgB,EAG1CgB,EAAe,KAAK,KAAK,gBAAgBhB,CAAa,EAGxD,MAAM,QAAQgB,CAAY,GAAKA,EAAa,OAAS,GACrD,KAAK,mBAAmBA,EAAc,kBAAkB,CAKxE,MAAwB,CAExB,CACA,CAKI,2BAA4B,CACxB,GAAI,GAAC,KAAK,MAAQ,CAAC,KAAK,KAAK,kBAE7B,GAAI,CACA,MAAMhB,EAAgB,KAAK,KAAK,iBAAgB,EAC1CiB,EAAmB,KAAK,KAAK,iBAAiBjB,CAAa,EAEjE,KAAK,mBAAmBiB,EAAkB,kBAAkB,CAExE,MAAwB,CAExB,CACA,CAKI,mBAAmB5B,EAAW6B,EAAgB,CAC1C,GAAK,MAAM,QAAQ7B,CAAS,EAE5B,UAAW8B,KAAY9B,EACnB,KAAK,kBAAkB8B,EAAUD,CAAc,CAE3D,CAKI,kBAAkBC,EAAUD,EAAgB,CACxC,IAAIxC,EAAKC,EAGT,GAAI,MAAM,QAAQwC,CAAQ,GAAKA,EAAS,QAAU,EAC9C,CAACzC,EAAKC,CAAG,EAAIwC,UACNA,GAAY,OAAOA,GAAa,SACvCzC,EAAMyC,EAAS,IACfxC,EAAMwC,EAAS,QAGf,QAIJ,KAAK,uBAAuBzC,EAAKC,EAAKuC,CAAc,CAC5D,CAMI,uBAAuBxC,EAAKC,EAAKuC,EAAgB,CAG7C,MAAMtC,EAAe,KAAK,cAAc,kBAAkBF,EAAKC,CAAG,EAC9DC,IACAA,EAAa,UAAU,IAAIsC,CAAc,EACzC,KAAK,oBAAoB,IAAItC,CAAY,EAKrD,CAKI,2BAA4B,CAExB,UAAWsB,KAAW,KAAK,oBACvBA,EAAQ,UAAU,OACd,mBACA,kBACA,mBACA,sBAChB,EAEQ,KAAK,oBAAoB,MAAK,EAG1B,KAAK,eACL,KAAK,cAAc,0BAAyB,CAIxD,CAKI,iBAAiBnB,EAAQqC,EAAM,CAC3B,GAAI,CAAC,KAAK,mBAAmBrC,CAAM,EAE/B,OAGJ,MAAMsC,EAAW,KAAK,mBAAmBtC,CAAM,EAAEqC,CAAI,EACrD,YAAK,mBAAmBrC,CAAM,EAAEqC,CAAI,EAAI,CAACC,EAKzC,KAAK,2BAA0B,EAExB,KAAK,mBAAmBtC,CAAM,EAAEqC,CAAI,CACnD,CAKI,qBAAqBrC,EAAQqC,EAAM,CAC/B,OAAK,KAAK,mBAAmBrC,CAAM,GAK5B,KAAK,mBAAmBA,CAAM,EAAEqC,CAAI,GAAK,EACxD,CAKI,4BAA6B,CACzB,MAAMd,EAAU,CAAC,UAAW,SAAS,EAC/BC,EAAW,CAAC,OAAQ,UAAW,gBAAiB,mBAAmB,EAEzE,UAAWxB,KAAUuB,EACjB,UAAWE,KAAWD,EAAU,CAC5B,MAAME,EAAY,GAAG1B,CAAM,IAAIyB,CAAO,GAChCE,EAAW,KAAK,SAASD,CAAS,EAEpCC,GAAYA,EAAS,OAAS,aAC9BA,EAAS,QAAU,KAAK,qBAAqB3B,EAAQyB,CAAO,EAEhF,CAIA,CAKI,iBAAiBzB,EAAQwB,EAAW,CAAC,UAAW,eAAe,EAAG,CACzD,KAAK,mBAAmBxB,CAAM,IAKnCwB,EAAS,QAAQC,GAAW,CACxB,KAAK,mBAAmBzB,CAAM,EAAEyB,CAAO,EAAI,EACvD,CAAS,EAED,KAAK,2BAA0B,EAC/B,KAAK,2BAA0B,EAGvC,CAKI,kBAAkBzB,EAAQwB,EAAW,KAAM,CAClC,KAAK,mBAAmBxB,CAAM,IAK/BwB,IAAa,OAEbA,EAAW,OAAO,KAAK,KAAK,mBAAmBxB,CAAM,CAAC,GAG1DwB,EAAS,QAAQC,GAAW,CACxB,KAAK,mBAAmBzB,CAAM,EAAEyB,CAAO,EAAI,EACvD,CAAS,EAED,KAAK,2BAA0B,EAC/B,KAAK,0BAAyB,EAGtC,CAKI,gBAAiB,CACb,OAAO,KAAK,MAAM,KAAK,UAAU,KAAK,kBAAkB,CAAC,CACjE,CAKI,YAAYK,EAAU,CAClB,KAAK,mBAAqB,CAAE,GAAG,KAAK,mBAAoB,GAAGA,CAAQ,EACnE,KAAK,2BAA0B,EAC/B,KAAK,2BAA0B,CAGvC,CAKI,eAAgB,CACZ,KAAK,mBAAqB,CACtB,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,EACY,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,CACA,EAEQ,KAAK,2BAA0B,EAC/B,KAAK,0BAAyB,CAGtC,CACA,CC7WO,MAAMS,CAAc,CACvB,aAAc,CAEV,KAAK,eAAiB,IAAI,IAC1B,KAAK,cAAgB,IAAI,IACzB,KAAK,WAAa,IAAI,IACtB,KAAK,OAAS,IAAI,IAClB,KAAK,aAAe,IAAI,IAGxB,KAAK,SAAW,IAAI,IACpB,KAAK,UAAY,IAAI,IACrB,KAAK,mBAAqB,IAAI,IAG9B,KAAK,QAAU,CACX,oBAAqB,EACrB,sBAAuB,EACvB,wBAAyB,EACzB,qBAAsB,EACtB,cAAe,EACf,oBAAqB,CACjC,EAGQ,KAAK,cAAgB,CACjB,aAAc,EACd,aAAc,EACd,UAAW,EACX,QAAS,EACT,eAAgB,CAAA,CAC5B,EAGQ,KAAK,iBAAmB,IAAI,IAG5B,KAAK,YAAc,GACnB,KAAK,kBAAoB,GAGzB,KAAK,qBAAoB,CACjC,CAMI,sBAAuB,CACf,OAAO,OAAW,KAAe,OAAO,aAAa,SACrD,KAAK,cAAc,aAAe,OAAO,YAAY,OAAO,eAGxE,CAKI,gBAAgBC,EAAa,IAAO,CAChC,GAAI,KAAK,kBAAmB,OAE5B,KAAK,kBAAoB,GAEzB,MAAMC,EAAqB,YAAY,IAAM,CACzC,KAAK,oBAAmB,EACxB,KAAK,YAAW,CAC5B,EAAWD,CAAU,EAEb,KAAK,cAAcC,CAAkB,CAG7C,CAKI,gBAAiB,CACb,KAAK,kBAAoB,EAEjC,CAMI,qBAAsB,CAClB,GAAI,OAAO,OAAW,KAAe,OAAO,aAAa,OAAQ,CAC7D,MAAMC,EAAS,OAAO,YAAY,OAClC,KAAK,cAAc,aAAeA,EAAO,eAErC,KAAK,cAAc,aAAe,KAAK,cAAc,YACrD,KAAK,cAAc,UAAY,KAAK,cAAc,aAElE,CACA,CAMI,aAAc,CACV,MAAMC,EAAa,CACf,eAAgB,IAChB,SAAU,GACV,WAAY,EACxB,EAEcC,EAAS,CAAA,EAcf,GAZI,KAAK,eAAe,KAAOD,EAAW,gBACtCC,EAAO,KAAK,8BAA8B,KAAK,eAAe,IAAI,EAAE,EAGpE,KAAK,SAAS,KAAOD,EAAW,UAChCC,EAAO,KAAK,uBAAuB,KAAK,SAAS,IAAI,EAAE,EAGvD,KAAK,mBAAmB,KAAOD,EAAW,YAC1CC,EAAO,KAAK,yBAAyB,KAAK,mBAAmB,IAAI,EAAE,EAGnEA,EAAO,OAAS,EAAG,CACnB,MAAMC,EAAO,CACT,UAAW,KAAK,IAAG,EACnB,OAAQD,EACR,YAAa,KAAK,cAAc,YAChD,EAEY,KAAK,cAAc,eAAe,KAAKC,CAAI,CAEvD,CACA,CAOI,iBAAiB1B,EAASP,EAAOQ,EAAS0B,EAAU,GAAO,CACvD,GAAI,KAAK,YAEL,OAGJ3B,EAAQ,iBAAiBP,EAAOQ,EAAS0B,CAAO,EAEhD,MAAMC,EAAe,CACjB,QAAA5B,EACA,MAAAP,EACA,QAAAQ,EACA,QAAA0B,EACA,UAAW,KAAK,IAAG,CAC/B,EAEQ,YAAK,eAAe,IAAIC,CAAY,EACpC,KAAK,QAAQ,sBAENA,CACf,CAQI,oBAAoBC,EAAuBpC,EAAQ,KAAMQ,EAAU,KAAM,CAErE,GAAI4B,GAAyB,OAAOA,GAA0B,UAC1DA,EAAsB,SAAWA,EAAsB,MAAO,CAC9D,MAAMD,EAAeC,EACjB,KAAK,eAAe,IAAID,CAAY,IACpCA,EAAa,QAAQ,oBACjBA,EAAa,MACbA,EAAa,QACbA,EAAa,OACjC,EACgB,KAAK,eAAe,OAAOA,CAAY,EACvC,KAAK,QAAQ,yBAEjB,MACZ,CAGQ,GAAIC,GAAyBpC,GAASQ,EAAS,CAC3C,MAAMD,EAAU6B,EAGhB,UAAWD,KAAgB,KAAK,eAC5B,GAAIA,EAAa,UAAY5B,GACzB4B,EAAa,QAAUnC,GACvBmC,EAAa,UAAY3B,EAAS,CAElCD,EAAQ,oBAAoBP,EAAOQ,EAAS2B,EAAa,OAAO,EAChE,KAAK,eAAe,OAAOA,CAAY,EACvC,KAAK,QAAQ,wBACb,KACpB,CAEA,CACA,CAMI,uBAAwB,CAGpB,UAAWA,KAAgB,KAAK,eAC5B,GAAI,CACAA,EAAa,QAAQ,oBACjBA,EAAa,MACbA,EAAa,QACbA,EAAa,OACjC,CACA,MAA4B,CAE5B,CAGQ,KAAK,eAAe,MAAK,CACjC,CAOI,qBAAqBE,EAAcC,EAAa,UAAW,CACvD,GAAI,KAAK,YAEL,OAGJ,MAAMC,EAAW,CACb,SAAUF,EACV,WAAAC,EACA,UAAW,KAAK,IAAG,EACnB,WAAYD,EAAa,QAAQ,QAAQ,YAAc,CACnE,EAEQ,YAAK,cAAc,IAAIE,CAAQ,EAGxBA,CACf,CAKI,uBAAuBA,EAAU,CACzBA,GAAY,KAAK,cAAc,IAAIA,CAAQ,GAC3C,KAAK,cAAc,OAAOA,CAAQ,CAG9C,CAKI,oBAAqB,CACjB,IAAIC,EAAmB,EACnBC,EAAiB,EAErB,UAAWF,KAAY,KAAK,cAIxB,GAHAE,IAGIF,EAAS,UAAU,SAAS,iBAC5B,GAAI,CACAC,GAAoBD,EAAS,SAAS,QAAQ,iBAAgB,CAClF,MAAgC,CAEZC,GAAoBD,EAAS,YAAc,CAC/D,MAEgBC,GAAoBD,EAAS,YAAc,EAInD,MAAO,CACH,eAAAE,EACA,iBAAAD,CACZ,CACA,CAKI,qBAAqBH,EAAcC,EAAa,UAAW,CACvD,GAAI,KAAK,YAEL,OAGJ,MAAMC,EAAW,CACb,SAAUF,EACV,WAAAC,EACA,UAAW,KAAK,IAAG,EACnB,WAAYD,EAAa,QAAQ,QAAQ,YAAc,CACnE,EAEQ,YAAK,cAAc,IAAIE,CAAQ,EAC/B,KAAK,QAAQ,0BAGNA,CACf,CAMI,sBAAuB,CAGnB,UAAWA,KAAY,KAAK,cACxB,GAAI,CAEIA,EAAS,UAAU,MACnBA,EAAS,SAAS,KAAI,EAGtBA,EAAS,UAAU,SAAS,SAC5BA,EAAS,SAAS,QAAQ,QAAO,CAErD,MAA4B,CAE5B,CAGQ,KAAK,cAAc,MAAK,CAChC,CAOI,kBAAkBG,EAAMC,EAAW,CAC/B,GAAI,MAAK,YAKT,YAAK,WAAW,IAAID,EAAMC,CAAS,EACnC,KAAK,QAAQ,uBAGNA,CACf,CAKI,oBAAoBD,EAAM,CACtB,GAAI,KAAK,WAAW,IAAIA,CAAI,EAAG,CAC3B,MAAMC,EAAY,KAAK,WAAW,IAAID,CAAI,EAC1C,YAAK,WAAW,OAAOA,CAAI,EAEpBC,CACnB,CACA,CAMI,mBAAoB,CAGhB,SAAW,CAACD,EAAMC,CAAS,IAAK,KAAK,WACjC,GAAI,CAEIA,GAAW,SACXA,EAAU,QAAO,CAErC,MAA4B,CAE5B,CAGQ,KAAK,WAAW,MAAK,CAC7B,CAOI,WAAWC,EAAUC,KAAUC,EAAM,CACjC,GAAI,KAAK,YAEL,OAAO,KAGX,MAAMC,EAAY,WAAW,IAAM,CAC/B,KAAK,SAAS,OAAOA,CAAS,EAC9BH,EAAS,GAAGE,CAAI,CAC5B,EAAWD,CAAK,EAER,YAAK,SAAS,IAAIE,CAAS,EACpBA,CACf,CAKI,YAAYH,EAAUI,KAAaF,EAAM,CACrC,GAAI,KAAK,YAEL,OAAO,KAGX,MAAMG,EAAa,YAAYL,EAAUI,EAAU,GAAGF,CAAI,EAC1D,YAAK,UAAU,IAAIG,CAAU,EACtBA,CACf,CAKI,cAAcA,EAAY,CACtB,KAAK,UAAU,IAAIA,CAAU,CACrC,CAKI,aAAaF,EAAW,CACpB,aAAaA,CAAS,EACtB,KAAK,SAAS,OAAOA,CAAS,CACtC,CAKI,cAAcE,EAAY,CACtB,cAAcA,CAAU,EACxB,KAAK,UAAU,OAAOA,CAAU,CACxC,CAMI,iBAAkB,CAGd,UAAWF,KAAa,KAAK,SACzB,aAAaA,CAAS,EAE1B,KAAK,SAAS,MAAK,EAEnB,UAAWE,KAAc,KAAK,UAC1B,cAAcA,CAAU,EAE5B,KAAK,UAAU,MAAK,CAC5B,CAOI,cAAcC,EAAU,CACpB,YAAK,aAAa,IAAIA,CAAQ,EACvBA,CACf,CAKI,uBAAuBN,EAAUO,EAAQjB,EAAS,CAC9C,MAAMgB,EAAW,IAAI,iBAAiBN,CAAQ,EAC9C,OAAAM,EAAS,QAAQC,EAAQjB,CAAO,EAChC,KAAK,cAAcgB,CAAQ,EACpBA,CACf,CAKI,qBAAqBN,EAAUO,EAAQ,CACnC,GAAI,OAAO,eAAmB,IAE1B,OAAO,KAGX,MAAMD,EAAW,IAAI,eAAeN,CAAQ,EAC5C,OAAAM,EAAS,QAAQC,CAAM,EACvB,KAAK,cAAcD,CAAQ,EACpBA,CACf,CAMI,kBAAmB,CAGf,UAAWA,KAAY,KAAK,aACxB,GAAI,CACAA,EAAS,WAAU,CACnC,MAA4B,CAE5B,CAGQ,KAAK,aAAa,MAAK,CAC/B,CAOI,kBAAkBE,EAAUC,EAAgB,OAAQf,EAAa,UAAW,CACxE,MAAMC,EAAW,CACb,SAAAa,EACA,cAAAC,EACA,WAAAf,EACA,UAAW,KAAK,IAAG,EACnB,WAAYc,EAAS,QAAQ,QAAQ,YAAc,CAC/D,EAEQ,YAAK,cAAc,IAAIb,CAAQ,EAGxBA,CACf,CAMI,sBAAuB,CAGnB,UAAWA,KAAY,KAAK,cACxB,GAAI,CACIA,EAAS,UAAY,OAAOA,EAAS,SAASA,EAAS,aAAa,GAAM,YAC1EA,EAAS,SAASA,EAAS,aAAa,EAAC,CAE7D,MAA4B,CAE5B,CAGQ,KAAK,cAAc,MAAK,CAChC,CAOI,eAAeI,EAAWU,EAAgB,UAAWf,EAAa,KAAM,CACpE,GAAI,KAAK,YAEL,OAGJ,MAAMgB,EAAgB,CAClB,UAAAX,EACA,cAAAU,EACA,KAAMV,EAAU,YAAY,KAC5B,WAAYL,GAAcK,EAAU,YAAY,KAChD,UAAW,KAAK,IAAG,CAC/B,EAEQ,YAAK,mBAAmB,IAAIW,CAAa,EAGlCA,CACf,CAKI,iBAAiBA,EAAe,CAC5B,KAAK,mBAAmB,OAAOA,CAAa,CACpD,CAMI,mBAAoB,CAGhB,UAAWA,KAAiB,KAAK,mBAC7B,GAAI,CACIA,EAAc,WAAa,OAAOA,EAAc,UAAUA,EAAc,aAAa,GAAM,YAC3FA,EAAc,UAAUA,EAAc,aAAa,EAAC,CAExE,MAA4B,CAE5B,CAGQ,KAAK,mBAAmB,MAAK,CACrC,CAOI,mBAAmBV,EAAUW,EAAc,iBAAkB,CACzD,MAAMC,EAAe,CACjB,SAAAZ,EACA,YAAAW,EACA,UAAW,KAAK,IAAG,CAC/B,EAEQ,YAAK,iBAAiB,IAAIC,CAAY,EAG/BA,CACf,CAKI,sBAAsBA,EAAc,CAChC,KAAK,iBAAiB,OAAOA,CAAY,CACjD,CAMI,yBAA0B,CAGtB,UAAWA,KAAgB,KAAK,iBAC5B,GAAI,CACAA,EAAa,SAAQ,CACrC,MAA4B,CAE5B,CAGQ,KAAK,iBAAiB,MAAK,CACnC,CAOI,wBAAyB,CACjB,OAAO,OAAW,KAAe,OAAO,KACxC,OAAO,GAAE,EACT,KAAK,cAAc,UAK/B,CAKI,gBAAiB,CAGb,MAAMC,EAAc,KAAK,eAAc,EAGvC,KAAK,eAAc,EAGnB,KAAK,uBAAsB,EAE3B,MAAMC,EAAa,KAAK,eAAc,EAChCC,EAAQF,EAAcC,EAE5B,OAAIC,EAAQ,EAILA,CACf,CAKI,gBAAiB,CAEa,MAAM,KAAK,KAAK,QAAQ,EAAE,OAAOC,GAEhD,EACV,EAGsB,MAAM,KAAK,KAAK,kBAAkB,EAAE,OAAOC,GACvD,CAACA,EAAK,WAAaA,EAAK,UAAU,WAC5C,EAEc,QAAQA,GAAQ,KAAK,mBAAmB,OAAOA,CAAI,CAAC,CAG3E,CAOI,gBAAiB,CACb,OAAI,OAAO,OAAW,KAAe,OAAO,aAAa,OAC9C,OAAO,YAAY,OAAO,eAE9B,CACf,CAKI,iBAAkB,CACd,YAAK,oBAAmB,EAET,CACX,UAAW,KAAK,IAAG,EACnB,OAAQ,CACJ,QAAS,KAAK,cAAc,aAC5B,QAAS,KAAK,cAAc,aAC5B,KAAM,KAAK,cAAc,UACzB,SAAU,KAAK,cAAc,aAAe,KAAK,cAAc,YAC/E,EACY,UAAW,CACP,eAAgB,KAAK,eAAe,KACpC,SAAU,KAAK,SAAS,KACxB,UAAW,KAAK,UAAU,KAC1B,UAAW,KAAK,aAAa,KAC7B,cAAe,KAAK,cAAc,KAClC,WAAY,KAAK,mBAAmB,KACpC,iBAAkB,KAAK,iBAAiB,IACxD,EACY,QAAS,KAAK,cAAc,QAC5B,eAAgB,KAAK,cAAc,eAAe,OAClD,YAAa,KAAK,WAC9B,CAGA,CAKI,iBAAkB,CACd,MAAMC,EAAS,KAAK,gBAAe,CAoB3C,CAMI,YAAYC,EAAO,CACf,GAAIA,IAAU,EAAG,MAAO,MAExB,MAAMC,EAAQ,CAAC,IAAK,KAAM,KAAM,IAAI,EAC9BC,EAAI,KAAK,MAAM,KAAK,IAAIF,CAAK,EAAI,KAAK,IAAI,IAAI,CAAC,EAErD,MAAO,IAAIA,EAAQ,KAAK,IAAI,KAAME,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAID,EAAMC,CAAC,CAAC,EACpE,CAOI,SAAU,CACN,GAAI,KAAK,YAEL,OAKJ,MAAMC,EAAY,YAAY,IAAG,EAEjC,GAAI,CAEA,KAAK,eAAc,EAGnB,KAAK,wBAAuB,EAG5B,KAAK,kBAAiB,EACtB,KAAK,qBAAoB,EACzB,KAAK,sBAAqB,EAC1B,KAAK,gBAAe,EACpB,KAAK,iBAAgB,EAGrB,KAAK,uBAAsB,EAG3B,KAAK,YAAc,GAEnB,MAAMC,EAAc,YAAY,IAAG,EAAKD,CAGpD,MAAwB,CAExB,CACA,CAOI,yBAA0B,CACtB,OAAO,KAAK,eAAe,KACpB,KAAK,cAAc,KACnB,KAAK,WAAW,KAChB,KAAK,OAAO,IAC3B,CAKI,UAAW,CACP,OAAO,KAAK,cAAc,eAAe,OAAS,CAC1D,CAKI,uBAAuB3B,EAAU,CAC7B,GAAIA,GAAY,KAAK,cAAc,IAAIA,CAAQ,EAAG,CAE9C,GAAI,CACIA,EAAS,UAAU,MACnBA,EAAS,SAAS,KAAI,EAEtBA,EAAS,UAAU,SAAS,SAC5BA,EAAS,SAAS,QAAQ,QAAO,CAErD,MAA4B,CAE5B,CAEY,KAAK,cAAc,OAAOA,CAAQ,CAE9C,CACA,CACA,CC12BO,MAAM6B,CAAuB,CAChC,YAAYC,EAAS,GAAI,CACrB,KAAK,OAAS,CACV,SAAUA,EAAO,UAAY,CAAA,EAC7B,SAAUA,EAAO,UAAY,CAAA,EAC7B,kBAAmBA,EAAO,oBAAsB,GAChD,eAAgBA,EAAO,iBAAmB,GAC1C,eAAgBA,EAAO,iBAAmB,EACtD,EAGQ,KAAK,cAAgB,IAAI,IACzB,KAAK,aAAe,IAAI,IACxB,KAAK,gBAAkB,IAAI,IAG3B,KAAK,eAAiB,CAClB,UAAW,KACX,QAAS,KACT,aAAc,EACd,UAAW,EACX,kBAAmB,CAC/B,EAGQ,KAAK,mBAAqB,KAAK,6BAA4B,CACnE,CAMI,8BAA+B,CAC3B,MAAO,CAEH,UAAa,CAAC,aAAc,QAAS,gBAAgB,EACrD,UAAa,CAAC,aAAc,oBAAqB,YAAY,EAC7D,aAAgB,CAAC,gBAAiB,uBAAwB,eAAe,EACzE,uBAA0B,CAAC,iBAAkB,mBAAoB,eAAe,EAChF,WAAc,CAAC,cAAe,SAAU,YAAY,EACpD,YAAe,CAAC,eAAgB,gBAAiB,cAAc,EAC/D,SAAY,CAAC,YAAa,gBAAiB,WAAW,EACtD,YAAe,CAAC,eAAgB,aAAc,OAAO,EACrD,WAAc,CAAC,WAAY,eAAgB,YAAY,EACvD,QAAW,CAAC,OAAQ,YAAa,MAAM,EACvC,cAAiB,CAAC,cAAe,cAAe,cAAc,EAC9D,QAAW,CAAC,OAAQ,YAAa,aAAa,EAC9C,cAAiB,CAAC,aAAc,QAAS,iBAAiB,CACtE,CACA,CAMI,MAAM,cAAe,CACjB,KAAK,eAAe,UAAY,YAAY,IAAG,EAE/C,GAAI,CAIA,YAAK,cAAa,EAGlB,MAAM,KAAK,qBAAoB,EAG/B,MAAM,KAAK,qBAAoB,EAG3B,KAAK,OAAO,mBACZ,KAAK,0BAAyB,EAIlC,KAAK,gBAAe,EAEb,KAAK,kBAAiB,CAEzC,OAAiBC,EAAO,CAEZ,MAAMA,CAClB,CACA,CAMI,eAAgB,CACZ,KAAK,cAAc,MAAK,EACxB,KAAK,gBAAgB,MAAK,EAC1B,KAAK,eAAe,aAAe,EACnC,KAAK,eAAe,UAAY,EAChC,KAAK,eAAe,kBAAoB,CAChD,CAMI,MAAM,sBAAuB,CAGzB,UAAWxD,KAAa,KAAK,OAAO,SAChB,MAAM,KAAK,wBAAwBA,EAAW,EAAI,GAG9D,KAAK,gBAAgB,IAAIA,CAAS,EAM1C,GAAI,KAAK,gBAAgB,KAAO,EAAG,CAC/B,MAAMyD,EAAW,MAAM,KAAK,KAAK,eAAe,EAAE,OAAOX,GACrD,CAAC,YAAa,YAAY,EAAE,SAASA,CAAE,CACvD,EAEY,GAAIW,EAAS,OAAS,EAClB,MAAM,IAAI,MAAM,8BAA8BA,EAAS,KAAK,IAAI,CAAC,EAAE,CAEnF,CACA,CAMI,MAAM,sBAAuB,CAGzB,UAAWzD,KAAa,KAAK,OAAO,SAChC,MAAM,KAAK,wBAAwBA,EAAW,EAAK,CAE/D,CAMI,MAAM,wBAAwBA,EAAW0D,EAAa,GAAO,CACzD,KAAK,eAAe,eAGpB,IAAIjE,EAAU,KAAK,YAAYO,CAAS,EAGxC,MAAI,CAACP,GAAW,KAAK,OAAO,iBACxBA,EAAU,KAAK,sBAAsBO,CAAS,EAE1CP,GACA,KAAK,eAAe,qBAMxBA,EACA,KAAK,cAAc,IAAIO,EAAWP,CAAO,EAGzC,KAAK,cAAc,IAAIO,EAAW,IAAI,EASnCP,CACf,CAMI,YAAYO,EAAW,CAEnB,GAAI,KAAK,OAAO,gBAAkB,KAAK,aAAa,IAAIA,CAAS,EAC7D,YAAK,eAAe,YACb,KAAK,aAAa,IAAIA,CAAS,EAI1C,MAAMP,EAAU,SAAS,eAAeO,CAAS,EAGjD,OAAI,KAAK,OAAO,gBACZ,KAAK,aAAa,IAAIA,EAAWP,CAAO,EAGrCA,CACf,CAMI,sBAAsBO,EAAW,CAC7B,MAAM2D,EAAa,KAAK,mBAAmB3D,CAAS,EACpD,GAAI,CAAC2D,EAAY,OAAO,KAExB,UAAWC,KAAcD,EAAY,CACjC,MAAMlE,EAAU,SAAS,eAAemE,CAAU,EAClD,GAAInE,EAEA,OAAOA,CAEvB,CAGQ,OAAO,KAAK,sBAAsBO,CAAS,CACnD,CAMI,sBAAsBA,EAAW,CAS7B,MAAM6D,EARgB,CAClB,UAAa,CAAC,cAAe,SAAU,iBAAiB,EACxD,WAAc,CAAC,YAAa,eAAgB,YAAY,EACxD,QAAW,CAAC,QAAS,WAAW,EAChC,QAAW,CAAC,QAAS,WAAW,EAChC,cAAiB,CAAC,cAAe,YAAY,CACzD,EAEuC7D,CAAS,EACxC,GAAI,CAAC6D,EAAU,OAAO,KAEtB,UAAWC,KAAWD,EAAU,CAC5B,MAAMpE,EAAU,SAAS,cAAcqE,CAAO,EAC9C,GAAIrE,EAEA,OAAOA,CAEvB,CAEQ,OAAO,IACf,CAMI,2BAA4B,CAUxB,MAAMsE,EAPc,CAChB,KAAK,kBAAiB,EACtB,KAAK,4BAA2B,EAChC,KAAK,mBAAkB,EACvB,KAAK,uBAAsB,CACvC,EAEqC,OAAOC,GAAU,CAACA,EAAO,KAAK,EAEvDD,EAAS,OAAS,GAElBA,EAAS,QAAQE,GAAW,CAExC,CAAa,CAIb,CAMI,mBAAoB,CAChB,MAAMjG,EAAY,KAAK,cAAc,IAAI,WAAW,EAEpD,GAAI,CAACA,EACD,MAAO,CAAE,MAAO,GAAO,QAAS,4BAA4B,EAIhE,MAAMkG,EAAQlG,EAAU,iBAAiB,mBAAmB,EACtDmG,EAAgB,GAEtB,OAAID,EAAM,OAAS,GAAKA,EAAM,SAAWC,EAC9B,CACH,MAAO,GACP,QAAS,YAAYA,CAAa,uBAAuBD,EAAM,MAAM,EACrF,EAGe,CAAE,MAAO,EAAI,CAC5B,CAMI,6BAA8B,CAC1B,MAAME,EAAY,KAAK,cAAc,IAAI,WAAW,EAC9CC,EAAe,KAAK,cAAc,IAAI,cAAc,EAE1D,GAAI,CAACD,GAAa,CAACC,EACf,MAAO,CAAE,MAAO,GAAO,QAAS,8BAA8B,EAIlE,GAAID,EAAW,CACX,MAAME,EAASF,EAAU,iBAAiB,QAAQ,EAClD,GAAIE,EAAO,OAAS,GAAKA,EAAO,SAAW,EACvC,MAAO,CACH,MAAO,GACP,QAAS,qCAAqCA,EAAO,MAAM,EAC/E,CAEA,CAEQ,MAAO,CAAE,MAAO,EAAI,CAC5B,CAMI,oBAAqB,CAEjB,MAAMC,EADmB,CAAC,YAAY,EACG,OAAOC,GAC5C,CAAC,KAAK,cAAc,IAAIA,CAAO,CAC3C,EAEQ,OAAID,EAAgB,OAAS,EAClB,CACH,MAAO,GACP,QAAS,+BAA+BA,EAAgB,KAAK,IAAI,CAAC,EAClF,EAGe,CAAE,MAAO,EAAI,CAC5B,CAMI,wBAAyB,CAIrB,MAHe,CAAC,YAAa,iBAAiB,EACnB,OAAOE,GAAS,KAAK,cAAc,IAAIA,CAAK,CAAC,EAExD,SAAW,EAChB,CACH,MAAO,GACP,QAAS,oDACzB,EAGe,CAAE,MAAO,EAAI,CAC5B,CAMI,iBAAkB,CACd,KAAK,eAAe,QAAU,YAAY,IAAG,EAC7C,MAAMC,EAAc,KAAK,eAAe,QAAU,KAAK,eAAe,UAEhEC,EAAa,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAAOC,GAAMA,IAAO,IAAI,EAAE,OAC/EC,EAAa,KAAK,eAAe,aAQnC,KAAK,gBAAgB,KAAO,CAGxC,CAKI,mBAAoB,CAChB,MAAM9F,EAAW,CAAA,EACjB,SAAW,CAAC+F,EAAKC,CAAK,IAAK,KAAK,cAC5BhG,EAAS+F,CAAG,EAAIC,EAEpB,OAAOhG,CACf,CAKI,WAAWiB,EAAW,CAClB,OAAO,KAAK,cAAc,IAAIA,CAAS,GAAK,IACpD,CAKI,WAAWA,EAAW,CAClB,OAAO,KAAK,cAAc,IAAIA,CAAS,GAAK,KAAK,cAAc,IAAIA,CAAS,IAAM,IAC1F,CAKI,kBAAmB,CACf,MAAMgF,EAAQ,CAAA,EACd,SAAW,CAACF,EAAKC,CAAK,IAAK,KAAK,cACxBA,IAAU,OACVC,EAAMF,CAAG,EAAIC,GAGrB,OAAOC,CACf,CAKI,YAAa,CACT,MAAO,CAAE,GAAG,KAAK,cAAc,CACvC,CAKI,MAAM,cAAchF,EAAW,CAIvB,KAAK,OAAO,gBACZ,KAAK,aAAa,OAAOA,CAAS,EAItC,MAAMiF,EAAc,KAAK,OAAO,SAAS,SAASjF,CAAS,EAG3D,OAFgB,MAAM,KAAK,wBAAwBA,EAAWiF,CAAW,CAGjF,CAKI,WAAWjF,EAAW0D,EAAa,GAAO,CACtC,OAAIA,EACK,KAAK,OAAO,SAAS,SAAS1D,CAAS,GACxC,KAAK,OAAO,SAAS,KAAKA,CAAS,EAGlC,KAAK,OAAO,SAAS,SAASA,CAAS,GACxC,KAAK,OAAO,SAAS,KAAKA,CAAS,EAKpC,KAAK,wBAAwBA,EAAW0D,CAAU,CACjE,CAKI,YAAa,CACT,KAAK,aAAa,MAAK,EACvB,KAAK,eAAe,UAAY,CAExC,CAKI,SAAU,CACN,KAAK,cAAc,MAAK,EACxB,KAAK,aAAa,MAAK,EACvB,KAAK,gBAAgB,MAAK,EAG1B,KAAK,eAAiB,CAClB,UAAW,KACX,QAAS,KACT,aAAc,EACd,UAAW,EACX,kBAAmB,CAC/B,CAGA,CACA,CC3eO,MAAMwB,CAAuB,CAChC,YAAYpG,EAAe,CACvB,KAAK,cAAgBA,EAGrB,KAAK,kBAAoB,IACzB,KAAK,cAAgB,IACrB,KAAK,iBAAmB,IAGxB,KAAK,iBAAmB,IAAI,IAC5B,KAAK,eAAiB,IAAI,IAG1B,KAAK,eAAiB,KACtB,KAAK,YAAc,EAC3B,CAKI,kBAAkBb,EAAKC,EAAKI,EAAQ,CAChC,MAAMH,EAAe,KAAK,cAAc,kBAAkBF,EAAKC,CAAG,EAClE,GAAI,CAACC,EAAc,OAEnB,MAAMK,EAAQL,EAAa,cAAc,QAAQ,EACjD,GAAI,CAACK,EAAO,OAGZA,EAAM,UAAU,IAAI,SAAS,EAG7B,MAAM2G,EAAU,WAAW,IAAM,CAC7B3G,EAAM,UAAU,OAAO,SAAS,EAChC,KAAK,eAAe,OAAO2G,CAAO,CAC9C,EAAW,KAAK,iBAAiB,EAKzB,GAHA,KAAK,eAAe,IAAIA,CAAO,EAG3B,KAAK,mBAAmBlH,EAAKC,CAAG,EAAG,CACnCM,EAAM,UAAU,IAAI,iBAAiB,EAErC,MAAM4G,EAAiB,WAAW,IAAM,CACpC5G,EAAM,UAAU,OAAO,iBAAiB,EACxC,KAAK,eAAe,OAAO4G,CAAc,CACzD,EAAe,KAAK,kBAAoB,GAAG,EAE/B,KAAK,eAAe,IAAIA,CAAc,CAClD,CAGA,CAKI,qBAAqBC,EAAQ,CAIzB,GAAI,KAAK,MAAQ,KAAK,KAAK,eAAgB,CACvC,MAAMC,EAAc,KAAK,KAAK,eAAc,EACxCA,GAAeA,EAAY,OAAS,GACpC,KAAK,qBAAqBA,CAAW,CAErD,CAGQ,KAAK,yBAAyBD,CAAM,EAGpC,KAAK,mBAAmBA,CAAM,CACtC,CAKI,qBAAqBzG,EAAW,CACvB,MAAM,QAAQA,CAAS,GAK5BA,EAAU,QAAQ,CAAC8B,EAAU6E,IAAU,CACnC,MAAMJ,EAAU,WAAW,IAAM,CAC7B,IAAIlH,EAAKC,EAEL,MAAM,QAAQwC,CAAQ,EACtB,CAACzC,EAAKC,CAAG,EAAIwC,GAEbzC,EAAMyC,EAAS,IACfxC,EAAMwC,EAAS,KAGnB,MAAMvC,EAAe,KAAK,cAAc,kBAAkBF,EAAKC,CAAG,EAC9DC,IACAA,EAAa,UAAU,IAAI,eAAe,EAC1C,KAAK,cAAc,qBAAqBS,CAAS,GAGrD,KAAK,eAAe,OAAOuG,CAAO,CAClD,EAAeI,EAAQ,GAAG,EAEd,KAAK,eAAe,IAAIJ,CAAO,CAC3C,CAAS,CACT,CAKI,yBAAyBE,EAAQ,CAE7B,MAAMG,EAASH,IAAW,EACpB,CAAC,UAAW,UAAW,UAAW,SAAS,EAC3C,CAAC,UAAW,UAAW,UAAW,SAAS,EAEjD,KAAK,YAAc,GAGnB,MAAMI,EAAY,KAAK,cAAc,UAAU,sBAAqB,EAC9DC,EAAUD,EAAU,KAAOA,EAAU,MAAQ,EAC7CE,EAAUF,EAAU,IAAMA,EAAU,OAAS,EAGnD,KAAK,oBAAoBC,EAASC,EAASH,CAAM,EAGjD,MAAMI,EAAc,WAAW,IAAM,CACjC,KAAK,wBAAuB,EAC5B,KAAK,eAAe,OAAOA,CAAW,CAClD,EAAW,KAAK,gBAAgB,EAExB,KAAK,eAAe,IAAIA,CAAW,CAG3C,CAKI,oBAAoBF,EAASC,EAASH,EAAQ,CAC1C,QAASrC,EAAI,EAAGA,EAAI,KAAK,cAAeA,IAAK,CACzC,MAAMgC,EAAU,WAAW,IAAM,CAC7B,KAAK,uBAAuBO,EAASC,EAASH,CAAM,EACpD,KAAK,eAAe,OAAOL,CAAO,CAClD,EAAe,KAAK,OAAM,EAAK,GAAI,EAEvB,KAAK,eAAe,IAAIA,CAAO,CAC3C,CACA,CAKI,uBAAuBO,EAASC,EAASH,EAAQ,CAC7C,MAAMK,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,oBAGrB,MAAMC,EAAQN,EAAO,KAAK,MAAM,KAAK,OAAM,EAAKA,EAAO,MAAM,CAAC,EAGxDO,EAAO,KAAK,OAAM,EAAK,EAAI,EAEjC,OAAO,OAAOF,EAAS,MAAO,CAC1B,SAAU,QACV,MAAO,GAAGE,CAAI,KACd,OAAQ,GAAGA,CAAI,KACf,WAAYD,EACZ,KAAM,GAAGJ,GAAW,KAAK,SAAW,IAAO,GAAG,KAC9C,IAAK,GAAGC,GAAW,KAAK,SAAW,IAAO,EAAE,KAC5C,OAAQ,OACR,cAAe,OACf,aAAc,KAAK,OAAM,EAAK,GAAM,MAAQ,IAC5C,UAAW,kCACvB,CAAS,EAED,SAAS,KAAK,YAAYE,CAAQ,EAGlC,MAAMG,EAAgB,WAAW,IAAM,CAC/BH,EAAS,YACTA,EAAS,WAAW,YAAYA,CAAQ,EAE5C,KAAK,eAAe,OAAOG,CAAa,CACpD,EAAW,GAAI,EAEP,KAAK,eAAe,IAAIA,CAAa,CAC7C,CAKI,yBAA0B,CACtB,KAAK,YAAc,GAGD,SAAS,iBAAiB,oBAAoB,EACtD,QAAQH,GAAY,CACtBA,EAAS,YACTA,EAAS,WAAW,YAAYA,CAAQ,CAExD,CAAS,CAGT,CAKI,mBAAmBR,EAAQ,CACvB,MAAMY,EAAaZ,IAAW,EAAI,UAAY,OAGxCa,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,kBACpBA,EAAQ,UAAY;AAAA;AAAA,yBAEHD,CAAU;AAAA;AAAA;AAAA,UAK3B,OAAO,OAAOC,EAAQ,MAAO,CACzB,SAAU,QACV,IAAK,IACL,KAAM,IACN,MAAO,OACP,OAAQ,OACR,WAAY,qBACZ,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,OAAQ,MACR,UAAW,0DACvB,CAAS,EAGD,MAAMC,EAAUD,EAAQ,cAAc,kBAAkB,EACxD,OAAO,OAAOC,EAAQ,MAAO,CACzB,WAAY,QACZ,QAAS,OACT,aAAc,OACd,UAAW,SACX,MAAO,OACP,UAAW,gCACvB,CAAS,EAED,SAAS,KAAK,YAAYD,CAAO,EAGjC,MAAMF,EAAgB,WAAW,IAAM,CAC/BE,EAAQ,YACRA,EAAQ,WAAW,YAAYA,CAAO,EAE1C,KAAK,eAAe,OAAOF,CAAa,CACpD,EAAW,GAAI,EAEP,KAAK,eAAe,IAAIA,CAAa,CAG7C,CAKI,qBAAqBpH,EAAW,CACvB,MAAM,QAAQA,CAAS,GAE5BA,EAAU,QAAQ8B,GAAY,CAC1B,IAAIzC,EAAKC,EAEL,MAAM,QAAQwC,CAAQ,EACtB,CAACzC,EAAKC,CAAG,EAAIwC,GAEbzC,EAAMyC,EAAS,IACfxC,EAAMwC,EAAS,KAGnB,MAAMvC,EAAe,KAAK,cAAc,kBAAkBF,EAAKC,CAAG,EAClE,GAAIC,EAAc,CACdA,EAAa,UAAU,IAAI,kBAAkB,EAG7C,MAAMgH,EAAU,WAAW,IAAM,CAC7BhH,EAAa,UAAU,OAAO,kBAAkB,EAChD,KAAK,eAAe,OAAOgH,CAAO,CACtD,EAAmB,GAAI,EAEP,KAAK,eAAe,IAAIA,CAAO,CAC/C,CACA,CAAS,CAGT,CAKI,sBAAuB,CACnB,GAAI,CAAC,KAAK,cAAc,UAAW,OAEnC,KAAK,cAAc,UAAU,UAAU,IAAI,gBAAgB,EAE3D,MAAMA,EAAU,WAAW,IAAM,CAC7B,KAAK,cAAc,UAAU,UAAU,OAAO,gBAAgB,EAC9D,KAAK,eAAe,OAAOA,CAAO,CAC9C,EAAW,GAAG,EAEN,KAAK,eAAe,IAAIA,CAAO,CAGvC,CAKI,iBAAkB,CAEd,KAAK,wBAAuB,EAG5B,KAAK,eAAe,QAAQA,GAAW,aAAaA,CAAO,CAAC,EAC5D,KAAK,eAAe,MAAK,EAGrB,KAAK,cAAc,WACM,KAAK,cAAc,UAAU,iBAAiB,sFAAsF,EAC5I,QAAQ1F,GAAW,CAChCA,EAAQ,UAAU,OAAO,UAAW,kBAAmB,gBAAiB,mBAAoB,sBAAsB,CAClI,CAAa,EAIY,SAAS,iBAAiB,kBAAkB,EACpD,QAAQyG,GAAW,CACpBA,EAAQ,YACRA,EAAQ,WAAW,YAAYA,CAAO,CAEtD,CAAS,CAGT,CAMI,mBAAmBjI,EAAKC,EAAK,CAEzB,OAAID,IAAQ,GAAKC,IAAQ,EAAU,GAGhB,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,EAAE,CAAC,EAC5C,KAAK,CAAC,CAACE,EAASC,CAAO,IAAMD,IAAYH,GAAOI,IAAYH,CAAG,CACzF,CAKI,qBAAqBkI,EAAU,CAC3B,KAAK,kBAAoB,KAAK,IAAI,IAAK,KAAK,IAAI,IAAMA,CAAQ,CAAC,CAEvE,CAKI,qBAAqBC,EAAS,CAC1B,KAAK,kBAAoBA,EAEpBA,GACD,KAAK,gBAAe,CAIhC,CAKI,mBAAoB,CAChB,OAAO,KAAK,aAAe,KAAK,eAAe,KAAO,CAC9D,CACA,CCrXO,MAAMC,UAAiBC,CAAW,CACrC,YAAY9H,EAAM,CAEd,MAAMA,EAAMd,CAAgB,EAG5B,KAAK,GAAK,KACV,KAAK,SAAW,aAChB,KAAK,iBAAmB,GACxB,KAAK,SAAW,EAChB,KAAK,OAAS,CAAE,MAAO,EAAG,MAAO,CAAC,EAGlC,KAAK,kBAAoB,IACzB,KAAK,gBAAkB,IAGvB,KAAK,mBAAqB,CACtB,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,EACY,QAAS,CACL,KAAM,GACN,QAAS,GACT,gBAAiB,GACjB,oBAAqB,EACrC,CACA,EAGQ,KAAK,gBAAkB,KAGvB,KAAK,gBAAkB,KACvB,KAAK,aAAe,KAGpB,KAAK,cAAgB,KACrB,KAAK,mBAAqB,KAC1B,KAAK,kBAAoB,KACzB,KAAK,cAAgB,KACrB,KAAK,uBAAyB,KAC9B,KAAK,iBAAmB,KAGxB,KAAK,YAAc,GAGnB,KAAK,mBAAqB,CAClC,CAKI,MAAM,YAAa,CACf,GAAI,KAAK,YAEL,OAMJ,MAAM6I,EAAc,SAAS,eAAe,UAAU,GAAG,OAAS,aAClE,KAAK,OAAS5I,EAAmB4I,CAAW,EAC5C,KAAK,SAAWA,CACxB,CAKI,WAAY,CACJ,KAAK,cAQT,KAAK,wBAAuB,EAG5B,KAAK,iCAAgC,EAGrC,KAAK,wBAAuB,EAG5B,KAAK,6BAA4B,EAGjC,KAAK,4BAA2B,EAGhC,KAAK,2BAA0B,EAG/B,KAAK,SAAQ,EAGb,KAAK,iBAAgB,EAGrB,OAAO,gBAAkB,IAAM,KAAK,gBAAe,EAGnD,KAAK,YAAc,GAE3B,CAOI,yBAA0B,CAItB,KAAK,cAAgB,IAAI3F,CAGjC,CAKI,kCAAmC,CAI/B,KAAK,uBAAyB,IAAIyC,EAAuB,KAAK,QAAQ,EAGlE,KAAK,eACL,KAAK,cAAc,eAAe,KAAK,sBAAsB,CAIzE,CAMI,yBAA0B,CACtB,MAAMtF,EAAY,KAAK,SAAS,UAE5B,CAACA,IAQL,KAAK,cAAgB,IAAID,EAAoBC,CAAS,EAGlD,KAAK,eACL,KAAK,cAAc,eAAe,KAAK,aAAa,EAIxC,KAAK,cAAc,gBAAe,EAO1D,CAMI,8BAA+B,CACtB,KAAK,gBAQV,KAAK,mBAAqB,IAAIa,EAC1B,KAAK,KACL,KAAK,cACL,KAAK,QACjB,EAGY,KAAK,eACL,KAAK,cAAc,eAAe,KAAK,kBAAkB,EAI7D,KAAK,mBAAmB,mBAAmB,CAACZ,EAAKC,IAAQ,CACrD,KAAK,SAASD,EAAKC,CAAG,CAClC,CAAS,EAGT,CAMI,6BAA8B,CACrB,KAAK,gBAQV,KAAK,kBAAoB,IAAI0B,EAAwB,KAAK,KAAM,KAAK,cAAe,KAAK,QAAQ,EAG7F,KAAK,eACL,KAAK,cAAc,eAAe,KAAK,iBAAiB,EAI5D,KAAK,kBAAkB,sBAAqB,EAGpD,CAKI,4BAA6B,CAIzB,KAAK,iBAAmB,IAAIsF,EAAuB,KAAK,aAAa,EAGjE,KAAK,eACL,KAAK,cAAc,eAAe,KAAK,gBAAgB,CAInE,CAQI,MAAM,SAASjH,EAAKC,EAAK,CACrB,GAAI,MAAK,iBAOT,MAAK,iBAAmB,GAExB,GAAI,CAEA,GAAI,CAAC,KAAK,MAAQ,OAAO,KAAK,KAAK,aAAgB,YAAc,CAAC,KAAK,KAAK,YAAYD,EAAKC,CAAG,EAAG,CAE/F,KAAK,iBAAmB,GACxB,MAChB,CAGY,MAAMuI,EAAa,KAAK,KAAK,SAASxI,EAAKC,CAAG,EAG9C,GAAIuI,GAAcA,EAAW,QAAS,CAElC,MAAMlH,EAAgB,KAAK,KAAK,iBAAgB,EAG5C,KAAK,eACL,KAAK,cAAc,WAAWtB,EAAKC,EAAKqB,CAAa,EAIrD,KAAK,kBACL,KAAK,iBAAiB,kBAAkBtB,EAAKC,EAAKqB,CAAa,EAInE,KAAK,SAAQ,EAGb,KAAK,2BAA0B,EAG3B,KAAK,MAAQ,OAAO,KAAK,KAAK,YAAe,YAAc,KAAK,KAAK,cAErE,KAAK,eAAc,EAInB,KAAK,WAAa,iBAAmB,CAAC,KAAK,KAAK,cAChD,WAAW,IAAM,CACb,KAAK,WAAU,CACvC,EAAuB,KAAK,eAAe,CAE3C,CACA,MAAwB,CAExB,QAAS,CACG,KAAK,iBAAmB,EACpC,EACA,CAKI,MAAM,YAAa,CACf,GAAI,GAAC,KAAK,MAAQ,KAAK,KAAK,cAAgB,KAAK,WAAa,iBAM9D,GAAI,CAEA,GAAI,KAAK,KAAK,WAAa,OAAO,KAAK,KAAK,WAAc,WAAY,CAClE,MAAMmH,EAAS,KAAK,KAAK,UAAS,EAClC,GAAIA,GAAUA,EAAO,MAAQ,QAAaA,EAAO,MAAQ,OAAW,CAChE,MAAM,KAAK,SAASA,EAAO,IAAKA,EAAO,GAAG,EAC1C,MACpB,CACA,CAGA,MAAwB,CAExB,CACA,CAKI,gBAAiB,CAGb,MAAMrB,EAAS,KAAK,KAAK,UAAS,EAElC,GAAIA,EAAQ,CACR,MAAMsB,EAAatB,IAAW,EAAI,UAAY,OAG1CA,IAAW,EACX,KAAK,OAAO,QAEZ,KAAK,OAAO,QAIZ,KAAK,kBACL,KAAK,iBAAiB,qBAAqBA,CAAM,EAIrD,KAAK,YAAY,MAAMsB,CAAU,YAAa,SAAS,EAGvD,KAAK,mBAAqBtB,CAEtC,MACY,KAAK,YAAY,oBAAqB,MAAM,EAKhD,KAAK,SAAQ,CACrB,CAOI,SAAU,CAEN,GAAI,KAAK,KAEL,GAAI,KAAK,KAAK,OAAS,OAAO,KAAK,KAAK,MAAM,4BAA+B,WAAY,CAErF,KAAK,KAAK,MAAM,2BAA2B,KAAK,kBAAkB,EAClE,MAAMuB,EAAc,KAAK,qBAAuB,EAAI,UAAY,OAIhE,KAAK,KAAK,YAAc,CAAA,EACxB,KAAK,KAAK,iBAAmB,GAC7B,KAAK,KAAK,WAAa,EACvB,KAAK,KAAK,gBAAkB,CAC5C,MAEgB,KAAK,KAAK,QAAO,EAMrB,KAAK,eACL,KAAK,cAAc,WAAU,EAI7B,KAAK,kBACL,KAAK,iBAAiB,gBAAe,EAIzC,KAAK,0BAAyB,EAC9B,KAAK,iBAAgB,EAGrB,KAAK,SAAQ,EAGb,MAAMA,EAAc,KAAK,qBAAuB,EAAI,UAAY,OAChE,KAAK,YAAY,6BAA6BA,CAAW,YAAa,MAAM,CACpF,CAKI,UAAW,CACP,GAAI,CACA,GAAI,CAAC,KAAK,MAAQ,OAAO,KAAK,KAAK,UAAa,WAE5C,OAGJ,MAAMC,EAAa,KAAK,KAAK,SAAQ,EACjCA,GAAcA,EAAW,SAIrB,KAAK,eACL,KAAK,cAAc,oBAAoB,KAAK,IAAI,EAIpD,KAAK,SAAQ,EACb,KAAK,2BAA0B,EAE/B,KAAK,YAAY,4BAA6B,MAAM,GAGpD,KAAK,YAAY,8BAA+B,SAAS,CAEzE,MAAwB,CAEZ,KAAK,YAAY,kCAAmC,OAAO,CACvE,CACA,CAOI,UAAW,CAEP,KAAK,6BAA4B,EAGjC,KAAK,iBAAgB,EAGrB,KAAK,aAAY,EAGb,KAAK,mBACL,KAAK,kBAAkB,2BAA0B,CAE7D,CAKI,8BAA+B,CAC3B,MAAMC,EAAY,KAAK,SAAS,uBAChC,GAAI,CAACA,GAAa,CAAC,KAAK,KAAM,OAE9B,MAAMvH,EAAgB,KAAK,KAAK,iBAAgB,EAC1C0G,EAAa1G,IAAkB,EAAI,UAAY,OAC/CwH,EAAaxH,IAAkB,EAAI,QAAU,QAEnDuH,EAAU,UAAY;AAAA;AAAA,4CAEcC,CAAU;AAAA,kBACpCd,CAAU;AAAA;AAAA,SAG5B,CAKI,kBAAmB,CACf,MAAMe,EAAgB,KAAK,SAAS,WACpC,GAAI,GAACA,GAAiB,CAAC,KAAK,MAE5B,GAAI,KAAK,KAAK,aAAc,CACxB,MAAM3B,EAAS,KAAK,KAAK,UAAS,EAClC,GAAIA,EAAQ,CACR,MAAMsB,EAAatB,IAAW,EAAI,UAAY,OAC9C2B,EAAc,YAAc,GAAGL,CAAU,WACzD,MACgBK,EAAc,YAAc,eAE5C,KAAe,CACH,MAAMC,EAAY,KAAK,KAAK,aAAe,KAAK,KAAK,aAAY,EAAK,EACtED,EAAc,YAAc,OAAOC,EAAY,CAAC,EAC5D,CACA,CAKI,cAAe,CAEX,MAAMC,EAAoB,KAAK,SAAS,WAClCC,EAAoB,KAAK,SAAS,WAEpCD,IACAA,EAAkB,YAAc,KAAK,OAAO,OAE5CC,IACAA,EAAkB,YAAc,KAAK,OAAO,MAExD,CAOI,uBAAwB,CAEpB,GAAI,KAAK,kBAAmB,CACxB,KAAK,kBAAkB,sBAAqB,EAC5C,MACZ,CAGA,CAMI,4BAA6B,CAEzB,GAAI,KAAK,kBAAmB,CACxB,KAAK,kBAAkB,2BAA0B,EACjD,MACZ,CAGA,CAMI,4BAA6B,CAEzB,GAAI,KAAK,kBAAmB,CACxB,KAAK,kBAAkB,2BAA0B,EACjD,MACZ,CAGA,CAMI,2BAA4B,CAExB,GAAI,KAAK,kBAAmB,CACxB,KAAK,kBAAkB,0BAAyB,EAChD,MACZ,CAGA,CAMI,iBAAiB7I,EAAQqC,EAAM,CAE3B,OAAI,KAAK,mBACL,KAAK,kBAAkB,iBAAiBrC,EAAQqC,CAAI,EAC7C,KAAK,kBAAkB,qBAAqBrC,EAAQqC,CAAI,GAI5D,EACf,CAMI,qBAAqBrC,EAAQqC,EAAM,CAG/B,OAAI,KAAK,kBACE,KAAK,kBAAkB,qBAAqBrC,EAAQqC,CAAI,EAI5D,EACf,CAOI,iBAAiB1C,EAAKC,EAAK,CACnB,KAAK,oBACL,KAAK,mBAAmB,iBAAiBD,EAAKC,CAAG,CAE7D,CAKI,kBAAmB,CACX,KAAK,oBACL,KAAK,mBAAmB,iBAAgB,CAEpD,CAOI,iBAAiBL,EAAM,CAEnB,KAAK,SAAWA,EAChB,KAAK,OAASD,EAAmBC,CAAI,EAGrC,KAAK,QAAO,CACpB,CAOI,kBAAmB,CAIf,MAAMuJ,EAAY,KAAK,SAAS,UAC1BC,EAAkB,KAAK,SAAS,eAY9C,CAKI,iBAAkB,CAKd,GAAI,CACA,KAAK,YAAY,MAAM,CAEnC,MAAwB,CAExB,CAGQ,WAAW,IAAM,CAEb,GAAI,CACA,KAAK,YAAY,YAAY,CAE7C,MAA4B,CAE5B,CACA,EAAW,GAAI,CACf,CACA"}