{"version":3,"file":"design-system-DbXPYF9k.js","sources":["../../assets/js/coord-utils.js","../../assets/demo-design-system.html?html-proxy&index=1.js"],"sourcesContent":["/**\n * LogicCastle Coordinate Utilities\n * \n * Standard utilities for coordinate transformations across all games.\n * Eliminates coordinate mapping bugs through consistent conventions.\n * \n * Convention: (row, col) 0-based indexing for all games\n * - Connect4: rows 0-5, cols 0-6\n * - Gomoku: rows 0-14, cols 0-14  \n * - Trio: rows 0-6, cols 0-6\n * \n * Based on Architectural Guidelines from GEMINI Analysis (2025-07-02)\n */\n\nexport const CoordUtils = {\n  /**\n   * Convert grid coordinates to linear array index\n   * @param {number} row - Row index (0-based)\n   * @param {number} col - Column index (0-based)\n   * @param {number} cols - Total number of columns\n   * @returns {number} Linear array index\n   */\n  gridToIndex: (row, col, cols) => {\n    if (typeof row !== 'number' || typeof col !== 'number' || typeof cols !== 'number') {\n      throw new Error('gridToIndex: All parameters must be numbers');\n    }\n    return row * cols + col;\n  },\n\n  /**\n   * Convert linear array index to grid coordinates\n   * @param {number} index - Linear array index\n   * @param {number} cols - Total number of columns\n   * @returns {Array<number>} [row, col] coordinates\n   */\n  indexToGrid: (index, cols) => {\n    if (typeof index !== 'number' || typeof cols !== 'number') {\n      throw new Error('indexToGrid: All parameters must be numbers');\n    }\n    if (cols <= 0) {\n      throw new Error('indexToGrid: cols must be greater than 0');\n    }\n    return [Math.floor(index / cols), index % cols];\n  },\n\n  /**\n   * Validate grid coordinates are within bounds\n   * @param {number} row - Row index (0-based)\n   * @param {number} col - Column index (0-based)\n   * @param {number} maxRow - Maximum row index (exclusive)\n   * @param {number} maxCol - Maximum column index (exclusive)\n   * @returns {boolean} True if coordinates are valid\n   */\n  validateCoords: (row, col, maxRow, maxCol) => {\n    if (typeof row !== 'number' || typeof col !== 'number' || \n        typeof maxRow !== 'number' || typeof maxCol !== 'number') {\n      return false;\n    }\n    return row >= 0 && row < maxRow && col >= 0 && col < maxCol;\n  },\n\n  /**\n   * Clamp coordinates to valid bounds\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   * @param {number} maxRow - Maximum row index (exclusive)\n   * @param {number} maxCol - Maximum column index (exclusive)\n   * @returns {Array<number>} [clampedRow, clampedCol]\n   */\n  clampCoords: (row, col, maxRow, maxCol) => {\n    const clampedRow = Math.max(0, Math.min(row, maxRow - 1));\n    const clampedCol = Math.max(0, Math.min(col, maxCol - 1));\n    return [clampedRow, clampedCol];\n  },\n\n  /**\n   * Get neighboring coordinates (4-directional)\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   * @param {number} maxRow - Maximum row index (exclusive)\n   * @param {number} maxCol - Maximum column index (exclusive)\n   * @returns {Array<Array<number>>} Array of valid [row, col] neighbors\n   */\n  getNeighbors: (row, col, maxRow, maxCol) => {\n    const directions = [\n      [-1, 0], // up\n      [1, 0],  // down\n      [0, -1], // left\n      [0, 1]   // right\n    ];\n    \n    return directions\n      .map(([dr, dc]) => [row + dr, col + dc])\n      .filter(([r, c]) => CoordUtils.validateCoords(r, c, maxRow, maxCol));\n  },\n\n  /**\n   * Get neighboring coordinates (8-directional, including diagonals)\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   * @param {number} maxRow - Maximum row index (exclusive)\n   * @param {number} maxCol - Maximum column index (exclusive)\n   * @returns {Array<Array<number>>} Array of valid [row, col] neighbors\n   */\n  getNeighbors8: (row, col, maxRow, maxCol) => {\n    const directions = [\n      [-1, -1], [-1, 0], [-1, 1], // top row\n      [0, -1],           [0, 1],  // middle row (excluding center)\n      [1, -1],  [1, 0],  [1, 1]   // bottom row\n    ];\n    \n    return directions\n      .map(([dr, dc]) => [row + dr, col + dc])\n      .filter(([r, c]) => CoordUtils.validateCoords(r, c, maxRow, maxCol));\n  },\n\n  /**\n   * Calculate distance between two coordinates (Manhattan distance)\n   * @param {number} row1 - First row\n   * @param {number} col1 - First column\n   * @param {number} row2 - Second row\n   * @param {number} col2 - Second column\n   * @returns {number} Manhattan distance\n   */\n  manhattanDistance: (row1, col1, row2, col2) => {\n    return Math.abs(row1 - row2) + Math.abs(col1 - col2);\n  },\n\n  /**\n   * Calculate distance between two coordinates (Euclidean distance)\n   * @param {number} row1 - First row\n   * @param {number} col1 - First column\n   * @param {number} row2 - Second row\n   * @param {number} col2 - Second column\n   * @returns {number} Euclidean distance\n   */\n  euclideanDistance: (row1, col1, row2, col2) => {\n    const dr = row1 - row2;\n    const dc = col1 - col2;\n    return Math.sqrt(dr * dr + dc * dc);\n  },\n\n  /**\n   * Convert DOM element data attributes to coordinates\n   * @param {HTMLElement} element - DOM element with data-row and data-col\n   * @returns {Array<number>|null} [row, col] or null if invalid\n   */\n  elementToCoords: (element) => {\n    if (!element || !element.dataset) {\n      return null;\n    }\n    \n    const row = parseInt(element.dataset.row, 10);\n    const col = parseInt(element.dataset.col, 10);\n    \n    if (isNaN(row) || isNaN(col)) {\n      return null;\n    }\n    \n    return [row, col];\n  },\n\n  /**\n   * Set DOM element data attributes from coordinates\n   * @param {HTMLElement} element - DOM element to update\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   */\n  coordsToElement: (element, row, col) => {\n    if (!element || typeof row !== 'number' || typeof col !== 'number') {\n      throw new Error('coordsToElement: Invalid parameters');\n    }\n    \n    element.dataset.row = row.toString();\n    element.dataset.col = col.toString();\n  },\n\n  // Debug and Development Utilities\n  \n  /**\n   * Log coordinate transformation for debugging\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   * @param {number} cols - Total columns\n   * @param {string} context - Debug context (optional)\n   */\n  logCoordTransform: (row, col, cols, context = '') => {\n    const index = CoordUtils.gridToIndex(row, col, cols);\n    const prefix = context ? `[${context}] ` : '';\n    console.log(`${prefix}(${row},${col}) → index ${index}`);\n  },\n\n  /**\n   * Validate array index corresponds to expected coordinates\n   * @param {number} index - Array index\n   * @param {number} expectedRow - Expected row\n   * @param {number} expectedCol - Expected column\n   * @param {number} cols - Total columns\n   * @returns {boolean} True if index matches expected coordinates\n   */\n  validateIndexMapping: (index, expectedRow, expectedCol, cols) => {\n    const [actualRow, actualCol] = CoordUtils.indexToGrid(index, cols);\n    return actualRow === expectedRow && actualCol === expectedCol;\n  },\n\n  /**\n   * Generate debug grid for coordinate validation\n   * @param {number} rows - Number of rows\n   * @param {number} cols - Number of columns\n   * @returns {Array<Array<Object>>} 2D grid with coordinate info\n   */\n  generateDebugGrid: (rows, cols) => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const rowArray = [];\n      for (let col = 0; col < cols; col++) {\n        rowArray.push({\n          row,\n          col,\n          index: CoordUtils.gridToIndex(row, col, cols),\n          notation: `${String.fromCharCode(65 + col)}${row + 1}` // A1, B2, etc.\n        });\n      }\n      grid.push(rowArray);\n    }\n    return grid;\n  },\n\n  // Game-specific coordinate helpers\n\n  /**\n   * Connect4 specific: Convert column to drop position\n   * @param {number} col - Column index (0-6)\n   * @param {Array<Array>} board - 2D board array\n   * @returns {number|null} Row where piece would land, or null if column full\n   */\n  connect4DropPosition: (col, board) => {\n    if (!board || !Array.isArray(board) || col < 0 || col >= board[0].length) {\n      return null;\n    }\n    \n    // Find lowest empty position in column\n    for (let row = board.length - 1; row >= 0; row--) {\n      if (board[row][col] === 0 || board[row][col] === null || board[row][col] === undefined) {\n        return row;\n      }\n    }\n    return null; // Column is full\n  },\n\n  /**\n   * Gomoku specific: Convert pixel coordinates to grid intersection\n   * @param {number} pixelX - X pixel coordinate\n   * @param {number} pixelY - Y pixel coordinate\n   * @param {number} boardSize - Board size in pixels\n   * @param {number} padding - Board padding in pixels\n   * @param {number} gridSize - Grid size (15 for Gomoku)\n   * @returns {Array<number>|null} [row, col] or null if outside grid\n   */\n  gomokuPixelToGrid: (pixelX, pixelY, boardSize, padding, gridSize = 15) => {\n    const gridArea = boardSize - (2 * padding);\n    const cellSize = gridArea / (gridSize - 1);\n    \n    const gridX = (pixelX - padding) / cellSize;\n    const gridY = (pixelY - padding) / cellSize;\n    \n    // Round to nearest intersection\n    const col = Math.round(gridX);\n    const row = Math.round(gridY);\n    \n    if (CoordUtils.validateCoords(row, col, gridSize, gridSize)) {\n      return [row, col];\n    }\n    \n    return null;\n  },\n\n  /**\n   * Gomoku specific: Convert grid coordinates to pixel position\n   * @param {number} row - Row index\n   * @param {number} col - Column index\n   * @param {number} boardSize - Board size in pixels\n   * @param {number} padding - Board padding in pixels\n   * @param {number} gridSize - Grid size (15 for Gomoku)\n   * @returns {Array<number>} [pixelX, pixelY]\n   */\n  gomokuGridToPixel: (row, col, boardSize, padding, gridSize = 15) => {\n    const gridArea = boardSize - (2 * padding);\n    const cellSize = gridArea / (gridSize - 1);\n    \n    const pixelX = padding + (col * cellSize);\n    const pixelY = padding + (row * cellSize);\n    \n    return [pixelX, pixelY];\n  }\n};\n\n// Export for CommonJS compatibility\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { CoordUtils };\n}","\n        import { CoordUtils } from './js/coord-utils.js';\n\n        // Initialize demo components\n        document.addEventListener('DOMContentLoaded', () => {\n            initializeGameBoards();\n            initializeCoordDemo();\n        });\n\n        function initializeGameBoards() {\n            // Connect4 demo board\n            const connect4Board = document.getElementById('connect4Demo');\n            if (connect4Board) {\n                for (let row = 0; row < 6; row++) {\n                    for (let col = 0; col < 7; col++) {\n                        const cell = document.createElement('div');\n                        cell.className = 'bg-blue-100 border border-blue-300 rounded-full aspect-square flex items-center justify-center cursor-pointer hover:bg-blue-200';\n                        cell.dataset.row = row;\n                        cell.dataset.col = col;\n                        \n                        // Add some demo pieces\n                        if ((row === 5 && col === 3) || (row === 4 && col === 3)) {\n                            const piece = document.createElement('div');\n                            piece.className = row === 5 ? 'game-piece player-yellow' : 'game-piece player-red';\n                            cell.appendChild(piece);\n                        }\n                        \n                        connect4Board.appendChild(cell);\n                    }\n                }\n            }\n\n            // Trio demo board\n            const trioBoard = document.getElementById('trioDemo');\n            if (trioBoard) {\n                const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n                for (let row = 0; row < 7; row++) {\n                    for (let col = 0; col < 7; col++) {\n                        const cell = document.createElement('div');\n                        cell.className = 'bg-green-100 border border-green-300 rounded flex items-center justify-center font-bold text-lg cursor-pointer hover:bg-green-200';\n                        cell.dataset.row = row;\n                        cell.dataset.col = col;\n                        cell.textContent = numbers[Math.floor(Math.random() * numbers.length)];\n                        trioBoard.appendChild(cell);\n                    }\n                }\n            }\n\n            // Gomoku demo board\n            const gomokuBoard = document.getElementById('gomokuDemo');\n            if (gomokuBoard) {\n                // Create grid lines background\n                gomokuBoard.style.backgroundImage = `\n                    repeating-linear-gradient(to right, #8b4513 0px, #8b4513 1px, transparent 1px, transparent 20px),\n                    repeating-linear-gradient(to bottom, #8b4513 0px, #8b4513 1px, transparent 1px, transparent 20px)\n                `;\n                \n                // Add some demo stones\n                const demoStones = [\n                    { row: 7, col: 7, player: 'black' },\n                    { row: 7, col: 8, player: 'white' },\n                    { row: 8, col: 7, player: 'black' }\n                ];\n                \n                demoStones.forEach(({ row, col, player }) => {\n                    const stone = document.createElement('div');\n                    stone.className = `game-piece player-${player} absolute`;\n                    stone.style.left = `${(col / 14) * 100}%`;\n                    stone.style.top = `${(row / 14) * 100}%`;\n                    stone.style.transform = 'translate(-50%, -50%)';\n                    gomokuBoard.appendChild(stone);\n                });\n            }\n        }\n\n        function initializeCoordDemo() {\n            const coordDemo = document.getElementById('coordDemo');\n            const debugOutput = document.getElementById('debugOutput');\n            \n            if (!coordDemo || !debugOutput) return;\n\n            // Create 5x5 grid\n            for (let row = 0; row < 5; row++) {\n                for (let col = 0; col < 5; col++) {\n                    const cell = document.createElement('div');\n                    cell.className = 'bg-purple-100 border border-purple-300 rounded p-2 text-center cursor-pointer hover:bg-purple-200 transition-colors';\n                    cell.dataset.row = row;\n                    cell.dataset.col = col;\n                    cell.textContent = `${row},${col}`;\n                    \n                    cell.addEventListener('click', () => {\n                        const coords = CoordUtils.elementToCoords(cell);\n                        if (coords) {\n                            const [clickRow, clickCol] = coords;\n                            const index = CoordUtils.gridToIndex(clickRow, clickCol, 5);\n                            const backToCoords = CoordUtils.indexToGrid(index, 5);\n                            \n                            debugOutput.innerHTML = `\n                                <strong>Clicked:</strong> (${clickRow}, ${clickCol})<br>\n                                <strong>Array Index:</strong> ${index}<br>\n                                <strong>Back to Coords:</strong> [${backToCoords.join(', ')}]<br>\n                                <strong>Validation:</strong> ${CoordUtils.validateCoords(clickRow, clickCol, 5, 5) ? '✅ Valid' : '❌ Invalid'}<br>\n                                <strong>Neighbors (4-dir):</strong> ${CoordUtils.getNeighbors(clickRow, clickCol, 5, 5).map(n => `(${n.join(',')})`).join(', ')}\n                            `;\n                        }\n                        \n                        // Highlight clicked cell\n                        coordDemo.querySelectorAll('div').forEach(c => c.classList.remove('bg-purple-300'));\n                        cell.classList.add('bg-purple-300');\n                    });\n                    \n                    coordDemo.appendChild(cell);\n                }\n            }\n        }\n\n        // Modal functions\n        window.showDemoModal = function() {\n            document.getElementById('demoModal').style.display = 'flex';\n        };\n\n        window.hideDemoModal = function() {\n            document.getElementById('demoModal').style.display = 'none';\n        };\n\n        // Close modal on escape key\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                hideDemoModal();\n            }\n        });\n\n        // Close modal on backdrop click\n        document.getElementById('demoModal').addEventListener('click', (e) => {\n            if (e.target.id === 'demoModal') {\n                hideDemoModal();\n            }\n        });\n    "],"names":["CoordUtils","row","col","cols","index","maxRow","maxCol","clampedRow","clampedCol","dr","dc","r","c","row1","col1","row2","col2","element","context","prefix","expectedRow","expectedCol","actualRow","actualCol","rows","grid","rowArray","board","pixelX","pixelY","boardSize","padding","gridSize","cellSize","gridX","gridY","module","initializeGameBoards","initializeCoordDemo","connect4Board","cell","piece","trioBoard","numbers","gomokuBoard","player","stone","coordDemo","debugOutput","coords","clickRow","clickCol","backToCoords","n"],"mappings":"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"}