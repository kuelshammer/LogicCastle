/// Comprehensive Gomoku AI Test Cases using ASCII representation
/// This module provides strategic test scenarios for validating Gomoku AI decisions

use crate::ai::gomoku_test_data::GomokuAITestCase;

/// Get collection of Gomoku AI test cases covering various strategic situations
pub fn get_gomoku_test_cases() -> Vec<GomokuAITestCase> {
    vec![
        // Opening strategy tests
        GomokuAITestCase {
            name: "Opening: First move center",
            board_before: "
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...............
...............
...............
...............
.......B.......
...............
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should open with center move for optimal control",
        },
        
        // Immediate win detection
        GomokuAITestCase {
            name: "Immediate Win: Complete 5-in-a-row horizontally",
            board_before: "
...............
...............
...............
...............
...............
...............
...............
....WWWW.......
....BBBB.......
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...............
...............
...............
...............
....WWWWW......
....BBBB.......
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should complete 5-in-a-row for immediate win",
        },
        
        // Blocking opponent win
        GomokuAITestCase {
            name: "Defensive: Block opponent's 4-in-a-row",
            board_before: "
...............
...............
...............
...............
...............
...............
...............
....BBBB.......
....WWW........
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...............
...............
...............
...............
....BBBBW......
....WWW........
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI must block opponent's immediate winning threat",
        },
        
        // Vertical pattern recognition
        GomokuAITestCase {
            name: "Vertical Pattern: Create threat",
            board_before: "
...............
...............
...............
...............
.......B.......
.......W.......
.......B.......
.......W.......
.......B.......
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
.......W.......
.......B.......
.......W.......
.......B.......
.......W.......
.......B.......
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should extend vertical pattern to create threat",
        },
        
        // Diagonal pattern recognition
        GomokuAITestCase {
            name: "Diagonal Pattern: Extend diagonal line",
            board_before: "
...............
...............
...............
...............
....B..........
.....W.........
......B........
.......W.......
........B......
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
.........W.....
....B..........
.....W.........
......B........
.......W.......
........B......
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should extend diagonal pattern for strategic advantage",
        },
        
        // Center control strategy
        GomokuAITestCase {
            name: "Center Control: Contest center area",
            board_before: "
...............
...............
...............
...............
...............
...............
......B........
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...............
...............
...............
......BW.......
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should play near center to contest board control",
        },
        
        // Fork creation (multiple threats)
        GomokuAITestCase {
            name: "Fork Creation: Multiple threat setup",
            board_before: "
...............
...............
...............
...............
.....B.........
......W........
.......B.......
........W......
.........B.....
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...........W...
.....B.........
......W........
.......B.......
........W......
.........B.....
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should create multiple threats (fork) for tactical advantage",
        },
        
        // Anti-diagonal win detection
        GomokuAITestCase {
            name: "Anti-diagonal Win: Complete ascending diagonal",
            board_before: "
...............
...............
...............
..........W....
.........B.....
........W......
.......B.......
......W........
.....B.........
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...........W...
..........W....
.........B.....
........W......
.......B.......
......W........
.....B.........
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should complete anti-diagonal for victory",
        },
        
        // Edge play strategy
        GomokuAITestCase {
            name: "Edge Strategy: Extend from edge",
            board_before: "
B..............
.W.............
..B............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
B..............
.W.............
..BW...........
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should block edge extension while maintaining flexibility",
        },
        
        // Complex tactical situation
        GomokuAITestCase {
            name: "Complex Tactics: Multi-directional threats",
            board_before: "
...............
...............
...............
.....B.........
....WBW........
.....B.........
...............
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
.....W.........
.....B.........
....WBW........
.....B.........
...............
...............
...............
...............
...............
...............
...............
...............
...............
            ",
            reason: "AI should address multiple directional threats strategically",
        },
    ]
}

/// Run all Gomoku AI test cases (single + multi-move tests) and return results
pub fn run_all_gomoku_tests() -> (usize, usize, Vec<String>) {
    let mut total_passed = 0;
    let mut total_failed = 0;
    let mut all_failures = Vec::new();
    
    // Run single-move tests
    println!("=== Running Single-Move Gomoku Tests ===");
    let test_cases = get_gomoku_test_cases();
    let mut passed = 0;
    let mut failed = 0;
    
    for test_case in test_cases {
        match crate::ai::gomoku_test_data::test_gomoku_ai_case_xor(&test_case) {
            Ok(_) => {
                passed += 1;
                println!("✓ Single: {}", test_case.name);
            }
            Err(e) => {
                failed += 1;
                let failure_msg = format!("✗ Single: {}: {}", test_case.name, e);
                println!("{}", failure_msg);
                all_failures.push(failure_msg);
            }
        }
    }
    
    println!("Single-Move Tests: {} passed, {} failed", passed, failed);
    total_passed += passed;
    total_failed += failed;
    
    // Run multi-move tests
    println!("\n=== Running Multi-Move Gomoku Tests ===");
    let (multi_passed, multi_failed, mut multi_failures) = crate::ai::gemini_gomoku_multi_tests::run_gemini_gomoku_multi_tests();
    
    total_passed += multi_passed;
    total_failed += multi_failed;
    all_failures.append(&mut multi_failures);
    
    // Run original Gemini tests
    println!("\n=== Running Original Gemini Tests ===");
    let (gemini_passed, gemini_failed, mut gemini_failures) = crate::ai::gemini_gomoku_tests::run_gemini_gomoku_tests();
    
    total_passed += gemini_passed;
    total_failed += gemini_failed;
    all_failures.append(&mut gemini_failures);
    
    // Run categorized Gemini tests
    println!("\n=== Running Categorized Gemini Tests ===");
    let (categorized_passed, categorized_failed, mut categorized_failures) = crate::ai::categorized_gemini_tests::run_categorized_gemini_tests();
    
    total_passed += categorized_passed;
    total_failed += categorized_failed;
    all_failures.append(&mut categorized_failures);
    
    // Run advanced scenario tests
    println!("\n=== Running Advanced Gomoku Scenarios ===");
    let (advanced_passed, advanced_failed, mut advanced_failures) = crate::ai::advanced_gomoku_scenarios::run_advanced_gomoku_scenarios();
    
    total_passed += advanced_passed;
    total_failed += advanced_failed;
    all_failures.append(&mut advanced_failures);
    
    println!("\n=== TOTAL GOMOKU TEST RESULTS ===");
    println!("Total: {} passed, {} failed", total_passed, total_failed);
    
    (total_passed, total_failed, all_failures)
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_gomoku_test_cases_collection() {
        let test_cases = get_gomoku_test_cases();
        assert!(!test_cases.is_empty(), "Should have test cases");
        assert!(test_cases.len() >= 5, "Should have multiple strategic scenarios");
        
        // Verify all test cases have required fields
        for test_case in &test_cases {
            assert!(!test_case.name.is_empty(), "Test case should have name");
            assert!(!test_case.reason.is_empty(), "Test case should have reason");
            assert!(!test_case.board_before.is_empty(), "Test case should have before board");
            assert!(!test_case.board_after.is_empty(), "Test case should have after board");
        }
    }
    
    #[test]
    fn test_run_simple_gomoku_test() {
        // Test just the infrastructure with a simple case
        let test_case = GomokuAITestCase {
            name: "Simple Infrastructure Test",
            board_before: "
...............
...............
...............
...............
...............
...............
...............
.......B.......
...............
...............
...............
...............
...............
...............
...............
            ",
            board_after: "
...............
...............
...............
...............
...............
...............
...............
.......BW......
...............
...............
...............
...............
...............
...............
...............
            ",
            reason: "Simple test for infrastructure validation",
        };
        
        // Test the XOR extraction works
        let result = crate::ai::gomoku_test_data::extract_gomoku_move_from_boards(
            test_case.board_before, 
            test_case.board_after
        );
        assert!(result.is_ok(), "Move extraction should work");
        let (row, col) = result.unwrap();
        assert_eq!((row, col), (7, 8), "Should extract correct move position");
    }
}