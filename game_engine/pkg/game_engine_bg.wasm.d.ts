/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_connect4game_free: (a: number, b: number) => void;
export const connect4game_new: () => number;
export const connect4game_new_with_starting_player: (a: number) => number;
export const connect4game_make_move: (a: number, b: number, c: number) => void;
export const connect4game_get_cell: (a: number, b: number, c: number) => number;
export const connect4game_current_player: (a: number) => number;
export const connect4game_is_valid_move: (a: number, b: number) => number;
export const connect4game_get_column_height: (a: number, b: number) => number;
export const connect4game_reset_with_starting_player: (a: number, b: number) => void;
export const connect4game_start_new_series: (a: number, b: number) => void;
export const connect4game_start_new_series_with_players: (a: number, b: number, c: number, d: number) => void;
export const connect4game_create_hypothetical_state: (a: number, b: number) => number;
export const connect4game_board_string: (a: number, b: number) => void;
export const connect4game_is_draw: (a: number) => number;
export const connect4game_is_game_over: (a: number) => number;
export const connect4game_analyze_position: (a: number) => number;
export const connect4game_get_game_phase: (a: number) => number;
export const connect4game_memory_usage: (a: number) => number;
export const connect4game_set_ai_difficulty: (a: number, b: number) => void;
export const connect4game_get_ai_difficulty: (a: number) => number;
export const connect4game_get_move_count: (a: number) => number;
export const connect4game_get_winner: (a: number) => number;
export const connect4game_get_board: (a: number, b: number) => void;
export const connect4game_can_undo: (a: number) => number;
export const connect4game_undo_move: (a: number) => number;
export const connect4game_get_ai_board: (a: number, b: number) => void;
export const connect4game_get_threatening_moves: (a: number, b: number, c: number) => void;
export const connect4game_get_winning_moves: (a: number, b: number, c: number) => void;
export const connect4game_get_blocking_moves: (a: number, b: number, c: number) => void;
export const connect4game_evaluate_position_for_player: (a: number, b: number) => number;
export const connect4game_newGame: (a: number) => void;
export const connect4game_undoMove: (a: number) => number;
export const connect4game_getAIMove: (a: number) => number;
export const __wbg_aimove_free: (a: number, b: number) => void;
export const __wbg_get_aimove_row: (a: number) => number;
export const __wbg_set_aimove_row: (a: number, b: number) => void;
export const __wbg_get_aimove_col: (a: number) => number;
export const __wbg_set_aimove_col: (a: number, b: number) => void;
export const __wbg_gomokugame_free: (a: number, b: number) => void;
export const gomokugame_new: () => number;
export const gomokugame_new_with_starting_player: (a: number) => number;
export const gomokugame_make_move: (a: number, b: number, c: number, d: number) => void;
export const gomokugame_get_cell: (a: number, b: number, c: number) => number;
export const gomokugame_current_player: (a: number) => number;
export const gomokugame_winner: (a: number) => number;
export const gomokugame_move_count: (a: number) => number;
export const gomokugame_is_valid_move: (a: number, b: number, c: number) => number;
export const gomokugame_reset_with_starting_player: (a: number, b: number) => void;
export const gomokugame_start_new_series: (a: number, b: number) => void;
export const gomokugame_start_new_series_with_players: (a: number, b: number, c: number, d: number) => void;
export const gomokugame_board_string: (a: number, b: number) => void;
export const gomokugame_is_draw: (a: number) => number;
export const gomokugame_is_game_over: (a: number) => number;
export const gomokugame_get_game_phase: (a: number) => number;
export const gomokugame_memory_usage: (a: number) => number;
export const gomokugame_get_current_player: (a: number) => number;
export const gomokugame_get_move_count: (a: number) => number;
export const gomokugame_get_winner: (a: number) => number;
export const gomokugame_get_board: (a: number, b: number) => void;
export const gomokugame_can_undo: (a: number) => number;
export const gomokugame_undo_move: (a: number) => number;
export const gomokugame_newGame: (a: number) => void;
export const gomokugame_undoMove: (a: number) => number;
export const gomokugame_get_ai_move: (a: number, b: number) => void;
export const gomokugame_get_ai_move_option: (a: number) => number;
export const gomokugame_get_ai_move_for_player: (a: number, b: number, c: number) => void;
export const gomokugame_evaluate_position: (a: number) => number;
export const gomokugame_evaluate_position_for_player: (a: number, b: number) => number;
export const gomokugame_get_threat_level: (a: number, b: number, c: number, d: number) => number;
export const gomokugame_get_winning_moves: (a: number, b: number) => void;
export const gomokugame_get_blocking_moves: (a: number, b: number) => void;
export const gomokugame_analyze_position: (a: number, b: number) => void;
export const gomokugame_get_threatening_moves: (a: number, b: number) => void;
export const gomokugame_create_hypothetical_state: (a: number, b: number) => number;
export const __wbg_lgame_free: (a: number, b: number) => void;
export const lgame_new: () => number;
export const lgame_current_player: (a: number) => number;
export const lgame_move_count: (a: number) => number;
export const lgame_game_over: (a: number) => number;
export const lgame_winner: (a: number) => number;
export const lgame_reset: (a: number) => void;
export const lgame_get_cell: (a: number, b: number, c: number) => number;
export const lgame_get_board_state: (a: number, b: number) => void;
export const lgame_get_valid_moves_count: (a: number) => number;
export const lgame_is_current_player_blocked: (a: number) => number;
export const lgame_make_move: (a: number, b: number, c: number, d: number, e: number) => void;
export const lgame_move_neutral_piece: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const lgame_get_status_summary: (a: number, b: number) => void;
export const __wbg_triogame_free: (a: number, b: number) => void;
export const triogame_new: (a: number) => number;
export const triogame_get_number: (a: number, b: number, c: number) => number;
export const triogame_get_target_number: (a: number) => number;
export const triogame_get_difficulty: (a: number) => number;
export const triogame_validate_trio: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const triogame_generate_new_board: (a: number, b: number) => number;
export const triogame_find_all_solutions: (a: number, b: number) => void;
export const triogame_memory_usage: (a: number) => number;
export const triogame_memory_efficiency: (a: number) => number;
export const triogame_get_board_array: (a: number, b: number) => void;
export const triogame_get_adjacency_pattern_count: (a: number) => number;
export const triogame_get_current_player: (a: number) => number;
export const triogame_make_move: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const triogame_reset: (a: number) => void;
export const triogame_get_move_count: (a: number) => number;
export const triogame_get_winner: (a: number) => number;
export const triogame_get_game_phase: (a: number) => number;
export const difficulty_to_number: (a: number, b: number) => number;
export const difficulty_to_string: (a: number, b: number) => void;
export const __wbg_connect4ai_free: (a: number, b: number) => void;
export const connect4ai_new: () => number;
export const connect4ai_with_difficulty: (a: number) => number;
export const connect4ai_set_ai_player: (a: number, b: number) => void;
export const connect4ai_set_difficulty: (a: number, b: number) => void;
export const connect4ai_set_difficulty_level: (a: number, b: number) => void;
export const connect4ai_get_difficulty_level: (a: number) => number;
export const connect4ai_get_best_move: (a: number, b: number) => number;
export const connect4ai_get_best_move_for_player: (a: number, b: number, c: number) => number;
export const connect4ai_evaluate_position: (a: number, b: number) => number;
export const connect4ai_get_quick_move: (a: number, b: number) => number;
export const main: () => void;
export const __wbg_positionanalysis_free: (a: number, b: number) => void;
export const __wbg_get_positionanalysis_total_pieces: (a: number) => number;
export const __wbg_set_positionanalysis_total_pieces: (a: number, b: number) => void;
export const __wbg_get_positionanalysis_connectivity_score: (a: number) => number;
export const __wbg_set_positionanalysis_connectivity_score: (a: number, b: number) => void;
export const __wbg_get_positionanalysis_game_phase: (a: number) => number;
export const __wbg_set_positionanalysis_game_phase: (a: number, b: number) => void;
export const __wbg_get_positionanalysis_evaluation_score: (a: number) => number;
export const __wbg_set_positionanalysis_evaluation_score: (a: number, b: number) => void;
export const positionanalysis_get_current_player_threats: (a: number) => number;
export const positionanalysis_get_opponent_threats: (a: number) => number;
export const positionanalysis_get_total_pieces: (a: number) => number;
export const positionanalysis_get_connectivity_score: (a: number) => number;
export const positionanalysis_get_game_phase: (a: number) => number;
export const positionanalysis_get_evaluation_score: (a: number) => number;
export const positionanalysis_threat_advantage: (a: number) => number;
export const positionanalysis_is_critical: (a: number) => number;
export const positionanalysis_summary: (a: number, b: number) => void;
export const __wbg_board_free: (a: number, b: number) => void;
export const board_new: (a: number, b: number) => number;
export const board_get_rows: (a: number) => number;
export const board_get_cols: (a: number) => number;
export const board_get_cells: (a: number, b: number) => void;
export const board_get_cell: (a: number, b: number, c: number, d: number) => void;
export const board_set_cell: (a: number, b: number, c: number, d: number, e: number) => void;
export const board_is_within_bounds: (a: number, b: number, c: number) => number;
export const board_is_full: (a: number) => number;
export const board_is_column_full: (a: number, b: number) => number;
export const board_column_height: (a: number, b: number) => number;
export const board_fast_clone: (a: number) => number;
export const board_is_column_available: (a: number, b: number) => number;
export const board_get_drop_row: (a: number, b: number) => number;
export const __wbg_game_free: (a: number, b: number) => void;
export const game_new: (a: number, b: number, c: number, d: number) => number;
export const game_make_move_connect4_js: (a: number, b: number, c: number) => void;
export const game_make_move_gobang_js: (a: number, b: number, c: number, d: number) => void;
export const game_check_win: (a: number) => number;
export const game_is_game_over: (a: number) => number;
export const game_get_board: (a: number, b: number) => void;
export const game_get_current_player: (a: number) => number;
export const game_get_starting_player: (a: number) => number;
export const game_set_starting_player: (a: number, b: number) => void;
export const game_reset_game: (a: number) => void;
export const game_reset_game_with_starter: (a: number, b: number) => void;
export const game_fast_clone: (a: number) => number;
export const game_get_legal_moves_connect4: (a: number, b: number) => void;
export const game_legal_move_count_connect4: (a: number) => number;
export const game_simulate_move_connect4: (a: number, b: number, c: number) => void;
export const game_simulate_move_connect4_js: (a: number, b: number) => number;
export const game_evaluate_position: (a: number) => number;
export const game_evaluate_position_simple: (a: number) => number;
export const game_evaluate_position_advanced: (a: number) => number;
export const game_count_threats: (a: number, b: number) => number;
export const game_get_legal_moves_gobang: (a: number, b: number) => void;
export const game_simulate_move_gobang: (a: number, b: number, c: number, d: number) => void;
export const game_get_winner: (a: number) => number;
export const game_get_game_phase: (a: number) => number;
export const game_analyze_position: (a: number) => number;
export const game_detect_bottom_row_forks: (a: number, b: number, c: number) => void;
export const game_get_fork_blocking_moves: (a: number, b: number) => void;
export const game_has_critical_fork_threats: (a: number) => number;
export const game_detect_open_three: (a: number, b: number, c: number) => void;
export const game_detect_closed_four: (a: number, b: number, c: number) => void;
export const game_detect_double_three_forks: (a: number, b: number, c: number) => void;
export const game_get_threat_level: (a: number, b: number, c: number, d: number) => number;
export const game_get_dangerous_moves_gobang: (a: number, b: number) => void;
export const game_get_winning_moves_gobang: (a: number, b: number) => void;
export const game_get_blocking_moves_gobang: (a: number, b: number) => void;
export const __wbg_triogamelegacy_free: (a: number, b: number) => void;
export const triogamelegacy_new: (a: number) => number;
export const triogamelegacy_get_board: (a: number, b: number) => void;
export const triogamelegacy_get_target_number: (a: number) => number;
export const triogamelegacy_check_combination: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const __wbg_reachabilityanalysis_free: (a: number, b: number) => void;
export const reachabilityanalysis_get_reachable_targets: (a: number, b: number) => void;
export const reachabilityanalysis_get_unreachable_targets: (a: number, b: number) => void;
export const reachabilityanalysis_get_total_reachable: (a: number) => number;
export const reachabilityanalysis_get_coverage_percentage: (a: number) => number;
export const reachabilityanalysis_get_min_reachable: (a: number) => number;
export const reachabilityanalysis_get_max_reachable: (a: number) => number;
export const reachabilityanalysis_summary: (a: number, b: number) => void;
export const __wbg_solutionanalysis_free: (a: number, b: number) => void;
export const solutionanalysis_get_target: (a: number) => number;
export const solutionanalysis_get_total_solutions: (a: number) => number;
export const solutionanalysis_get_unique_formulas: (a: number, b: number) => void;
export const solutionanalysis_get_add_operations: (a: number) => number;
export const solutionanalysis_get_subtract_operations: (a: number) => number;
export const solutionanalysis_get_difficulty_score: (a: number) => number;
export const solutionanalysis_summary: (a: number, b: number) => void;
export const triogamelegacy_new_with_distribution_wasm: (a: number) => number;
export const triogamelegacy_analyze_reachable_targets_wasm: (a: number) => number;
export const triogamelegacy_count_solutions_for_target_wasm: (a: number, b: number) => number;
export const triogamelegacy_categorize_target_difficulty_wasm: (a: number, b: number) => number;
export const triogamelegacy_comprehensive_gap_analysis: (a: number) => void;
export const __wbg_get_positionanalysis_current_player_threats: (a: number) => number;
export const __wbg_get_positionanalysis_opponent_threats: (a: number) => number;
export const __wbg_set_positionanalysis_current_player_threats: (a: number, b: number) => void;
export const __wbg_set_positionanalysis_opponent_threats: (a: number, b: number) => void;
export const game_is_terminal: (a: number) => number;
export const connect4game_move_count: (a: number) => number;
export const connect4game_get_current_player: (a: number) => number;
export const connect4game_winner: (a: number) => number;
export const connect4game_get_ai_move: (a: number) => number;
export const connect4game_reset: (a: number) => void;
export const gomokugame_reset: (a: number) => void;
export const __wbindgen_export_0: (a: number) => void;
export const __wbindgen_export_1: (a: number, b: number, c: number) => void;
export const __wbindgen_export_2: (a: number, b: number) => number;
export const __wbindgen_export_3: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_add_to_stack_pointer: (a: number) => number;
export const __wbindgen_start: () => void;
