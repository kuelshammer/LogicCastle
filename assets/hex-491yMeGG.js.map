{"version":3,"file":"hex-491yMeGG.js","sources":["../../games/hex/js/hex-config.js"],"sourcesContent":["/**\n * Hex Game UI Configuration\n * \n * Comprehensive configuration for Hex Game UI modules replacing the 691-line\n * monolithic implementation with the standardized UI Module System.\n * \n * Features migrated from legacy Hex Game:\n * - 11x11 hexagonal grid board\n * - SVG-based hexagonal rendering with precise coordinate mapping\n * - Connection-based win conditions (Red: left-right, Blue: top-bottom)\n * - BitPackedBoard integration for 93.4% memory efficiency\n * - Union-Find pathfinding algorithm\n * - Educational topology demonstrations\n */\n\nexport const HEX_UI_CONFIG = {\n    // DOM Element Configuration\n    elements: {\n        // Core game elements (required)\n        required: [\n            'gameBoard',\n            'currentPlayer',\n            'gameStatus'\n        ],\n        \n        // UI control elements (optional but expected)\n        optional: [\n            // Game board\n            'hex-board',\n            'hex-svg',\n            'board-container',\n            \n            // Game info\n            'current-player',\n            'move-counter',\n            'game-status',\n            'player-indicator',\n            \n            // Control buttons\n            'newGameBtn',\n            'resetGameBtn',\n            'undoMoveBtn',\n            'showConnectionsBtn',\n            'analysisBtn',\n            \n            // Game analysis\n            'memory-stats',\n            'bitpacked-info',\n            'path-analysis',\n            'connection-status',\n            \n            // Player info\n            'red-goal',\n            'blue-goal',\n            'winner-display',\n            \n            // Debug and education\n            'debug-panel',\n            'topology-info',\n            'coordinate-display',\n            'loading-progress',\n            \n            // Help system\n            'helpModal',\n            'rulesModal',\n            'topologyModal',\n            'helpBtn',\n            'rulesBtn',\n            'topologyBtn',\n            'closeHelpBtn',\n            'closeRulesBtn',\n            'closeTopologyBtn'\n        ]\n    },\n\n    // Modal Configuration \n    modals: {\n        help: {\n            id: 'helpModal',\n            closeKey: 'F1',\n            closeOnEscape: true,\n            closeOnOutsideClick: true\n        },\n        \n        rules: {\n            id: 'rulesModal',\n            closeKey: 'F2',\n            closeOnEscape: true,\n            closeOnOutsideClick: true\n        },\n        \n        topology: {\n            id: 'topologyModal',\n            closeKey: 'F3',\n            closeOnEscape: true,\n            closeOnOutsideClick: false // Educational content should be deliberate to close\n        },\n        \n        analysis: {\n            id: 'analysisModal',\n            closeKey: 'F12',\n            closeOnEscape: true,\n            closeOnOutsideClick: false\n        }\n    },\n\n    // Keyboard Shortcuts Configuration\n    keyboard: {\n        // Function keys\n        'F1': 'toggleHelp',\n        'F2': 'toggleRules',\n        'F3': 'toggleTopology',\n        'F12': 'toggleAnalysis',\n        \n        // Game controls\n        'n': 'newGame',\n        'N': 'newGame',\n        'r': 'resetGame',\n        'R': 'resetGame',\n        'u': 'undoMove',\n        'U': 'undoMove',\n        'c': 'showConnections',\n        'C': 'showConnections',\n        'a': 'toggleAnalysis',\n        'A': 'toggleAnalysis',\n        \n        // Board navigation\n        'ArrowUp': 'moveCursorUp',\n        'ArrowDown': 'moveCursorDown',\n        'ArrowLeft': 'moveCursorLeft',\n        'ArrowRight': 'moveCursorRight',\n        'Enter': 'selectCell',\n        ' ': 'selectCell', // Spacebar\n        \n        // Player shortcuts\n        '1': 'switchToRed',\n        '2': 'switchToBlue',\n        \n        // View controls\n        '+': 'zoomIn',\n        '-': 'zoomOut',\n        '0': 'resetZoom',\n        \n        // Debug/educational\n        'd': 'toggleDebug',\n        'D': 'toggleDebug',\n        't': 'toggleTopology',\n        'T': 'toggleTopology'\n    },\n\n    // Message System Configuration\n    messages: {\n        position: 'top-right',\n        duration: 3000,\n        maxMessages: 5,\n        types: {\n            info: { \n                duration: 3000,\n                className: 'message-info',\n                icon: '‚ÑπÔ∏è'\n            },\n            success: { \n                duration: 4000,\n                className: 'message-success',\n                icon: '‚úÖ'\n            },\n            error: { \n                duration: 5000,\n                className: 'message-error',\n                icon: '‚ùå'\n            },\n            warning: { \n                duration: 4000,\n                className: 'message-warning',\n                icon: '‚ö†Ô∏è'\n            },\n            win: {\n                duration: 6000,\n                className: 'message-win',\n                icon: 'üéâ'\n            },\n            move: {\n                duration: 2000,\n                className: 'message-info',\n                icon: '‚¨°'\n            },\n            connection: {\n                duration: 4000,\n                className: 'message-success',\n                icon: 'üîó'\n            },\n            topology: {\n                duration: 5000,\n                className: 'message-info',\n                icon: 'üßÆ'\n            }\n        }\n    },\n\n    // Animation Configuration\n    animations: {\n        duration: 400,\n        easing: 'ease-in-out',\n        \n        // Hex-specific animations\n        stonePlace: {\n            duration: 300,\n            easing: 'ease-out'\n        },\n        \n        pathHighlight: {\n            duration: 500,\n            easing: 'ease-in-out'\n        },\n        \n        connectionReveal: {\n            duration: 800,\n            easing: 'ease-in-out'\n        },\n        \n        boardRotation: {\n            duration: 600,\n            easing: 'ease-in-out'\n        },\n        \n        winningPath: {\n            duration: 1000,\n            easing: 'ease-in-out'\n        }\n    },\n\n    // Game-specific UI settings\n    gameSettings: {\n        // Board configuration\n        boardSize: 11, // 11x11 hexagonal grid\n        \n        // Hexagon rendering\n        hexagon: {\n            radius: 20,        // Hex radius in pixels\n            spacing: 35,       // Distance between hex centers\n            strokeWidth: 2,    // Border thickness\n            offsetX: 50,       // Board offset from left\n            offsetY: 50        // Board offset from top\n        },\n        \n        // Player configuration\n        players: {\n            red: {\n                color: '#DC2626',     // Red-600\n                lightColor: '#FCA5A5', // Red-300\n                goal: 'horizontal',    // left-right connection\n                sides: ['left', 'right']\n            },\n            blue: {\n                color: '#2563EB',     // Blue-600\n                lightColor: '#93C5FD', // Blue-300\n                goal: 'vertical',      // top-bottom connection\n                sides: ['top', 'bottom']\n            }\n        },\n        \n        // Game mechanics\n        gameMode: 'standard', // standard, tournament, educational\n        winCondition: 'connection', // connection, territory (future)\n        \n        // BitPackedBoard settings\n        bitPacked: {\n            enabled: true,\n            showStats: true,\n            displayEfficiency: true\n        },\n        \n        // Educational features\n        educational: {\n            showTopology: false,\n            highlightPaths: true,\n            showCoordinates: false,\n            explainMoves: false\n        },\n        \n        // Debug settings\n        debug: {\n            enabled: false,\n            showNeighbors: false,\n            showPathfinding: false,\n            logMoves: false\n        }\n    },\n\n    // Visual configuration\n    visual: {\n        // SVG board styling\n        board: {\n            backgroundColor: '#F9FAFB', // Gray-50\n            borderColor: '#E5E7EB',     // Gray-200\n            gridColor: '#D1D5DB'        // Gray-300\n        },\n        \n        // Hexagon cell styling\n        hexagon: {\n            fillEmpty: '#FFFFFF',       // White\n            strokeEmpty: '#9CA3AF',     // Gray-400\n            strokeSelected: '#374151',  // Gray-700\n            strokeWidth: 2,\n            \n            // Hover effects\n            hoverFill: '#F3F4F6',      // Gray-100\n            hoverStroke: '#6B7280',    // Gray-500\n            \n            // Selection effects\n            selectedFill: '#FEF3C7',   // Yellow-100\n            selectedStroke: '#F59E0B'  // Yellow-500\n        },\n        \n        // Stone styling\n        stone: {\n            radius: 15,\n            strokeWidth: 2,\n            shadowEnabled: true,\n            \n            // Player colors\n            red: {\n                fill: '#DC2626',        // Red-600\n                stroke: '#991B1B'       // Red-800\n            },\n            blue: {\n                fill: '#2563EB',        // Blue-600\n                stroke: '#1E40AF'       // Blue-800\n            }\n        },\n        \n        // Path visualization\n        path: {\n            strokeWidth: 4,\n            opacity: 0.7,\n            animationDuration: 1000,\n            \n            // Connection paths\n            connection: {\n                red: '#DC2626',\n                blue: '#2563EB',\n                winning: '#16A34A'      // Green-600\n            }\n        },\n        \n        // Goal areas\n        goals: {\n            red: {\n                left: '#FEE2E2',       // Red-100\n                right: '#FEE2E2'\n            },\n            blue: {\n                top: '#DBEAFE',        // Blue-100\n                bottom: '#DBEAFE'\n            }\n        }\n    },\n\n    // Responsive design breakpoints\n    responsive: {\n        mobile: 768,\n        tablet: 1024,\n        desktop: 1440,\n        \n        // Responsive hex sizes\n        hexSizes: {\n            mobile: { radius: 15, spacing: 26 },\n            tablet: { radius: 18, spacing: 32 },\n            desktop: { radius: 20, spacing: 35 }\n        }\n    }\n};\n\n/**\n * Hexagonal coordinate system utilities\n * Converts between different coordinate representations\n */\nexport const HEX_COORDINATES = {\n    /**\n     * Convert row/col to hexagonal coordinates\n     */\n    toHex(row, col) {\n        const q = col - Math.floor(row / 2);\n        const r = row;\n        return { q, r };\n    },\n\n    /**\n     * Convert hexagonal coordinates to row/col\n     */\n    fromHex(q, r) {\n        const row = r;\n        const col = q + Math.floor(r / 2);\n        return { row, col };\n    },\n\n    /**\n     * Calculate pixel position for hexagon\n     */\n    toPixel(row, col, hexRadius, hexSpacing, offsetX, offsetY) {\n        const x = offsetX + col * hexSpacing + (row % 2) * (hexSpacing / 2);\n        const y = offsetY + row * hexSpacing * 0.866; // sin(60¬∞) ‚âà 0.866\n        return { x, y };\n    },\n\n    /**\n     * Get neighbors for hexagonal grid\n     */\n    getNeighbors(row, col, boardSize = 11) {\n        const neighbors = [];\n        const isEvenRow = row % 2 === 0;\n        \n        // Hexagonal neighbor offsets\n        const offsets = isEvenRow \n            ? [[-1, -1], [-1, 0], [0, -1], [0, 1], [1, -1], [1, 0]]\n            : [[-1, 0], [-1, 1], [0, -1], [0, 1], [1, 0], [1, 1]];\n        \n        for (const [dRow, dCol] of offsets) {\n            const newRow = row + dRow;\n            const newCol = col + dCol;\n            \n            if (newRow >= 0 && newRow < boardSize && \n                newCol >= 0 && newCol < boardSize) {\n                neighbors.push({ row: newRow, col: newCol });\n            }\n        }\n        \n        return neighbors;\n    }\n};\n\n/**\n * Create dynamic Hex configuration based on game mode and settings\n * @param {string} gameMode - The selected game mode\n * @param {Object} options - Additional configuration options\n * @returns {Object} Customized configuration\n */\nexport function createHexConfig(gameMode = 'standard', options = {}) {\n    // Deep copy the configuration to avoid reference issues\n    const config = JSON.parse(JSON.stringify(HEX_UI_CONFIG));\n    \n    // Adjust settings based on game mode\n    switch (gameMode) {\n        case 'standard':\n            config.gameSettings.educational.showTopology = false;\n            config.gameSettings.debug.enabled = false;\n            break;\n            \n        case 'tournament':\n            config.gameSettings.educational.showTopology = false;\n            config.gameSettings.debug.enabled = false;\n            config.gameSettings.bitPacked.showStats = false;\n            config.animations.duration = 200; // Faster for competitive play\n            break;\n            \n        case 'educational':\n            config.gameSettings.educational.showTopology = true;\n            config.gameSettings.educational.highlightPaths = true;\n            config.gameSettings.educational.showCoordinates = true;\n            config.gameSettings.educational.explainMoves = true;\n            config.gameSettings.bitPacked.showStats = true;\n            config.keyboard['t'] = 'toggleTopology';\n            config.keyboard['T'] = 'toggleTopology';\n            break;\n            \n        case 'debug':\n            config.gameSettings.debug.enabled = true;\n            config.gameSettings.debug.showNeighbors = true;\n            config.gameSettings.debug.showPathfinding = true;\n            config.gameSettings.debug.logMoves = true;\n            config.gameSettings.educational.showCoordinates = true;\n            break;\n    }\n    \n    // Apply custom options\n    if (options.hexRadius) {\n        config.gameSettings.hexagon.radius = options.hexRadius;\n    }\n    \n    if (options.boardSize) {\n        config.gameSettings.boardSize = options.boardSize;\n    }\n    \n    if (options.educational !== undefined) {\n        Object.assign(config.gameSettings.educational, options.educational);\n    }\n    \n    return config;\n}\n\n/**\n * Default configuration for Hex Game\n * Used when no specific configuration is provided\n */\nexport const DEFAULT_HEX_CONFIG = createHexConfig('standard');"],"names":["HEX_UI_CONFIG","createHexConfig","gameMode","options","config"],"mappings":"4EAeO,MAAMA,EAAgB,CAEzB,SAAU,CAEN,SAAU,CACN,YACA,gBACA,YACZ,EAGQ,SAAU,CAEN,YACA,UACA,kBAGA,iBACA,eACA,cACA,mBAGA,aACA,eACA,cACA,qBACA,cAGA,eACA,iBACA,gBACA,oBAGA,WACA,YACA,iBAGA,cACA,gBACA,qBACA,mBAGA,YACA,aACA,gBACA,UACA,WACA,cACA,eACA,gBACA,kBACZ,CACA,EAGI,OAAQ,CACJ,KAAM,CACF,GAAI,YACJ,SAAU,KACV,cAAe,GACf,oBAAqB,EACjC,EAEQ,MAAO,CACH,GAAI,aACJ,SAAU,KACV,cAAe,GACf,oBAAqB,EACjC,EAEQ,SAAU,CACN,GAAI,gBACJ,SAAU,KACV,cAAe,GACf,oBAAqB,EACjC,EAEQ,SAAU,CACN,GAAI,gBACJ,SAAU,MACV,cAAe,GACf,oBAAqB,EACjC,CACA,EAGI,SAAU,CAEN,GAAM,aACN,GAAM,cACN,GAAM,iBACN,IAAO,iBAGP,EAAK,UACL,EAAK,UACL,EAAK,YACL,EAAK,YACL,EAAK,WACL,EAAK,WACL,EAAK,kBACL,EAAK,kBACL,EAAK,iBACL,EAAK,iBAGL,QAAW,eACX,UAAa,iBACb,UAAa,iBACb,WAAc,kBACd,MAAS,aACT,IAAK,aAGL,EAAK,cACL,EAAK,eAGL,IAAK,SACL,IAAK,UACL,EAAK,YAGL,EAAK,cACL,EAAK,cACL,EAAK,iBACL,EAAK,gBACb,EAGI,SAAU,CACN,SAAU,YACV,SAAU,IACV,YAAa,EACb,MAAO,CACH,KAAM,CACF,SAAU,IACV,UAAW,eACX,KAAM,IACtB,EACY,QAAS,CACL,SAAU,IACV,UAAW,kBACX,KAAM,GACtB,EACY,MAAO,CACH,SAAU,IACV,UAAW,gBACX,KAAM,GACtB,EACY,QAAS,CACL,SAAU,IACV,UAAW,kBACX,KAAM,IACtB,EACY,IAAK,CACD,SAAU,IACV,UAAW,cACX,KAAM,IACtB,EACY,KAAM,CACF,SAAU,IACV,UAAW,eACX,KAAM,GACtB,EACY,WAAY,CACR,SAAU,IACV,UAAW,kBACX,KAAM,IACtB,EACY,SAAU,CACN,SAAU,IACV,UAAW,eACX,KAAM,IACtB,CACA,CACA,EAGI,WAAY,CACR,SAAU,IACV,OAAQ,cAGR,WAAY,CACR,SAAU,IACV,OAAQ,UACpB,EAEQ,cAAe,CACX,SAAU,IACV,OAAQ,aACpB,EAEQ,iBAAkB,CACd,SAAU,IACV,OAAQ,aACpB,EAEQ,cAAe,CACX,SAAU,IACV,OAAQ,aACpB,EAEQ,YAAa,CACT,SAAU,IACV,OAAQ,aACpB,CACA,EAGI,aAAc,CAEV,UAAW,GAGX,QAAS,CACL,OAAQ,GACR,QAAS,GACT,YAAa,EACb,QAAS,GACT,QAAS,EACrB,EAGQ,QAAS,CACL,IAAK,CACD,MAAO,UACP,WAAY,UACZ,KAAM,aACN,MAAO,CAAC,OAAQ,OAAO,CACvC,EACY,KAAM,CACF,MAAO,UACP,WAAY,UACZ,KAAM,WACN,MAAO,CAAC,MAAO,QAAQ,CACvC,CACA,EAGQ,SAAU,WACV,aAAc,aAGd,UAAW,CACP,QAAS,GACT,UAAW,GACX,kBAAmB,EAC/B,EAGQ,YAAa,CACT,aAAc,GACd,eAAgB,GAChB,gBAAiB,GACjB,aAAc,EAC1B,EAGQ,MAAO,CACH,QAAS,GACT,cAAe,GACf,gBAAiB,GACjB,SAAU,EACtB,CACA,EAGI,OAAQ,CAEJ,MAAO,CACH,gBAAiB,UACjB,YAAa,UACb,UAAW,SACvB,EAGQ,QAAS,CACL,UAAW,UACX,YAAa,UACb,eAAgB,UAChB,YAAa,EAGb,UAAW,UACX,YAAa,UAGb,aAAc,UACd,eAAgB,SAC5B,EAGQ,MAAO,CACH,OAAQ,GACR,YAAa,EACb,cAAe,GAGf,IAAK,CACD,KAAM,UACN,OAAQ,SACxB,EACY,KAAM,CACF,KAAM,UACN,OAAQ,SACxB,CACA,EAGQ,KAAM,CACF,YAAa,EACb,QAAS,GACT,kBAAmB,IAGnB,WAAY,CACR,IAAK,UACL,KAAM,UACN,QAAS,SACzB,CACA,EAGQ,MAAO,CACH,IAAK,CACD,KAAM,UACN,MAAO,SACvB,EACY,KAAM,CACF,IAAK,UACL,OAAQ,SACxB,CACA,CACA,EAGI,WAAY,CACR,OAAQ,IACR,OAAQ,KACR,QAAS,KAGT,SAAU,CACN,OAAQ,CAAE,OAAQ,GAAI,QAAS,EAAE,EACjC,OAAQ,CAAE,OAAQ,GAAI,QAAS,EAAE,EACjC,QAAS,CAAE,OAAQ,GAAI,QAAS,EAAE,CAC9C,CACA,CACA,EAkEO,SAASC,EAAgBC,EAAW,WAAYC,EAAU,CAAA,EAAI,CAEjE,MAAMC,EAAS,KAAK,MAAM,KAAK,UAAUJ,CAAa,CAAC,EAGvD,OAAQE,EAAQ,CACZ,IAAK,WACDE,EAAO,aAAa,YAAY,aAAe,GAC/CA,EAAO,aAAa,MAAM,QAAU,GACpC,MAEJ,IAAK,aACDA,EAAO,aAAa,YAAY,aAAe,GAC/CA,EAAO,aAAa,MAAM,QAAU,GACpCA,EAAO,aAAa,UAAU,UAAY,GAC1CA,EAAO,WAAW,SAAW,IAC7B,MAEJ,IAAK,cACDA,EAAO,aAAa,YAAY,aAAe,GAC/CA,EAAO,aAAa,YAAY,eAAiB,GACjDA,EAAO,aAAa,YAAY,gBAAkB,GAClDA,EAAO,aAAa,YAAY,aAAe,GAC/CA,EAAO,aAAa,UAAU,UAAY,GAC1CA,EAAO,SAAS,EAAO,iBACvBA,EAAO,SAAS,EAAO,iBACvB,MAEJ,IAAK,QACDA,EAAO,aAAa,MAAM,QAAU,GACpCA,EAAO,aAAa,MAAM,cAAgB,GAC1CA,EAAO,aAAa,MAAM,gBAAkB,GAC5CA,EAAO,aAAa,MAAM,SAAW,GACrCA,EAAO,aAAa,YAAY,gBAAkB,GAClD,KACZ,CAGI,OAAID,EAAQ,YACRC,EAAO,aAAa,QAAQ,OAASD,EAAQ,WAG7CA,EAAQ,YACRC,EAAO,aAAa,UAAYD,EAAQ,WAGxCA,EAAQ,cAAgB,QACxB,OAAO,OAAOC,EAAO,aAAa,YAAaD,EAAQ,WAAW,EAG/DC,CACX,CAMkCH,EAAgB,UAAU"}