import"./modulepreload-polyfill-B5Qt9EMX.js";import{B as g}from"./DOMUtils-DkhNr1PH.js";import{_ as m,T as f}from"./game_engine-DD1aZRKp.js";import"./preload-helper-DDWtIbF5.js";const y={selectors:{board:"#game-board",targetNumber:"#target-number",solutionsFound:"#solutions-found",difficultySelector:"#difficulty-selector",newGameBtn:"#new-game-btn"},classes:{cell:"trio-cell",selected:"selected",solution:"solution"}};class b{constructor(e="kinderfreundlich"){this.engine=null,this.initialized=!1,this.difficulty=e,this.difficultyNumber=this.mapDifficultyToNumber(e),this.currentTarget=0,this.selectedPositions=[],this.solutionHistory=[],this.gameActive=!1,this.solutionsFound=0,this.totalMoves=0,this.onGameStateChange=null,this.onSolutionFound=null,this.onBoardGenerated=null,this.onError=null}async init(){try{return await m(),this.engine=new f(this.difficultyNumber),this.currentTarget=this.engine.get_target_number(),this.initialized=!0,this.gameActive=!0,this.triggerCallback("onBoardGenerated",{target:this.currentTarget,difficulty:this.difficulty,board:this.getBoard()}),!0}catch(e){return this.triggerCallback("onError",{error:e.message}),!1}}getNumber(e,t){return!this.initialized||e<0||e>=7||t<0||t>=7?0:this.engine.get_number(e,t)}getBoard(){if(!this.initialized)return Array(7).fill().map(()=>Array(7).fill(0));const e=[];for(let t=0;t<7;t++){e[t]=[];for(let i=0;i<7;i++)e[t][i]=this.engine.get_number(t,i)}return e}getBoardFlat(){return this.initialized?this.engine.get_board_array():Array(49).fill(0)}getTargetNumber(){return this.initialized?this.currentTarget:0}validateTrio(e){if(!this.initialized)return{valid:!1,result:-1,calculation:""};if(!e||e.length!==3)return{valid:!1,result:-1,calculation:""};const[t,i,s]=e;for(let o=0;o<3;o++){const n=e[o];if(!n||n.row<0||n.row>=7||n.col<0||n.col>=7)return{valid:!1,result:-1,calculation:""}}for(let o=0;o<3;o++)for(let n=o+1;n<3;n++)if(e[o].row===e[n].row&&e[o].col===e[n].col)return{valid:!1,result:-1,calculation:""};const l=this.engine.validate_trio(t.row,t.col,i.row,i.col,s.row,s.col),c=l!==-1;let r="";if(c){const o=this.engine.get_number(t.row,t.col),n=this.engine.get_number(i.row,i.col),u=this.engine.get_number(s.row,s.col),d=o*n+u,h=o*n-u;d===this.currentTarget?r=`${o} × ${n} + ${u} = ${d}`:h===this.currentTarget?r=`${o} × ${n} - ${u} = ${h}`:r=`${o} × ${n} ± ${u} = ${l}`}return{valid:c,result:l,calculation:r}}submitTrio(e){const t=this.validateTrio(e);return t.valid?(this.solutionHistory.push({positions:e.map(i=>({...i})),result:t.result,calculation:t.calculation,timestamp:Date.now(),moveNumber:this.totalMoves+1}),this.solutionsFound++,this.totalMoves++,this.triggerCallback("onSolutionFound",{validation:t,solutionsFound:this.solutionsFound,totalMoves:this.totalMoves}),this.triggerCallback("onGameStateChange",{type:"solution_found",data:t}),!0):(this.totalMoves++,this.triggerCallback("onGameStateChange",{type:"invalid_attempt",data:t}),!1)}generateNewBoard(e){if(!this.initialized)return!1;try{return this.difficulty=e||this.difficulty,this.difficultyNumber=this.mapDifficultyToNumber(this.difficulty),this.currentTarget=this.engine.generate_new_board(this.difficultyNumber),this.selectedPositions=[],this.solutionHistory=[],this.solutionsFound=0,this.totalMoves=0,this.gameActive=!0,this.triggerCallback("onBoardGenerated",{target:this.currentTarget,difficulty:this.difficulty,board:this.getBoard()}),this.triggerCallback("onGameStateChange",{type:"new_board",data:{target:this.currentTarget,difficulty:this.difficulty}}),!0}catch(t){return this.triggerCallback("onError",{error:t.message}),!1}}findAllSolutions(){if(!this.initialized)return[];try{const e=this.engine.find_all_solutions(),t=[];for(let i=0;i<e.length;i+=7){const s={positions:[{row:e[i],col:e[i+1]},{row:e[i+2],col:e[i+3]},{row:e[i+4],col:e[i+5]}],result:e[i+6]},l=this.validateTrio(s.positions);s.calculation=l.calculation,t.push(s)}return t}catch(e){return this.triggerCallback("onError",{error:e.message}),[]}}getGameStats(){return{difficulty:this.difficulty,difficultyNumber:this.difficultyNumber,target:this.currentTarget,solutionsFound:this.solutionsFound,totalMoves:this.totalMoves,gameActive:this.gameActive,memoryUsage:this.initialized?this.engine.memory_usage():0,memoryEfficiency:this.initialized?this.engine.memory_efficiency():0}}resetGame(){this.selectedPositions=[],this.solutionHistory=[],this.solutionsFound=0,this.totalMoves=0,this.gameActive=!0,this.triggerCallback("onGameStateChange",{type:"reset",data:this.getGameStats()})}mapDifficultyToNumber(e){switch(e.toLowerCase()){case"kinderfreundlich":return 1;case"vollspektrum":return 2;case"strategisch":return 3;case"analytisch":return 4;default:return 2}}mapDifficultyToString(e){switch(e){case 1:return"kinderfreundlich";case 2:return"vollspektrum";case 3:return"strategisch";case 4:return"analytisch";default:return"vollspektrum"}}triggerCallback(e,t){if(this[e]&&typeof this[e]=="function")try{this[e](t)}catch{}}setCallback(e,t){typeof t=="function"&&(this[e]=t)}getCurrentDifficulty(){return this.difficulty}isInitialized(){return this.initialized}isGameActive(){return this.gameActive}getSolutionHistory(){return[...this.solutionHistory]}getMemoryInfo(){return this.initialized?{usage:this.engine.memory_usage(),efficiency:this.engine.memory_efficiency()}:{usage:0,efficiency:0}}}class p extends g{constructor(){const e=new b;super(e,y),this.selectedCells=[],this.currentTarget=0,this.gameActive=!1,this.solutionsFound=0,this.totalMoves=0,this.currentDifficulty="vollspektrum",this.animationEnabled=!0,this.lastSelectedCell=null,this.highlightedCells=new Set,this.gameMode="puzzle"}async init(){try{return await this.game.init(),await super.init(),this.setupTrioUI(),this.setupGameCallbacks(),this.updateGameDisplay(),!0}catch{return this.showMessage("Fehler beim Initialisieren des Spiels","error"),!1}}setupTrioUI(){this.createNumberGrid(),this.setupCellClickHandlers(),this.setupDifficultySelector(),this.updateTargetDisplay(),this.updateGameStats()}createNumberGrid(){const e=this.elements.numberGrid;if(!e)return;e.innerHTML="",e.className="trio-number-grid";const t=this.game.getBoard();for(let i=0;i<7;i++)for(let s=0;s<7;s++){const l=this.createNumberCell(i,s,t[i][s]);e.appendChild(l)}}createNumberCell(e,t,i){const s=document.createElement("div");return s.className="trio-cell",s.dataset.row=e,s.dataset.col=t,s.textContent=i,s.style.cssText=`
            display: flex;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
        `,s.addEventListener("mouseenter",()=>{this.isSelected(e,t)||(s.style.background="rgba(255, 255, 255, 0.2)",s.style.transform="scale(1.05)")}),s.addEventListener("mouseleave",()=>{this.isSelected(e,t)||(s.style.background="rgba(255, 255, 255, 0.1)",s.style.transform="scale(1)")}),s}setupCellClickHandlers(){const e=this.elements.numberGrid;e&&e.addEventListener("click",t=>{const i=t.target.closest(".trio-cell");if(!i)return;const s=parseInt(i.dataset.row),l=parseInt(i.dataset.col);this.handleCellClick(s,l)})}handleCellClick(e,t){if(!this.gameActive){this.showMessage("Spiel nicht aktiv","info");return}const i=this.selectedCells.findIndex(s=>s.row===e&&s.col===t);if(i>=0)this.selectedCells.splice(i,1),this.updateCellSelection(e,t,!1);else{if(this.selectedCells.length>=3){this.showMessage("Maximal 3 Zellen auswählen","warning");return}this.selectedCells.push({row:e,col:t}),this.updateCellSelection(e,t,!0)}this.updateSelectedDisplay(),this.updateSubmitButton(),this.selectedCells.length===3&&setTimeout(()=>this.submitSolution(),300)}updateCellSelection(e,t,i){const s=document.querySelector(`[data-row="${e}"][data-col="${t}"]`);s&&(i?(s.style.background="rgba(34, 197, 94, 0.6)",s.style.borderColor="rgba(34, 197, 94, 1)",s.style.transform="scale(1.1)",s.style.boxShadow="0 4px 20px rgba(34, 197, 94, 0.4)"):(s.style.background="rgba(255, 255, 255, 0.1)",s.style.borderColor="rgba(255, 255, 255, 0.2)",s.style.transform="scale(1)",s.style.boxShadow="none"))}isSelected(e,t){return this.selectedCells.some(i=>i.row===e&&i.col===t)}updateSelectedDisplay(){const e=this.elements.selectedDisplay;if(!e)return;if(this.selectedCells.length===0){e.innerHTML='<span class="text-gray-400">Keine Auswahl</span>';return}const t=this.selectedCells.map(s=>this.game.getNumber(s.row,s.col)),i=this.selectedCells.map(s=>`(${s.row+1}, ${s.col+1})`);e.innerHTML=`
            <div class="flex items-center space-x-2">
                <span class="text-white font-semibold">${t.join(" × ")}</span>
                <span class="text-gray-400">${i.join(", ")}</span>
            </div>
        `;for(let s=0;s<3;s++){const l=this.elements[`selected${s+1}`];l&&(l.textContent=s<t.length?t[s]:"?")}this.selectedCells.length===3&&this.updateCalculatedResult()}updateCalculatedResult(){const e=this.elements.calculatedResult;if(!e)return;if(this.selectedCells.length!==3){e.textContent="?";return}const t=this.selectedCells.map(n=>this.game.getNumber(n.row,n.col)),[i,s,l]=t,c=i*s+l,r=i*s-l,o=this.game.getTargetNumber();c===o?e.innerHTML=`<span class="text-green-400 font-bold">${c}</span>`:r===o?e.innerHTML=`<span class="text-green-400 font-bold">${r}</span>`:e.innerHTML=`<span class="text-red-400">${c}/${r}</span>`}updateSubmitButton(){const e=this.elements.submitSolutionBtn;if(!e)return;const t=this.selectedCells.length===3;e.disabled=!t,e.classList.toggle("opacity-50",!t)}submitSolution(){if(this.selectedCells.length!==3){this.showMessage("Bitte wählen Sie 3 Zellen aus","warning");return}this.game.submitTrio(this.selectedCells)?(this.showMessage("Lösung gefunden! 🎉","success"),this.highlightCorrectSolution(),this.updateGameStats(),setTimeout(()=>{this.clearSelection()},2e3)):(this.showMessage("Nicht korrekt. Versuchen Sie es erneut.","error"),this.animateIncorrectSolution())}highlightCorrectSolution(){this.selectedCells.forEach(e=>{const t=document.querySelector(`[data-row="${e.row}"][data-col="${e.col}"]`);t&&(t.style.background="rgba(34, 197, 94, 0.8)",t.style.animation="pulse 0.5s ease-in-out 3")})}animateIncorrectSolution(){this.selectedCells.forEach(e=>{const t=document.querySelector(`[data-row="${e.row}"][data-col="${e.col}"]`);t&&(t.style.background="rgba(239, 68, 68, 0.6)",t.style.animation="shake 0.5s ease-in-out")}),setTimeout(()=>{this.selectedCells.forEach(e=>{this.updateCellSelection(e.row,e.col,!0)})},500)}clearSelection(){this.selectedCells.forEach(e=>{this.updateCellSelection(e.row,e.col,!1)}),this.selectedCells=[],this.updateSelectedDisplay(),this.updateSubmitButton()}setupGameCallbacks(){this.game.setCallback("onGameStateChange",e=>{this.handleGameStateChange(e)}),this.game.setCallback("onSolutionFound",e=>{this.handleSolutionFound(e)}),this.game.setCallback("onBoardGenerated",e=>{this.handleBoardGenerated(e)}),this.game.setCallback("onError",e=>{this.handleGameError(e)})}handleGameStateChange(e){switch(e.type){case"new_board":this.currentTarget=e.data.target,this.currentDifficulty=e.data.difficulty,this.clearSelection(),this.createNumberGrid(),this.updateTargetDisplay(),this.updateGameStats();break;case"solution_found":this.solutionsFound=this.game.getGameStats().solutionsFound,this.totalMoves=this.game.getGameStats().totalMoves,this.updateGameStats();break;case"reset":this.clearSelection(),this.updateGameStats();break}}handleSolutionFound(e){this.updateSolutionHistory(),this.updateGameStats()}handleBoardGenerated(e){this.currentTarget=e.target,this.currentDifficulty=e.difficulty,this.gameActive=!0,this.createNumberGrid(),this.updateTargetDisplay(),this.updateGameStats(),this.showMessage(`Neues Spiel: Ziel ${e.target}`,"info")}handleGameError(e){this.showMessage(`Fehler: ${e.error}`,"error")}updateTargetDisplay(){const e=this.elements.targetNumber;e&&(e.textContent=this.game.getTargetNumber());const t=this.elements.targetDisplay;t&&(t.innerHTML=`
                <div class="text-center">
                    <div class="text-4xl font-bold text-white">${this.game.getTargetNumber()}</div>
                    <div class="text-sm text-gray-300">Ziel</div>
                </div>
            `)}updateGameStats(){const e=this.game.getGameStats();this.elements.realizedCount&&(this.elements.realizedCount.textContent=e.solutionsFound),this.elements.moveCounter&&(this.elements.moveCounter.textContent=e.totalMoves),this.updateGameStatus()}updateGameStatus(){const e=this.elements.gameStatus;if(!e)return;const t=this.game.getGameStats();t.solutionsFound>0?(e.textContent=`${t.solutionsFound} Lösung${t.solutionsFound===1?"":"en"} gefunden`,e.className="text-green-400 font-semibold"):t.totalMoves>0?(e.textContent=`${t.totalMoves} Versuch${t.totalMoves===1?"":"e"}`,e.className="text-yellow-400 font-semibold"):(e.textContent="Bereit zum Spielen",e.className="text-white font-semibold")}updateSolutionHistory(){const e=this.elements.solutionHistory;if(!e)return;const t=this.game.getSolutionHistory();e.innerHTML="",t.forEach((i,s)=>{const l=document.createElement("div");l.className="solution-history-item p-2 border-b border-gray-600",l.innerHTML=`
                <div class="text-sm text-gray-300">#${s+1}</div>
                <div class="text-white font-mono">${i.calculation}</div>
                <div class="text-xs text-gray-400">Zug ${i.moveNumber}</div>
            `,e.appendChild(l)})}setupDifficultySelector(){const e=this.elements.gameMode;e&&(e.innerHTML=`
            <option value="kinderfreundlich">Kinderfreundlich</option>
            <option value="vollspektrum" selected>Vollspektrum</option>
            <option value="strategisch">Strategisch</option>
            <option value="analytisch">Analytisch</option>
        `,e.addEventListener("change",t=>{this.changeDifficulty(t.target.value)}))}changeDifficulty(e){this.currentDifficulty=e,this.game.generateNewBoard(e),this.showMessage(`Schwierigkeit: ${e}`,"info")}newGame(){this.game.generateNewBoard(this.currentDifficulty),this.showMessage("Neues Spiel gestartet","success")}showSolution(){const e=this.game.findAllSolutions();if(e.length===0){this.showMessage("Keine Lösungen gefunden","warning");return}this.showMessage(`${e.length} Lösung${e.length===1?"":"en"} gefunden`,"info");const t=e[0];this.selectedCells=t.positions,this.updateSelectedDisplay(),t.positions.forEach(i=>{this.updateCellSelection(i.row,i.col,!0)})}updateGameDisplay(){this.updateTargetDisplay(),this.updateGameStats(),this.updateSelectedDisplay(),this.updateSubmitButton()}showMessage(e,t="info"){const i=document.createElement("div");switch(i.className="fixed top-4 right-4 z-50 px-6 py-3 rounded-xl shadow-lg text-white font-semibold transition-all duration-300 transform translate-x-full",t){case"success":i.classList.add("bg-green-500");break;case"error":i.classList.add("bg-red-500");break;case"warning":i.classList.add("bg-yellow-500");break;default:i.classList.add("bg-blue-500")}i.textContent=e,document.body.appendChild(i),setTimeout(()=>{i.classList.remove("translate-x-full")},100),setTimeout(()=>{i.classList.add("translate-x-full"),setTimeout(()=>{document.body.contains(i)&&document.body.removeChild(i)},300)},3e3)}handleKeyboardShortcut(e){switch(e){case"newGame":this.newGame();break;case"clearSelection":this.clearSelection();break;case"submitSolution":this.submitSolution();break;case"showSolution":this.showSolution();break;case"startGame":this.newGame();break;case"toggleHelp":this.toggleHelp();break;default:}}}document.addEventListener("DOMContentLoaded",async()=>{try{const a=new p;if(await a.init()){const t=document.getElementById("loadingScreen");t&&(t.style.display="none"),document.getElementById("newGameBtn").addEventListener("click",()=>{a.newGame()}),document.getElementById("clearSelectionBtn").addEventListener("click",()=>{a.clearSelection()}),document.getElementById("submitSolutionBtn").addEventListener("click",()=>{a.submitSolution()}),document.getElementById("showSolutionBtn").addEventListener("click",()=>{a.showSolution()}),document.getElementById("helpBtn")?.addEventListener("click",()=>{document.getElementById("helpModal").classList.remove("hidden")}),document.getElementById("closeHelpBtn").addEventListener("click",()=>{document.getElementById("helpModal").classList.add("hidden")}),document.addEventListener("keydown",i=>{i.key==="F1"&&(i.preventDefault(),document.getElementById("helpModal").classList.toggle("hidden"))}),window.trioUI=a}else document.getElementById("loadingScreen").innerHTML=`
                        <div class="glass rounded-2xl p-8 text-center">
                            <div class="text-red-500 text-6xl mb-4">❌</div>
                            <h2 class="text-2xl font-bold text-white mb-2">Fehler beim Laden</h2>
                            <p class="text-white opacity-75">Trio konnte nicht initialisiert werden</p>
                        </div>
                    `}catch(a){document.getElementById("loadingScreen").innerHTML=`
                    <div class="glass rounded-2xl p-8 text-center">
                        <div class="text-red-500 text-6xl mb-4">❌</div>
                        <h2 class="text-2xl font-bold text-white mb-2">Initialisierungsfehler</h2>
                        <p class="text-white opacity-75">${a.message}</p>
                    </div>
                `}});
//# sourceMappingURL=trio-BM9uFnI3.js.map
