import"./modulepreload-polyfill-B5Qt9EMX.js";import"./SoundManager-l0sNRNKZ.js";import{B as m}from"./DOMUtils-DkhNr1PH.js";import"./preload-helper-DDWtIbF5.js";const c={elements:{required:["gameBoard","currentPlayer","gameStatus"],optional:["hex-board","hex-svg","board-container","current-player","move-counter","game-status","player-indicator","newGameBtn","resetGameBtn","undoMoveBtn","showConnectionsBtn","analysisBtn","memory-stats","bitpacked-info","path-analysis","connection-status","red-goal","blue-goal","winner-display","debug-panel","topology-info","coordinate-display","loading-progress","helpModal","rulesModal","topologyModal","helpBtn","rulesBtn","topologyBtn","closeHelpBtn","closeRulesBtn","closeTopologyBtn"]},modals:{help:{id:"helpModal",closeKey:"F1",closeOnEscape:!0,closeOnOutsideClick:!0},rules:{id:"rulesModal",closeKey:"F2",closeOnEscape:!0,closeOnOutsideClick:!0},topology:{id:"topologyModal",closeKey:"F3",closeOnEscape:!0,closeOnOutsideClick:!1},analysis:{id:"analysisModal",closeKey:"F12",closeOnEscape:!0,closeOnOutsideClick:!1}},keyboard:{F1:"toggleHelp",F2:"toggleRules",F3:"toggleTopology",F12:"toggleAnalysis",n:"newGame",N:"newGame",r:"resetGame",R:"resetGame",u:"undoMove",U:"undoMove",c:"showConnections",C:"showConnections",a:"toggleAnalysis",A:"toggleAnalysis",ArrowUp:"moveCursorUp",ArrowDown:"moveCursorDown",ArrowLeft:"moveCursorLeft",ArrowRight:"moveCursorRight",Enter:"selectCell"," ":"selectCell",1:"switchToRed",2:"switchToBlue","+":"zoomIn","-":"zoomOut",0:"resetZoom",d:"toggleDebug",D:"toggleDebug",t:"toggleTopology",T:"toggleTopology"},messages:{position:"top-right",duration:3e3,maxMessages:5,types:{info:{duration:3e3,className:"message-info",icon:"ℹ️"},success:{duration:4e3,className:"message-success",icon:"✅"},error:{duration:5e3,className:"message-error",icon:"❌"},warning:{duration:4e3,className:"message-warning",icon:"⚠️"},win:{duration:6e3,className:"message-win",icon:"🎉"},move:{duration:2e3,className:"message-info",icon:"⬡"},connection:{duration:4e3,className:"message-success",icon:"🔗"},topology:{duration:5e3,className:"message-info",icon:"🧮"}}},animations:{duration:400,easing:"ease-in-out",stonePlace:{duration:300,easing:"ease-out"},pathHighlight:{duration:500,easing:"ease-in-out"},connectionReveal:{duration:800,easing:"ease-in-out"},boardRotation:{duration:600,easing:"ease-in-out"},winningPath:{duration:1e3,easing:"ease-in-out"}},gameSettings:{boardSize:11,hexagon:{radius:20,spacing:35,strokeWidth:2,offsetX:50,offsetY:50},players:{red:{color:"#DC2626",lightColor:"#FCA5A5",goal:"horizontal",sides:["left","right"]},blue:{color:"#2563EB",lightColor:"#93C5FD",goal:"vertical",sides:["top","bottom"]}},gameMode:"standard",winCondition:"connection",bitPacked:{enabled:!0,showStats:!0,displayEfficiency:!0},educational:{showTopology:!1,highlightPaths:!0,showCoordinates:!1,explainMoves:!1},debug:{enabled:!1,showNeighbors:!1,showPathfinding:!1,logMoves:!1}},visual:{board:{backgroundColor:"#F9FAFB",borderColor:"#E5E7EB",gridColor:"#D1D5DB"},hexagon:{fillEmpty:"#FFFFFF",strokeEmpty:"#9CA3AF",strokeSelected:"#374151",strokeWidth:2,hoverFill:"#F3F4F6",hoverStroke:"#6B7280",selectedFill:"#FEF3C7",selectedStroke:"#F59E0B"},stone:{radius:15,strokeWidth:2,shadowEnabled:!0,red:{fill:"#DC2626",stroke:"#991B1B"},blue:{fill:"#2563EB",stroke:"#1E40AF"}},path:{strokeWidth:4,opacity:.7,animationDuration:1e3,connection:{red:"#DC2626",blue:"#2563EB",winning:"#16A34A"}},goals:{red:{left:"#FEE2E2",right:"#FEE2E2"},blue:{top:"#DBEAFE",bottom:"#DBEAFE"}}},responsive:{mobile:768,tablet:1024,desktop:1440,hexSizes:{mobile:{radius:15,spacing:26},tablet:{radius:18,spacing:32},desktop:{radius:20,spacing:35}}}},g={toHex(a,t){return{q:t-Math.floor(a/2),r:a}},fromHex(a,t){const e=t,s=a+Math.floor(t/2);return{row:e,col:s}},toPixel(a,t,e,s,o,n){const i=o+t*s+a%2*(s/2),l=n+a*s*.866;return{x:i,y:l}},getNeighbors(a,t,e=11){const s=[],n=a%2===0?[[-1,-1],[-1,0],[0,-1],[0,1],[1,-1],[1,0]]:[[-1,0],[-1,1],[0,-1],[0,1],[1,0],[1,1]];for(const[i,l]of n){const r=a+i,h=t+l;r>=0&&r<e&&h>=0&&h<e&&s.push({row:r,col:h})}return s}};function u(a="standard",t={}){const e=JSON.parse(JSON.stringify(c));switch(a){case"standard":e.gameSettings.educational.showTopology=!1,e.gameSettings.debug.enabled=!1;break;case"tournament":e.gameSettings.educational.showTopology=!1,e.gameSettings.debug.enabled=!1,e.gameSettings.bitPacked.showStats=!1,e.animations.duration=200;break;case"educational":e.gameSettings.educational.showTopology=!0,e.gameSettings.educational.highlightPaths=!0,e.gameSettings.educational.showCoordinates=!0,e.gameSettings.educational.explainMoves=!0,e.gameSettings.bitPacked.showStats=!0,e.keyboard.t="toggleTopology",e.keyboard.T="toggleTopology";break;case"debug":e.gameSettings.debug.enabled=!0,e.gameSettings.debug.showNeighbors=!0,e.gameSettings.debug.showPathfinding=!0,e.gameSettings.debug.logMoves=!0,e.gameSettings.educational.showCoordinates=!0;break}return t.hexRadius&&(e.gameSettings.hexagon.radius=t.hexRadius),t.boardSize&&(e.gameSettings.boardSize=t.boardSize),t.educational!==void 0&&Object.assign(e.gameSettings.educational,t.educational),e}u("standard");class f extends m{constructor(t){super(t,c),this.boardSize=11,this.currentPlayer=1,this.moveCount=0,this.gameOver=!1,this.winner=null,this.moveHistory=[],this.hexRadius=20,this.hexSpacing=35,this.boardOffsetX=50,this.boardOffsetY=50,this.svgWidth=500,this.svgHeight=500,this.board=[],this.svgElement=null,this.hexElements=[],this.pathElements=[],this.showingConnections=!1,this.showingTopology=!1,this.debugMode=!1,this.selectedCell=null,this.cursorPosition={row:5,col:5},this.memoryStats={naiveSize:0,bitPackedSize:0,efficiency:0},this.handleCellClick=this.handleCellClick.bind(this),this.handleResetGame=this.handleResetGame.bind(this),this.handleUndoMove=this.handleUndoMove.bind(this),this.handleShowConnections=this.handleShowConnections.bind(this),this.handleToggleAnalysis=this.handleToggleAnalysis.bind(this),this.handleToggleTopology=this.handleToggleTopology.bind(this),this.handleToggleDebug=this.handleToggleDebug.bind(this),this.handleSwitchPlayer=this.handleSwitchPlayer.bind(this)}async beforeInit(){this.config=u("standard"),this.hexRadius=this.config.gameSettings.hexagon.radius,this.hexSpacing=this.config.gameSettings.hexagon.spacing,this.boardOffsetX=this.config.gameSettings.hexagon.offsetX,this.boardOffsetY=this.config.gameSettings.hexagon.offsetY,this.initializeBoard()}async afterInit(){this.createHexBoard(),this.updateUI(),this.initResponsiveHandling()}setupGameEventListeners(){super.setupGameEventListeners(),Object.entries({moveCompleted:e=>this.onMoveCompleted(e),connectionFound:e=>this.onConnectionFound(e),gameWon:e=>this.onGameWon(e),gameReset:()=>this.onGameReset(),playerChanged:e=>this.onPlayerChanged(e),pathUpdated:e=>this.onPathUpdated(e),memoryStatsUpdated:e=>this.onMemoryStatsUpdated(e)}).forEach(([e,s])=>{this.game&&typeof this.game.on=="function"&&this.game.on(e,s)})}setupUIEventListeners(){super.setupUIEventListeners();const t={resetGameBtn:this.handleResetGame,undoMoveBtn:this.handleUndoMove,showConnectionsBtn:this.handleShowConnections,analysisBtn:this.handleToggleAnalysis,topologyBtn:this.handleToggleTopology,debugBtn:this.handleToggleDebug};Object.entries(t).forEach(([e,s])=>{this.elements[e]&&this.elements[e].addEventListener("click",s)})}bindKeyboardActions(t){super.bindKeyboardActions(t);const e={resetGame:()=>this.handleResetGame(),undoMove:()=>this.handleUndoMove(),showConnections:()=>this.handleShowConnections(),toggleAnalysis:()=>this.handleToggleAnalysis(),toggleTopology:()=>this.handleToggleTopology(),toggleDebug:()=>this.handleToggleDebug(),switchToRed:()=>this.handleSwitchPlayer(1),switchToBlue:()=>this.handleSwitchPlayer(2),moveCursorUp:()=>this.moveCursor(0,-1),moveCursorDown:()=>this.moveCursor(0,1),moveCursorLeft:()=>this.moveCursor(-1,0),moveCursorRight:()=>this.moveCursor(1,0),selectCell:()=>this.selectCurrentCell(),zoomIn:()=>this.zoomBoard(1.2),zoomOut:()=>this.zoomBoard(.8),resetZoom:()=>this.resetZoom()};Object.entries(this.config.keyboard).forEach(([s,o])=>{e[o]&&t.register(s,o,e[o])})}initializeBoard(){this.board=[];for(let t=0;t<this.boardSize;t++){this.board[t]=[];for(let e=0;e<this.boardSize;e++)this.board[t][e]=0}}createHexBoard(){this.elements.gameBoard&&(this.elements.gameBoard.innerHTML="",this.hexElements=[],this.calculateSVGDimensions(),this.svgElement=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.svgElement.setAttribute("width",this.svgWidth),this.svgElement.setAttribute("height",this.svgHeight),this.svgElement.setAttribute("viewBox",`0 0 ${this.svgWidth} ${this.svgHeight}`),this.svgElement.style.cssText=`
            background-color: ${this.config.visual.board.backgroundColor};
            border: 2px solid ${this.config.visual.board.borderColor};
            border-radius: 8px;
            margin: 0 auto;
            display: block;
        `,this.createHexagonGrid(),this.createGoalIndicators(),this.elements.gameBoard.appendChild(this.svgElement))}calculateSVGDimensions(){const t=this.boardSize-1,e=this.boardSize-1,s=this.boardOffsetX+t*this.hexSpacing+e%2*(this.hexSpacing/2)+this.hexRadius*2,o=this.boardOffsetY+e*this.hexSpacing*.866+this.hexRadius*2;this.svgWidth=Math.max(500,s+this.boardOffsetX),this.svgHeight=Math.max(500,o+this.boardOffsetY)}createHexagonGrid(){for(let t=0;t<this.boardSize;t++){this.hexElements[t]=[];for(let e=0;e<this.boardSize;e++){const s=this.createHexagon(t,e);this.svgElement.appendChild(s),this.hexElements[t][e]=s}}}createHexagon(t,e){const{x:s,y:o}=g.toPixel(t,e,this.hexRadius,this.hexSpacing,this.boardOffsetX,this.boardOffsetY),n=this.generateHexagonPath(s,o,this.hexRadius),i=document.createElementNS("http://www.w3.org/2000/svg","path");return i.setAttribute("d",n),i.setAttribute("fill",this.config.visual.hexagon.fillEmpty),i.setAttribute("stroke",this.config.visual.hexagon.strokeEmpty),i.setAttribute("stroke-width",this.config.visual.hexagon.strokeWidth),i.style.cursor="pointer",i.style.transition="all 0.2s ease",i.dataset.row=t,i.dataset.col=e,i.dataset.position=`${t},${e}`,i.addEventListener("click",this.handleCellClick),i.addEventListener("mouseenter",()=>this.handleCellHover(t,e,!0)),i.addEventListener("mouseleave",()=>this.handleCellHover(t,e,!1)),i}generateHexagonPath(t,e,s){const o=[];for(let n=0;n<6;n++){const i=Math.PI/3*n,l=t+s*Math.cos(i),r=e+s*Math.sin(i);o.push(`${l},${r}`)}return`M ${o[0]} L ${o.slice(1).join(" L ")} Z`}createGoalIndicators(){this.createGoalArea("red","left"),this.createGoalArea("red","right"),this.createGoalArea("blue","top"),this.createGoalArea("blue","bottom")}createGoalArea(t,e){}handleCellClick(t){const e=t.currentTarget,s=parseInt(e.dataset.row),o=parseInt(e.dataset.col);if(this.gameOver){this.showMessage("Spiel ist beendet!","warning");return}if(this.board[s][o]!==0){this.showMessage("Feld bereits besetzt!","warning");return}this.makeMove(s,o)}handleCellHover(t,e,s){const o=this.hexElements[t][e];o&&(s&&this.board[t][e]===0&&!this.gameOver?(o.setAttribute("fill",this.config.visual.hexagon.hoverFill),o.setAttribute("stroke",this.config.visual.hexagon.hoverStroke)):s||this.board[t][e]===0&&(o.setAttribute("fill",this.config.visual.hexagon.fillEmpty),o.setAttribute("stroke",this.config.visual.hexagon.strokeEmpty)))}makeMove(t,e){this.board[t][e]=this.currentPlayer,this.moveCount++,this.updateHexagon(t,e,this.currentPlayer),this.checkWinCondition()?(this.gameOver=!0,this.winner=this.currentPlayer,this.showMessage(`🎉 ${this.getPlayerName(this.currentPlayer)} hat gewonnen!`,"win"),this.highlightWinningPath()):(this.currentPlayer=this.currentPlayer===1?2:1,this.updatePlayerDisplay(),this.showMessage(`Zug: ${this.getPlayerName(this.currentPlayer===1?2:1)} → ${this.getPlayerName(this.currentPlayer)}`,"move")),this.moveHistory.push({row:t,col:e,player:this.board[t][e]}),this.updateMoveCounter()}updateHexagon(t,e,s){const o=this.hexElements[t][e];if(!o)return;const n=this.config.visual.stone;s===1?(o.setAttribute("fill",n.red.fill),o.setAttribute("stroke",n.red.stroke)):s===2?(o.setAttribute("fill",n.blue.fill),o.setAttribute("stroke",n.blue.stroke)):(o.setAttribute("fill",this.config.visual.hexagon.fillEmpty),o.setAttribute("stroke",this.config.visual.hexagon.strokeEmpty))}checkWinCondition(){return this.currentPlayer===1?this.hasConnection(1,"horizontal"):this.hasConnection(2,"vertical")}hasConnection(t,e){const s=new Set;if(e==="horizontal"){for(let o=0;o<this.boardSize;o++)if(this.board[o][0]===t&&this.dfsConnection(o,0,t,e,s))return!0}else for(let o=0;o<this.boardSize;o++)if(this.board[0][o]===t&&this.dfsConnection(0,o,t,e,s))return!0;return!1}dfsConnection(t,e,s,o,n){const i=`${t},${e}`;if(n.has(i))return!1;if(n.add(i),o==="horizontal"&&e===this.boardSize-1||o==="vertical"&&t===this.boardSize-1)return!0;const l=g.getNeighbors(t,e,this.boardSize);for(const r of l)if(this.board[r.row][r.col]===s&&this.dfsConnection(r.row,r.col,s,o,n))return!0;return!1}highlightWinningPath(){}getPlayerName(t){return t===1?"Rot":"Blau"}handleResetGame(){this.initializeBoard(),this.currentPlayer=1,this.moveCount=0,this.gameOver=!1,this.winner=null,this.moveHistory=[];for(let t=0;t<this.boardSize;t++)for(let e=0;e<this.boardSize;e++)this.updateHexagon(t,e,0);this.updateUI(),this.showMessage("Spiel zurückgesetzt!","info")}handleUndoMove(){if(this.moveHistory.length===0){this.showMessage("Kein Zug zum Rückgängigmachen!","warning");return}const t=this.moveHistory.pop();this.board[t.row][t.col]=0,this.updateHexagon(t.row,t.col,0),this.currentPlayer=t.player,this.moveCount--,this.gameOver=!1,this.winner=null,this.updateUI(),this.showMessage("Zug rückgängig gemacht!","info")}handleShowConnections(){this.showingConnections=!this.showingConnections,this.showingConnections?(this.visualizeConnections(),this.showMessage("Verbindungen werden angezeigt","info")):(this.clearConnectionVisualization(),this.showMessage("Verbindungsanzeige entfernt","info"))}visualizeConnections(){}clearConnectionVisualization(){}handleToggleAnalysis(){this.showMessage("Analyse-Modus umgeschaltet","info")}handleToggleTopology(){this.showingTopology=!this.showingTopology,this.showMessage(`Topologie-Modus: ${this.showingTopology?"AN":"AUS"}`,"topology")}handleToggleDebug(){this.debugMode=!this.debugMode,this.debugMode?(this.showDebugInfo(),this.showMessage("Debug-Modus aktiviert","info")):(this.hideDebugInfo(),this.showMessage("Debug-Modus deaktiviert","info"))}showDebugInfo(){}hideDebugInfo(){}handleSwitchPlayer(t){this.gameOver||(this.currentPlayer=t,this.updatePlayerDisplay(),this.showMessage(`Spieler gewechselt zu: ${this.getPlayerName(t)}`,"info"))}moveCursor(t,e){const s=Math.max(0,Math.min(this.boardSize-1,this.cursorPosition.row+e)),o=Math.max(0,Math.min(this.boardSize-1,this.cursorPosition.col+t));this.selectedCell&&this.selectedCell.setAttribute("stroke",this.config.visual.hexagon.strokeEmpty),this.cursorPosition={row:s,col:o},this.selectedCell=this.hexElements[s][o],this.selectedCell.setAttribute("stroke",this.config.visual.hexagon.strokeSelected)}selectCurrentCell(){this.selectedCell&&this.handleCellClick({currentTarget:this.selectedCell})}zoomBoard(t){const e=this.svgElement.style.transform||"scale(1)",s=parseFloat(e.match(/scale\(([^)]+)\)/)?.[1]||1),o=Math.max(.5,Math.min(2,s*t));this.svgElement.style.transform=`scale(${o})`,this.svgElement.style.transformOrigin="center",this.showMessage(`Zoom: ${Math.round(o*100)}%`,"info")}resetZoom(){this.svgElement.style.transform="scale(1)",this.showMessage("Zoom zurückgesetzt","info")}updatePlayerDisplay(){if(this.elements["current-player"]){const t=this.getPlayerName(this.currentPlayer),e=this.currentPlayer===1?"text-red-600":"text-blue-600";this.elements["current-player"].className=`text-lg font-bold ${e}`,this.elements["current-player"].textContent=t}}updateMoveCounter(){this.elements["move-counter"]&&(this.elements["move-counter"].textContent=this.moveCount)}updateUI(){this.updatePlayerDisplay(),this.updateMoveCounter(),this.updateGameStatus()}updateGameStatus(){this.elements.gameStatus&&(this.gameOver?this.elements.gameStatus.textContent=`${this.getPlayerName(this.winner)} hat gewonnen!`:this.elements.gameStatus.textContent=`${this.getPlayerName(this.currentPlayer)} ist am Zug`)}initResponsiveHandling(){const t=()=>{const e=window.innerWidth;let s=this.config.responsive.hexSizes.desktop;e<this.config.responsive.mobile?s=this.config.responsive.hexSizes.mobile:e<this.config.responsive.tablet&&(s=this.config.responsive.hexSizes.tablet),s.radius!==this.hexRadius&&(this.hexRadius=s.radius,this.hexSpacing=s.spacing,this.recreateBoard())};t(),window.addEventListener("resize",t)}recreateBoard(){if(this.elements.gameBoard){this.createHexBoard();for(let t=0;t<this.boardSize;t++)for(let e=0;e<this.boardSize;e++)this.board[t][e]!==0&&this.updateHexagon(t,e,this.board[t][e])}}onMoveCompleted(t){}onConnectionFound(t){this.showMessage(`Verbindung erkannt: ${t.player}`,"connection")}onGameWon(t){this.gameOver=!0,this.winner=t.winner,this.showMessage(`🎉 ${this.getPlayerName(t.winner)} hat gewonnen!`,"win")}onGameReset(){this.handleResetGame()}onPlayerChanged(t){this.currentPlayer=t,this.updatePlayerDisplay()}onPathUpdated(t){}onMemoryStatsUpdated(t){this.memoryStats=t}newGame(){this.handleResetGame()}resetScore(){this.moveCount=0,this.updateMoveCounter(),this.showMessage("Spielstand zurückgesetzt!","info")}}async function d(){try{await init();const a={isInitialized:!0,getCurrentPlayer:()=>"red",switchPlayer:()=>{},resetGame:()=>{},on:()=>{},emit:()=>{},undoMove:()=>!1,makeMove:()=>!1,getValidMoves:()=>[],getBoardState:()=>({}),findPath:()=>[],checkWinCondition:()=>null,getBoardSize:()=>11,isValidPosition:(e,s)=>e>=0&&e<11&&s>=0&&s<11,getCellState:()=>"empty"},t=new f(a);await t.init(),window.game=a,window.ui=t,window.HexGame=HexGame}catch(a){const t=document.getElementById("error-display");if(t){t.style.display="block";const e=t.querySelector("#error-message");e&&(e.textContent=`Initialisierung fehlgeschlagen: ${a.message}`)}}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",d):d();
//# sourceMappingURL=hex-qMf7dKzJ.js.map
