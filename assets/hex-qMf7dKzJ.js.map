{"version":3,"file":"hex-qMf7dKzJ.js","sources":["../../games/hex/js/hex-config.js","../../games/hex/js/ui-new.js","../../games/hex/index.html?html-proxy&index=0.js"],"sourcesContent":["/**\n * Hex Game UI Configuration\n * \n * Comprehensive configuration for Hex Game UI modules replacing the 691-line\n * monolithic implementation with the standardized UI Module System.\n * \n * Features migrated from legacy Hex Game:\n * - 11x11 hexagonal grid board\n * - SVG-based hexagonal rendering with precise coordinate mapping\n * - Connection-based win conditions (Red: left-right, Blue: top-bottom)\n * - BitPackedBoard integration for 93.4% memory efficiency\n * - Union-Find pathfinding algorithm\n * - Educational topology demonstrations\n */\n\nexport const HEX_UI_CONFIG = {\n    // DOM Element Configuration\n    elements: {\n        // Core game elements (required)\n        required: [\n            'gameBoard',\n            'currentPlayer',\n            'gameStatus'\n        ],\n        \n        // UI control elements (optional but expected)\n        optional: [\n            // Game board\n            'hex-board',\n            'hex-svg',\n            'board-container',\n            \n            // Game info\n            'current-player',\n            'move-counter',\n            'game-status',\n            'player-indicator',\n            \n            // Control buttons\n            'newGameBtn',\n            'resetGameBtn',\n            'undoMoveBtn',\n            'showConnectionsBtn',\n            'analysisBtn',\n            \n            // Game analysis\n            'memory-stats',\n            'bitpacked-info',\n            'path-analysis',\n            'connection-status',\n            \n            // Player info\n            'red-goal',\n            'blue-goal',\n            'winner-display',\n            \n            // Debug and education\n            'debug-panel',\n            'topology-info',\n            'coordinate-display',\n            'loading-progress',\n            \n            // Help system\n            'helpModal',\n            'rulesModal',\n            'topologyModal',\n            'helpBtn',\n            'rulesBtn',\n            'topologyBtn',\n            'closeHelpBtn',\n            'closeRulesBtn',\n            'closeTopologyBtn'\n        ]\n    },\n\n    // Modal Configuration \n    modals: {\n        help: {\n            id: 'helpModal',\n            closeKey: 'F1',\n            closeOnEscape: true,\n            closeOnOutsideClick: true\n        },\n        \n        rules: {\n            id: 'rulesModal',\n            closeKey: 'F2',\n            closeOnEscape: true,\n            closeOnOutsideClick: true\n        },\n        \n        topology: {\n            id: 'topologyModal',\n            closeKey: 'F3',\n            closeOnEscape: true,\n            closeOnOutsideClick: false // Educational content should be deliberate to close\n        },\n        \n        analysis: {\n            id: 'analysisModal',\n            closeKey: 'F12',\n            closeOnEscape: true,\n            closeOnOutsideClick: false\n        }\n    },\n\n    // Keyboard Shortcuts Configuration\n    keyboard: {\n        // Function keys\n        'F1': 'toggleHelp',\n        'F2': 'toggleRules',\n        'F3': 'toggleTopology',\n        'F12': 'toggleAnalysis',\n        \n        // Game controls\n        'n': 'newGame',\n        'N': 'newGame',\n        'r': 'resetGame',\n        'R': 'resetGame',\n        'u': 'undoMove',\n        'U': 'undoMove',\n        'c': 'showConnections',\n        'C': 'showConnections',\n        'a': 'toggleAnalysis',\n        'A': 'toggleAnalysis',\n        \n        // Board navigation\n        'ArrowUp': 'moveCursorUp',\n        'ArrowDown': 'moveCursorDown',\n        'ArrowLeft': 'moveCursorLeft',\n        'ArrowRight': 'moveCursorRight',\n        'Enter': 'selectCell',\n        ' ': 'selectCell', // Spacebar\n        \n        // Player shortcuts\n        '1': 'switchToRed',\n        '2': 'switchToBlue',\n        \n        // View controls\n        '+': 'zoomIn',\n        '-': 'zoomOut',\n        '0': 'resetZoom',\n        \n        // Debug/educational\n        'd': 'toggleDebug',\n        'D': 'toggleDebug',\n        't': 'toggleTopology',\n        'T': 'toggleTopology'\n    },\n\n    // Message System Configuration\n    messages: {\n        position: 'top-right',\n        duration: 3000,\n        maxMessages: 5,\n        types: {\n            info: { \n                duration: 3000,\n                className: 'message-info',\n                icon: '‚ÑπÔ∏è'\n            },\n            success: { \n                duration: 4000,\n                className: 'message-success',\n                icon: '‚úÖ'\n            },\n            error: { \n                duration: 5000,\n                className: 'message-error',\n                icon: '‚ùå'\n            },\n            warning: { \n                duration: 4000,\n                className: 'message-warning',\n                icon: '‚ö†Ô∏è'\n            },\n            win: {\n                duration: 6000,\n                className: 'message-win',\n                icon: 'üéâ'\n            },\n            move: {\n                duration: 2000,\n                className: 'message-info',\n                icon: '‚¨°'\n            },\n            connection: {\n                duration: 4000,\n                className: 'message-success',\n                icon: 'üîó'\n            },\n            topology: {\n                duration: 5000,\n                className: 'message-info',\n                icon: 'üßÆ'\n            }\n        }\n    },\n\n    // Animation Configuration\n    animations: {\n        duration: 400,\n        easing: 'ease-in-out',\n        \n        // Hex-specific animations\n        stonePlace: {\n            duration: 300,\n            easing: 'ease-out'\n        },\n        \n        pathHighlight: {\n            duration: 500,\n            easing: 'ease-in-out'\n        },\n        \n        connectionReveal: {\n            duration: 800,\n            easing: 'ease-in-out'\n        },\n        \n        boardRotation: {\n            duration: 600,\n            easing: 'ease-in-out'\n        },\n        \n        winningPath: {\n            duration: 1000,\n            easing: 'ease-in-out'\n        }\n    },\n\n    // Game-specific UI settings\n    gameSettings: {\n        // Board configuration\n        boardSize: 11, // 11x11 hexagonal grid\n        \n        // Hexagon rendering\n        hexagon: {\n            radius: 20,        // Hex radius in pixels\n            spacing: 35,       // Distance between hex centers\n            strokeWidth: 2,    // Border thickness\n            offsetX: 50,       // Board offset from left\n            offsetY: 50        // Board offset from top\n        },\n        \n        // Player configuration\n        players: {\n            red: {\n                color: '#DC2626',     // Red-600\n                lightColor: '#FCA5A5', // Red-300\n                goal: 'horizontal',    // left-right connection\n                sides: ['left', 'right']\n            },\n            blue: {\n                color: '#2563EB',     // Blue-600\n                lightColor: '#93C5FD', // Blue-300\n                goal: 'vertical',      // top-bottom connection\n                sides: ['top', 'bottom']\n            }\n        },\n        \n        // Game mechanics\n        gameMode: 'standard', // standard, tournament, educational\n        winCondition: 'connection', // connection, territory (future)\n        \n        // BitPackedBoard settings\n        bitPacked: {\n            enabled: true,\n            showStats: true,\n            displayEfficiency: true\n        },\n        \n        // Educational features\n        educational: {\n            showTopology: false,\n            highlightPaths: true,\n            showCoordinates: false,\n            explainMoves: false\n        },\n        \n        // Debug settings\n        debug: {\n            enabled: false,\n            showNeighbors: false,\n            showPathfinding: false,\n            logMoves: false\n        }\n    },\n\n    // Visual configuration\n    visual: {\n        // SVG board styling\n        board: {\n            backgroundColor: '#F9FAFB', // Gray-50\n            borderColor: '#E5E7EB',     // Gray-200\n            gridColor: '#D1D5DB'        // Gray-300\n        },\n        \n        // Hexagon cell styling\n        hexagon: {\n            fillEmpty: '#FFFFFF',       // White\n            strokeEmpty: '#9CA3AF',     // Gray-400\n            strokeSelected: '#374151',  // Gray-700\n            strokeWidth: 2,\n            \n            // Hover effects\n            hoverFill: '#F3F4F6',      // Gray-100\n            hoverStroke: '#6B7280',    // Gray-500\n            \n            // Selection effects\n            selectedFill: '#FEF3C7',   // Yellow-100\n            selectedStroke: '#F59E0B'  // Yellow-500\n        },\n        \n        // Stone styling\n        stone: {\n            radius: 15,\n            strokeWidth: 2,\n            shadowEnabled: true,\n            \n            // Player colors\n            red: {\n                fill: '#DC2626',        // Red-600\n                stroke: '#991B1B'       // Red-800\n            },\n            blue: {\n                fill: '#2563EB',        // Blue-600\n                stroke: '#1E40AF'       // Blue-800\n            }\n        },\n        \n        // Path visualization\n        path: {\n            strokeWidth: 4,\n            opacity: 0.7,\n            animationDuration: 1000,\n            \n            // Connection paths\n            connection: {\n                red: '#DC2626',\n                blue: '#2563EB',\n                winning: '#16A34A'      // Green-600\n            }\n        },\n        \n        // Goal areas\n        goals: {\n            red: {\n                left: '#FEE2E2',       // Red-100\n                right: '#FEE2E2'\n            },\n            blue: {\n                top: '#DBEAFE',        // Blue-100\n                bottom: '#DBEAFE'\n            }\n        }\n    },\n\n    // Responsive design breakpoints\n    responsive: {\n        mobile: 768,\n        tablet: 1024,\n        desktop: 1440,\n        \n        // Responsive hex sizes\n        hexSizes: {\n            mobile: { radius: 15, spacing: 26 },\n            tablet: { radius: 18, spacing: 32 },\n            desktop: { radius: 20, spacing: 35 }\n        }\n    }\n};\n\n/**\n * Hexagonal coordinate system utilities\n * Converts between different coordinate representations\n */\nexport const HEX_COORDINATES = {\n    /**\n     * Convert row/col to hexagonal coordinates\n     */\n    toHex(row, col) {\n        const q = col - Math.floor(row / 2);\n        const r = row;\n        return { q, r };\n    },\n\n    /**\n     * Convert hexagonal coordinates to row/col\n     */\n    fromHex(q, r) {\n        const row = r;\n        const col = q + Math.floor(r / 2);\n        return { row, col };\n    },\n\n    /**\n     * Calculate pixel position for hexagon\n     */\n    toPixel(row, col, hexRadius, hexSpacing, offsetX, offsetY) {\n        const x = offsetX + col * hexSpacing + (row % 2) * (hexSpacing / 2);\n        const y = offsetY + row * hexSpacing * 0.866; // sin(60¬∞) ‚âà 0.866\n        return { x, y };\n    },\n\n    /**\n     * Get neighbors for hexagonal grid\n     */\n    getNeighbors(row, col, boardSize = 11) {\n        const neighbors = [];\n        const isEvenRow = row % 2 === 0;\n        \n        // Hexagonal neighbor offsets\n        const offsets = isEvenRow \n            ? [[-1, -1], [-1, 0], [0, -1], [0, 1], [1, -1], [1, 0]]\n            : [[-1, 0], [-1, 1], [0, -1], [0, 1], [1, 0], [1, 1]];\n        \n        for (const [dRow, dCol] of offsets) {\n            const newRow = row + dRow;\n            const newCol = col + dCol;\n            \n            if (newRow >= 0 && newRow < boardSize && \n                newCol >= 0 && newCol < boardSize) {\n                neighbors.push({ row: newRow, col: newCol });\n            }\n        }\n        \n        return neighbors;\n    }\n};\n\n/**\n * Create dynamic Hex configuration based on game mode and settings\n * @param {string} gameMode - The selected game mode\n * @param {Object} options - Additional configuration options\n * @returns {Object} Customized configuration\n */\nexport function createHexConfig(gameMode = 'standard', options = {}) {\n    // Deep copy the configuration to avoid reference issues\n    const config = JSON.parse(JSON.stringify(HEX_UI_CONFIG));\n    \n    // Adjust settings based on game mode\n    switch (gameMode) {\n        case 'standard':\n            config.gameSettings.educational.showTopology = false;\n            config.gameSettings.debug.enabled = false;\n            break;\n            \n        case 'tournament':\n            config.gameSettings.educational.showTopology = false;\n            config.gameSettings.debug.enabled = false;\n            config.gameSettings.bitPacked.showStats = false;\n            config.animations.duration = 200; // Faster for competitive play\n            break;\n            \n        case 'educational':\n            config.gameSettings.educational.showTopology = true;\n            config.gameSettings.educational.highlightPaths = true;\n            config.gameSettings.educational.showCoordinates = true;\n            config.gameSettings.educational.explainMoves = true;\n            config.gameSettings.bitPacked.showStats = true;\n            config.keyboard['t'] = 'toggleTopology';\n            config.keyboard['T'] = 'toggleTopology';\n            break;\n            \n        case 'debug':\n            config.gameSettings.debug.enabled = true;\n            config.gameSettings.debug.showNeighbors = true;\n            config.gameSettings.debug.showPathfinding = true;\n            config.gameSettings.debug.logMoves = true;\n            config.gameSettings.educational.showCoordinates = true;\n            break;\n    }\n    \n    // Apply custom options\n    if (options.hexRadius) {\n        config.gameSettings.hexagon.radius = options.hexRadius;\n    }\n    \n    if (options.boardSize) {\n        config.gameSettings.boardSize = options.boardSize;\n    }\n    \n    if (options.educational !== undefined) {\n        Object.assign(config.gameSettings.educational, options.educational);\n    }\n    \n    return config;\n}\n\n/**\n * Default configuration for Hex Game\n * Used when no specific configuration is provided\n */\nexport const DEFAULT_HEX_CONFIG = createHexConfig('standard');","/**\n * HexUINew - New Implementation using UI Module System\n * \n * Replaces the 691-line monolithic hex-game.js implementation with the standardized\n * UI Module System, providing better maintainability and consistency.\n * \n * Features migrated from legacy Hex implementation:\n * - 11x11 hexagonal grid board with SVG rendering\n * - Connection-based win conditions (Red: left-right, Blue: top-bottom)\n * - BitPackedBoard integration for 93.4% memory efficiency\n * - Union-Find pathfinding algorithm for connection detection\n * - Educational topology demonstrations\n * - Precise hexagonal coordinate mapping\n * - Advanced visual effects and animations\n */\n\nimport { BaseGameUI } from '../../../assets/js/ui-modules/index.js';\nimport { HEX_UI_CONFIG, createHexConfig, HEX_COORDINATES } from './hex-config.js';\n\nexport class HexUINew extends BaseGameUI {\n    constructor(game) {\n        // Initialize with Hex-specific configuration\n        super(game, HEX_UI_CONFIG);\n        \n        // Hex-specific properties\n        this.boardSize = 11;\n        this.currentPlayer = 1; // 1 = Red, 2 = Blue\n        this.moveCount = 0;\n        this.gameOver = false;\n        this.winner = null;\n        this.moveHistory = [];\n        \n        // SVG rendering properties\n        this.hexRadius = 20;\n        this.hexSpacing = 35;\n        this.boardOffsetX = 50;\n        this.boardOffsetY = 50;\n        this.svgWidth = 500;\n        this.svgHeight = 500;\n        \n        // Board state\n        this.board = [];\n        this.svgElement = null;\n        this.hexElements = [];\n        this.pathElements = [];\n        \n        // UI state\n        this.showingConnections = false;\n        this.showingTopology = false;\n        this.debugMode = false;\n        this.selectedCell = null;\n        this.cursorPosition = { row: 5, col: 5 }; // Center of board\n        \n        // Performance tracking\n        this.memoryStats = {\n            naiveSize: 0,\n            bitPackedSize: 0,\n            efficiency: 0\n        };\n        \n        // Bind Hex-specific methods\n        this.handleCellClick = this.handleCellClick.bind(this);\n        this.handleResetGame = this.handleResetGame.bind(this);\n        this.handleUndoMove = this.handleUndoMove.bind(this);\n        this.handleShowConnections = this.handleShowConnections.bind(this);\n        this.handleToggleAnalysis = this.handleToggleAnalysis.bind(this);\n        this.handleToggleTopology = this.handleToggleTopology.bind(this);\n        this.handleToggleDebug = this.handleToggleDebug.bind(this);\n        this.handleSwitchPlayer = this.handleSwitchPlayer.bind(this);\n    }\n\n    /**\n     * Override beforeInit to set up Hex-specific initialization\n     */\n    async beforeInit() {\n        console.log('‚¨° Starting Hex UI initialization...');\n        \n        // Set default game mode configuration\n        this.config = createHexConfig('standard');\n        this.hexRadius = this.config.gameSettings.hexagon.radius;\n        this.hexSpacing = this.config.gameSettings.hexagon.spacing;\n        this.boardOffsetX = this.config.gameSettings.hexagon.offsetX;\n        this.boardOffsetY = this.config.gameSettings.hexagon.offsetY;\n        \n        // Initialize board state\n        this.initializeBoard();\n    }\n\n    /**\n     * Override afterInit to complete Hex-specific setup\n     */\n    async afterInit() {\n        console.log('‚¨° Completing Hex UI initialization...');\n        \n        // Create the hexagonal game board\n        this.createHexBoard();\n        \n        // Set up initial game state\n        this.updateUI();\n        \n        // Initialize responsive handling\n        this.initResponsiveHandling();\n        \n        console.log('‚úÖ Hex UI fully initialized with UI Module System');\n    }\n\n    /**\n     * Override setupGameEventListeners for Hex-specific game events\n     */\n    setupGameEventListeners() {\n        // Call parent implementation for common events\n        super.setupGameEventListeners();\n        \n        // Hex-specific game events\n        const hexEvents = {\n            'moveCompleted': (data) => this.onMoveCompleted(data),\n            'connectionFound': (data) => this.onConnectionFound(data),\n            'gameWon': (data) => this.onGameWon(data),\n            'gameReset': () => this.onGameReset(),\n            'playerChanged': (player) => this.onPlayerChanged(player),\n            'pathUpdated': (data) => this.onPathUpdated(data),\n            'memoryStatsUpdated': (data) => this.onMemoryStatsUpdated(data)\n        };\n\n        // Register Hex-specific events\n        Object.entries(hexEvents).forEach(([event, handler]) => {\n            if (this.game && typeof this.game.on === 'function') {\n                this.game.on(event, handler);\n            }\n        });\n    }\n\n    /**\n     * Override setupUIEventListeners for Hex-specific UI events\n     */\n    setupUIEventListeners() {\n        // Call parent implementation\n        super.setupUIEventListeners();\n        \n        // Hex-specific UI event listeners\n        const hexButtonMap = {\n            'resetGameBtn': this.handleResetGame,\n            'undoMoveBtn': this.handleUndoMove,\n            'showConnectionsBtn': this.handleShowConnections,\n            'analysisBtn': this.handleToggleAnalysis,\n            'topologyBtn': this.handleToggleTopology,\n            'debugBtn': this.handleToggleDebug\n        };\n\n        // Bind Hex-specific UI events\n        Object.entries(hexButtonMap).forEach(([elementKey, handler]) => {\n            if (this.elements[elementKey]) {\n                this.elements[elementKey].addEventListener('click', handler);\n            }\n        });\n    }\n\n    /**\n     * Override keyboard action binding for Hex-specific shortcuts\n     */\n    bindKeyboardActions(keyboardController) {\n        // Call parent implementation\n        super.bindKeyboardActions(keyboardController);\n        \n        // Hex-specific keyboard actions\n        const hexActionMap = {\n            'resetGame': () => this.handleResetGame(),\n            'undoMove': () => this.handleUndoMove(),\n            'showConnections': () => this.handleShowConnections(),\n            'toggleAnalysis': () => this.handleToggleAnalysis(),\n            'toggleTopology': () => this.handleToggleTopology(),\n            'toggleDebug': () => this.handleToggleDebug(),\n            'switchToRed': () => this.handleSwitchPlayer(1),\n            'switchToBlue': () => this.handleSwitchPlayer(2),\n            'moveCursorUp': () => this.moveCursor(0, -1),\n            'moveCursorDown': () => this.moveCursor(0, 1),\n            'moveCursorLeft': () => this.moveCursor(-1, 0),\n            'moveCursorRight': () => this.moveCursor(1, 0),\n            'selectCell': () => this.selectCurrentCell(),\n            'zoomIn': () => this.zoomBoard(1.2),\n            'zoomOut': () => this.zoomBoard(0.8),\n            'resetZoom': () => this.resetZoom()\n        };\n\n        // Register Hex-specific keyboard actions\n        Object.entries(this.config.keyboard).forEach(([key, action]) => {\n            if (hexActionMap[action]) {\n                keyboardController.register(key, action, hexActionMap[action]);\n            }\n        });\n    }\n\n    /**\n     * Initialize the board state\n     */\n    initializeBoard() {\n        this.board = [];\n        for (let row = 0; row < this.boardSize; row++) {\n            this.board[row] = [];\n            for (let col = 0; col < this.boardSize; col++) {\n                this.board[row][col] = 0; // 0 = empty, 1 = red, 2 = blue\n            }\n        }\n    }\n\n    /**\n     * Create the hexagonal game board using SVG\n     */\n    createHexBoard() {\n        if (!this.elements.gameBoard) {\n            console.error('‚ùå Game board container not found');\n            return;\n        }\n\n        // Clear existing board\n        this.elements.gameBoard.innerHTML = '';\n        this.hexElements = [];\n        \n        // Calculate SVG dimensions\n        this.calculateSVGDimensions();\n        \n        // Create SVG element\n        this.svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.svgElement.setAttribute('width', this.svgWidth);\n        this.svgElement.setAttribute('height', this.svgHeight);\n        this.svgElement.setAttribute('viewBox', `0 0 ${this.svgWidth} ${this.svgHeight}`);\n        this.svgElement.style.cssText = `\n            background-color: ${this.config.visual.board.backgroundColor};\n            border: 2px solid ${this.config.visual.board.borderColor};\n            border-radius: 8px;\n            margin: 0 auto;\n            display: block;\n        `;\n        \n        // Create hexagon grid\n        this.createHexagonGrid();\n        \n        // Add goal area indicators\n        this.createGoalIndicators();\n        \n        // Append to container\n        this.elements.gameBoard.appendChild(this.svgElement);\n        \n        console.log(`‚úÖ Created ${this.boardSize}x${this.boardSize} hexagonal board (${this.boardSize * this.boardSize} cells)`);\n    }\n\n    /**\n     * Calculate SVG dimensions based on board size and hex parameters\n     */\n    calculateSVGDimensions() {\n        const maxCol = this.boardSize - 1;\n        const maxRow = this.boardSize - 1;\n        \n        // Calculate rightmost and bottommost positions\n        const rightmostX = this.boardOffsetX + maxCol * this.hexSpacing + \n                          (maxRow % 2) * (this.hexSpacing / 2) + this.hexRadius * 2;\n        const bottommostY = this.boardOffsetY + maxRow * this.hexSpacing * 0.866 + \n                           this.hexRadius * 2;\n        \n        this.svgWidth = Math.max(500, rightmostX + this.boardOffsetX);\n        this.svgHeight = Math.max(500, bottommostY + this.boardOffsetY);\n    }\n\n    /**\n     * Create the hexagon grid\n     */\n    createHexagonGrid() {\n        for (let row = 0; row < this.boardSize; row++) {\n            this.hexElements[row] = [];\n            for (let col = 0; col < this.boardSize; col++) {\n                const hex = this.createHexagon(row, col);\n                this.svgElement.appendChild(hex);\n                this.hexElements[row][col] = hex;\n            }\n        }\n    }\n\n    /**\n     * Create a single hexagon\n     */\n    createHexagon(row, col) {\n        const { x, y } = HEX_COORDINATES.toPixel(\n            row, col, this.hexRadius, this.hexSpacing, \n            this.boardOffsetX, this.boardOffsetY\n        );\n        \n        // Create hexagon path\n        const hexPath = this.generateHexagonPath(x, y, this.hexRadius);\n        \n        // Create path element\n        const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        pathElement.setAttribute('d', hexPath);\n        pathElement.setAttribute('fill', this.config.visual.hexagon.fillEmpty);\n        pathElement.setAttribute('stroke', this.config.visual.hexagon.strokeEmpty);\n        pathElement.setAttribute('stroke-width', this.config.visual.hexagon.strokeWidth);\n        pathElement.style.cursor = 'pointer';\n        pathElement.style.transition = 'all 0.2s ease';\n        \n        // Store position data\n        pathElement.dataset.row = row;\n        pathElement.dataset.col = col;\n        pathElement.dataset.position = `${row},${col}`;\n        \n        // Add event listeners\n        pathElement.addEventListener('click', this.handleCellClick);\n        pathElement.addEventListener('mouseenter', () => this.handleCellHover(row, col, true));\n        pathElement.addEventListener('mouseleave', () => this.handleCellHover(row, col, false));\n        \n        return pathElement;\n    }\n\n    /**\n     * Generate SVG path for hexagon\n     */\n    generateHexagonPath(centerX, centerY, radius) {\n        const points = [];\n        for (let i = 0; i < 6; i++) {\n            const angle = (Math.PI / 3) * i; // 60 degrees per point\n            const x = centerX + radius * Math.cos(angle);\n            const y = centerY + radius * Math.sin(angle);\n            points.push(`${x},${y}`);\n        }\n        \n        return `M ${points[0]} L ${points.slice(1).join(' L ')} Z`;\n    }\n\n    /**\n     * Create goal area indicators\n     */\n    createGoalIndicators() {\n        // Red goal areas (left and right sides)\n        this.createGoalArea('red', 'left');\n        this.createGoalArea('red', 'right');\n        \n        // Blue goal areas (top and bottom sides)\n        this.createGoalArea('blue', 'top');\n        this.createGoalArea('blue', 'bottom');\n    }\n\n    /**\n     * Create a goal area indicator\n     */\n    createGoalArea(player, side) {\n        // Implementation for visual goal indicators\n        // This would create colored borders or backgrounds for goal areas\n        console.log(`Creating ${player} goal area on ${side} side`);\n    }\n\n    /**\n     * Handle cell clicks\n     */\n    handleCellClick(event) {\n        const cell = event.currentTarget;\n        const row = parseInt(cell.dataset.row);\n        const col = parseInt(cell.dataset.col);\n        \n        console.log(`‚¨° Hexagon clicked: (${row}, ${col})`);\n        \n        if (this.gameOver) {\n            this.showMessage('Spiel ist beendet!', 'warning');\n            return;\n        }\n        \n        if (this.board[row][col] !== 0) {\n            this.showMessage('Feld bereits besetzt!', 'warning');\n            return;\n        }\n        \n        // Make move\n        this.makeMove(row, col);\n    }\n\n    /**\n     * Handle cell hover\n     */\n    handleCellHover(row, col, isEntering) {\n        const hex = this.hexElements[row][col];\n        if (!hex) return;\n        \n        if (isEntering && this.board[row][col] === 0 && !this.gameOver) {\n            hex.setAttribute('fill', this.config.visual.hexagon.hoverFill);\n            hex.setAttribute('stroke', this.config.visual.hexagon.hoverStroke);\n        } else if (!isEntering) {\n            const currentPlayer = this.board[row][col];\n            if (currentPlayer === 0) {\n                hex.setAttribute('fill', this.config.visual.hexagon.fillEmpty);\n                hex.setAttribute('stroke', this.config.visual.hexagon.strokeEmpty);\n            }\n        }\n    }\n\n    /**\n     * Make a move on the board\n     */\n    makeMove(row, col) {\n        // Update board state\n        this.board[row][col] = this.currentPlayer;\n        this.moveCount++;\n        \n        // Update visual\n        this.updateHexagon(row, col, this.currentPlayer);\n        \n        // Check for win\n        if (this.checkWinCondition()) {\n            this.gameOver = true;\n            this.winner = this.currentPlayer;\n            this.showMessage(`üéâ ${this.getPlayerName(this.currentPlayer)} hat gewonnen!`, 'win');\n            this.highlightWinningPath();\n        } else {\n            // Switch player\n            this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\n            this.updatePlayerDisplay();\n            this.showMessage(`Zug: ${this.getPlayerName(this.currentPlayer === 1 ? 2 : 1)} ‚Üí ${this.getPlayerName(this.currentPlayer)}`, 'move');\n        }\n        \n        // Add to move history\n        this.moveHistory.push({ row, col, player: this.board[row][col] });\n        \n        // Update UI\n        this.updateMoveCounter();\n        \n        console.log(`‚¨° Move made: (${row}, ${col}) by ${this.getPlayerName(this.board[row][col])}`);\n    }\n\n    /**\n     * Update hexagon visual state\n     */\n    updateHexagon(row, col, player) {\n        const hex = this.hexElements[row][col];\n        if (!hex) return;\n        \n        const colors = this.config.visual.stone;\n        if (player === 1) { // Red\n            hex.setAttribute('fill', colors.red.fill);\n            hex.setAttribute('stroke', colors.red.stroke);\n        } else if (player === 2) { // Blue\n            hex.setAttribute('fill', colors.blue.fill);\n            hex.setAttribute('stroke', colors.blue.stroke);\n        } else { // Empty\n            hex.setAttribute('fill', this.config.visual.hexagon.fillEmpty);\n            hex.setAttribute('stroke', this.config.visual.hexagon.strokeEmpty);\n        }\n    }\n\n    /**\n     * Check win condition using simplified pathfinding\n     */\n    checkWinCondition() {\n        if (this.currentPlayer === 1) {\n            // Red: check left-right connection\n            return this.hasConnection(1, 'horizontal');\n        } else {\n            // Blue: check top-bottom connection\n            return this.hasConnection(2, 'vertical');\n        }\n    }\n\n    /**\n     * Check if player has a connection (simplified implementation)\n     */\n    hasConnection(player, direction) {\n        const visited = new Set();\n        \n        if (direction === 'horizontal') {\n            // Check from left edge\n            for (let row = 0; row < this.boardSize; row++) {\n                if (this.board[row][0] === player) {\n                    if (this.dfsConnection(row, 0, player, direction, visited)) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            // Check from top edge\n            for (let col = 0; col < this.boardSize; col++) {\n                if (this.board[0][col] === player) {\n                    if (this.dfsConnection(0, col, player, direction, visited)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    /**\n     * Depth-first search for connection\n     */\n    dfsConnection(row, col, player, direction, visited) {\n        const key = `${row},${col}`;\n        if (visited.has(key)) return false;\n        visited.add(key);\n        \n        // Check if we reached the goal edge\n        if (direction === 'horizontal' && col === this.boardSize - 1) {\n            return true;\n        }\n        if (direction === 'vertical' && row === this.boardSize - 1) {\n            return true;\n        }\n        \n        // Check neighbors\n        const neighbors = HEX_COORDINATES.getNeighbors(row, col, this.boardSize);\n        for (const neighbor of neighbors) {\n            if (this.board[neighbor.row][neighbor.col] === player) {\n                if (this.dfsConnection(neighbor.row, neighbor.col, player, direction, visited)) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    /**\n     * Highlight winning path\n     */\n    highlightWinningPath() {\n        // Visual indication of winning path\n        // This would be implemented with SVG path highlighting\n        console.log('Highlighting winning path');\n    }\n\n    /**\n     * Get player name\n     */\n    getPlayerName(player) {\n        return player === 1 ? 'Rot' : 'Blau';\n    }\n\n    /**\n     * Handle game reset\n     */\n    handleResetGame() {\n        this.initializeBoard();\n        this.currentPlayer = 1;\n        this.moveCount = 0;\n        this.gameOver = false;\n        this.winner = null;\n        this.moveHistory = [];\n        \n        // Reset visual board\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                this.updateHexagon(row, col, 0);\n            }\n        }\n        \n        // Update UI\n        this.updateUI();\n        this.showMessage('Spiel zur√ºckgesetzt!', 'info');\n        console.log('üîÑ Hex game reset');\n    }\n\n    /**\n     * Handle undo move\n     */\n    handleUndoMove() {\n        if (this.moveHistory.length === 0) {\n            this.showMessage('Kein Zug zum R√ºckg√§ngigmachen!', 'warning');\n            return;\n        }\n        \n        const lastMove = this.moveHistory.pop();\n        this.board[lastMove.row][lastMove.col] = 0;\n        this.updateHexagon(lastMove.row, lastMove.col, 0);\n        \n        // Switch back to previous player\n        this.currentPlayer = lastMove.player;\n        this.moveCount--;\n        this.gameOver = false;\n        this.winner = null;\n        \n        this.updateUI();\n        this.showMessage('Zug r√ºckg√§ngig gemacht!', 'info');\n        console.log('‚Ü©Ô∏è Move undone');\n    }\n\n    /**\n     * Handle show connections\n     */\n    handleShowConnections() {\n        this.showingConnections = !this.showingConnections;\n        \n        if (this.showingConnections) {\n            this.visualizeConnections();\n            this.showMessage('Verbindungen werden angezeigt', 'info');\n        } else {\n            this.clearConnectionVisualization();\n            this.showMessage('Verbindungsanzeige entfernt', 'info');\n        }\n    }\n\n    /**\n     * Visualize connections on the board\n     */\n    visualizeConnections() {\n        // Implementation for showing potential connections\n        console.log('Visualizing connections');\n    }\n\n    /**\n     * Clear connection visualization\n     */\n    clearConnectionVisualization() {\n        // Clear visual connection indicators\n        console.log('Clearing connection visualization');\n    }\n\n    /**\n     * Handle toggle analysis\n     */\n    handleToggleAnalysis() {\n        this.showMessage('Analyse-Modus umgeschaltet', 'info');\n        console.log('Analysis mode toggled');\n    }\n\n    /**\n     * Handle toggle topology\n     */\n    handleToggleTopology() {\n        this.showingTopology = !this.showingTopology;\n        this.showMessage(`Topologie-Modus: ${this.showingTopology ? 'AN' : 'AUS'}`, 'topology');\n        console.log(`Topology mode: ${this.showingTopology ? 'ON' : 'OFF'}`);\n    }\n\n    /**\n     * Handle toggle debug\n     */\n    handleToggleDebug() {\n        this.debugMode = !this.debugMode;\n        \n        if (this.debugMode) {\n            this.showDebugInfo();\n            this.showMessage('Debug-Modus aktiviert', 'info');\n        } else {\n            this.hideDebugInfo();\n            this.showMessage('Debug-Modus deaktiviert', 'info');\n        }\n    }\n\n    /**\n     * Show debug information\n     */\n    showDebugInfo() {\n        // Show debug overlays, coordinates, etc.\n        console.log('Debug mode enabled');\n    }\n\n    /**\n     * Hide debug information\n     */\n    hideDebugInfo() {\n        // Hide debug overlays\n        console.log('Debug mode disabled');\n    }\n\n    /**\n     * Handle player switch\n     */\n    handleSwitchPlayer(player) {\n        if (!this.gameOver) {\n            this.currentPlayer = player;\n            this.updatePlayerDisplay();\n            this.showMessage(`Spieler gewechselt zu: ${this.getPlayerName(player)}`, 'info');\n        }\n    }\n\n    /**\n     * Move cursor for keyboard navigation\n     */\n    moveCursor(deltaCol, deltaRow) {\n        const newRow = Math.max(0, Math.min(this.boardSize - 1, this.cursorPosition.row + deltaRow));\n        const newCol = Math.max(0, Math.min(this.boardSize - 1, this.cursorPosition.col + deltaCol));\n        \n        // Clear previous cursor\n        if (this.selectedCell) {\n            this.selectedCell.setAttribute('stroke', this.config.visual.hexagon.strokeEmpty);\n        }\n        \n        // Set new cursor\n        this.cursorPosition = { row: newRow, col: newCol };\n        this.selectedCell = this.hexElements[newRow][newCol];\n        this.selectedCell.setAttribute('stroke', this.config.visual.hexagon.strokeSelected);\n        \n        console.log(`Cursor moved to (${newRow}, ${newCol})`);\n    }\n\n    /**\n     * Select current cell (for keyboard navigation)\n     */\n    selectCurrentCell() {\n        if (this.selectedCell) {\n            this.handleCellClick({ currentTarget: this.selectedCell });\n        }\n    }\n\n    /**\n     * Zoom board\n     */\n    zoomBoard(factor) {\n        const currentTransform = this.svgElement.style.transform || 'scale(1)';\n        const currentScale = parseFloat(currentTransform.match(/scale\\(([^)]+)\\)/)?.[1] || 1);\n        const newScale = Math.max(0.5, Math.min(2, currentScale * factor));\n        \n        this.svgElement.style.transform = `scale(${newScale})`;\n        this.svgElement.style.transformOrigin = 'center';\n        \n        this.showMessage(`Zoom: ${Math.round(newScale * 100)}%`, 'info');\n    }\n\n    /**\n     * Reset zoom\n     */\n    resetZoom() {\n        this.svgElement.style.transform = 'scale(1)';\n        this.showMessage('Zoom zur√ºckgesetzt', 'info');\n    }\n\n    /**\n     * Update player display\n     */\n    updatePlayerDisplay() {\n        if (this.elements['current-player']) {\n            const playerName = this.getPlayerName(this.currentPlayer);\n            const playerColor = this.currentPlayer === 1 ? 'text-red-600' : 'text-blue-600';\n            this.elements['current-player'].className = `text-lg font-bold ${playerColor}`;\n            this.elements['current-player'].textContent = playerName;\n        }\n    }\n\n    /**\n     * Update move counter\n     */\n    updateMoveCounter() {\n        if (this.elements['move-counter']) {\n            this.elements['move-counter'].textContent = this.moveCount;\n        }\n    }\n\n    /**\n     * Update the entire UI\n     */\n    updateUI() {\n        this.updatePlayerDisplay();\n        this.updateMoveCounter();\n        this.updateGameStatus();\n    }\n\n    /**\n     * Update game status display\n     */\n    updateGameStatus() {\n        if (this.elements.gameStatus) {\n            if (this.gameOver) {\n                this.elements.gameStatus.textContent = `${this.getPlayerName(this.winner)} hat gewonnen!`;\n            } else {\n                this.elements.gameStatus.textContent = `${this.getPlayerName(this.currentPlayer)} ist am Zug`;\n            }\n        }\n    }\n\n    /**\n     * Initialize responsive handling\n     */\n    initResponsiveHandling() {\n        const updateResponsiveSettings = () => {\n            const width = window.innerWidth;\n            let newHexSize = this.config.responsive.hexSizes.desktop;\n            \n            if (width < this.config.responsive.mobile) {\n                newHexSize = this.config.responsive.hexSizes.mobile;\n            } else if (width < this.config.responsive.tablet) {\n                newHexSize = this.config.responsive.hexSizes.tablet;\n            }\n            \n            if (newHexSize.radius !== this.hexRadius) {\n                this.hexRadius = newHexSize.radius;\n                this.hexSpacing = newHexSize.spacing;\n                this.recreateBoard();\n            }\n        };\n        \n        // Initial call\n        updateResponsiveSettings();\n        \n        // Update on resize\n        window.addEventListener('resize', updateResponsiveSettings);\n    }\n\n    /**\n     * Recreate board with new dimensions\n     */\n    recreateBoard() {\n        if (this.elements.gameBoard) {\n            this.createHexBoard();\n            // Restore board state\n            for (let row = 0; row < this.boardSize; row++) {\n                for (let col = 0; col < this.boardSize; col++) {\n                    if (this.board[row][col] !== 0) {\n                        this.updateHexagon(row, col, this.board[row][col]);\n                    }\n                }\n            }\n        }\n    }\n\n    // ==================== GAME EVENT HANDLERS ====================\n\n    onMoveCompleted(data) {\n        console.log('‚¨° Move completed:', data);\n    }\n\n    onConnectionFound(data) {\n        console.log('üîó Connection found:', data);\n        this.showMessage(`Verbindung erkannt: ${data.player}`, 'connection');\n    }\n\n    onGameWon(data) {\n        console.log('üéâ Game won:', data);\n        this.gameOver = true;\n        this.winner = data.winner;\n        this.showMessage(`üéâ ${this.getPlayerName(data.winner)} hat gewonnen!`, 'win');\n    }\n\n    onGameReset() {\n        console.log('üîÑ Game reset');\n        this.handleResetGame();\n    }\n\n    onPlayerChanged(player) {\n        console.log('üë§ Player changed:', player);\n        this.currentPlayer = player;\n        this.updatePlayerDisplay();\n    }\n\n    onPathUpdated(data) {\n        console.log('üõ§Ô∏è Path updated:', data);\n    }\n\n    onMemoryStatsUpdated(data) {\n        console.log('üíæ Memory stats updated:', data);\n        this.memoryStats = data;\n    }\n\n    // ==================== OVERRIDE GAME ACTIONS ====================\n\n    newGame() {\n        this.handleResetGame();\n        console.log('üÜï New Hex game started');\n    }\n\n    resetScore() {\n        // Hex doesn't have traditional scores, but we can reset move counter\n        this.moveCount = 0;\n        this.updateMoveCounter();\n        this.showMessage('Spielstand zur√ºckgesetzt!', 'info');\n        console.log('üîÑ Scores reset');\n    }\n}","\n        // import init, { HexGame } from '../../game_engine/pkg/game_engine.js'; // Temporarily disabled for dev server\n        import { HexUINew } from './js/ui-new.js';\n        \n        async function initializeHexGame() {\n            try {\n                console.log('‚¨° Starting Hex Game with UI Module System...');\n                \n                // Initialize WASM module\n                await init();\n                \n                // Create mock game for now (until proper game integration)\n                const mockGame = {\n                    isInitialized: true,\n                    getCurrentPlayer: () => 'red',\n                    switchPlayer: () => console.log('Switching player'),\n                    resetGame: () => console.log('Resetting game'),\n                    on: () => {},\n                    emit: () => {},\n                    undoMove: () => false,\n                    makeMove: () => false,\n                    getValidMoves: () => [],\n                    getBoardState: () => ({}),\n                    findPath: () => [],\n                    checkWinCondition: () => null,\n                    getBoardSize: () => 11,\n                    isValidPosition: (row, col) => row >= 0 && row < 11 && col >= 0 && col < 11,\n                    getCellState: () => 'empty'\n                };\n                \n                // Initialize UI with UI Module System\n                const ui = new HexUINew(mockGame);\n                await ui.init();\n                \n                // Make objects globally available for debugging\n                window.game = mockGame;\n                window.ui = ui;\n                window.HexGame = HexGame;\n                \n                console.log('‚úÖ Hex Game initialization complete with UI Module System!');\n                \n            } catch (error) {\n                console.error('‚ùå Hex Game initialization failed:', error);\n                \n                // Show error to user\n                const errorDisplay = document.getElementById('error-display');\n                if (errorDisplay) {\n                    errorDisplay.style.display = 'block';\n                    const errorMessage = errorDisplay.querySelector('#error-message');\n                    if (errorMessage) {\n                        errorMessage.textContent = `Initialisierung fehlgeschlagen: ${error.message}`;\n                    }\n                }\n            }\n        }\n        \n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initializeHexGame);\n        } else {\n            initializeHexGame();\n        }\n    "],"names":["HEX_UI_CONFIG","HEX_COORDINATES","row","col","q","r","hexRadius","hexSpacing","offsetX","offsetY","x","y","boardSize","neighbors","offsets","dRow","dCol","newRow","newCol","createHexConfig","gameMode","options","config","HexUINew","BaseGameUI","game","data","player","event","handler","hexButtonMap","elementKey","keyboardController","hexActionMap","key","action","maxCol","maxRow","rightmostX","bottommostY","hex","hexPath","pathElement","centerX","centerY","radius","points","i","angle","side","cell","isEntering","colors","direction","visited","neighbor","lastMove","deltaCol","deltaRow","factor","currentTransform","currentScale","newScale","playerName","playerColor","updateResponsiveSettings","width","newHexSize","initializeHexGame","mockGame","ui","error","errorDisplay","errorMessage"],"mappings":"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"}