{"version":3,"file":"lgame-D_jdj3Aj.js","sources":["../../games/lgame/js/components/LGameAnimationManager.js"],"sourcesContent":["/**\n * LGameAnimationManager - L-Game Advanced Animation Controller\n * \n * Adapted from Connect4 AnimationManager for L-Game specific needs.\n * Handles all premium L-Game animations including:\n * - L-piece placement and rotation animations\n * - Neutral piece placement\n * - Victory celebrations\n * - Micro-interactions and feedback\n * \n * Responsibilities:\n * - L-piece smooth placement and removal animations\n * - Rotation preview and transitions\n * - Neutral piece interactions\n * - Performance optimization for 4x4 grid\n * - Accessibility support\n */\n\nexport class LGameAnimationManager {\n    constructor(gameBoard, boardRenderer) {\n        this.gameBoard = gameBoard;\n        this.boardRenderer = boardRenderer;\n        \n        // Animation state\n        this.animationQueue = [];\n        this.isAnimating = false;\n        this.previewElements = [];\n        this.celebrationActive = false;\n        \n        // Performance settings\n        this.reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n        this.animationSpeed = this.reducedMotion ? 0.5 : 1.0;\n        \n        // Premium effects engines\n        this.particleEngine = null;\n        this.soundManager = null;\n        \n        // Initialize premium effects\n        this.initializePremiumEffects();\n        \n        // Animation timing configuration for L-Game\n        this.timing = {\n            lPiecePlacement: 300,\n            lPieceRotation: 200,\n            neutralPiece: 150,\n            victoryReveal: 600,\n            victoryStagger: 100,\n            confettiDuration: 2500,\n            microInteraction: 150\n        };\n        \n        console.log('🎬 L-Game AnimationManager initialized with', this.reducedMotion ? 'reduced motion' : 'full animations');\n        console.log('🎊 Premium effects and sound integration ready for L-Game');\n    }\n    \n    /**\n     * Initialize premium effects systems\n     * @private\n     */\n    async initializePremiumEffects() {\n        try {\n            // Initialize particle engine for L-Game\n            await this.initializeParticleEngine();\n            \n            // Initialize sound manager\n            await this.initializeSoundManager();\n            \n            console.log('✨ L-Game premium effects systems initialized');\n        } catch (error) {\n            console.warn('⚠️ L-Game premium effects initialization failed:', error.message);\n        }\n    }\n    \n    /**\n     * Initialize particle engine for L-Game confetti effects\n     * @private\n     */\n    async initializeParticleEngine() {\n        try {\n            const { ParticleEngine } = await import('./ParticleEngine.js');\n            \n            // Create or use existing canvas for L-Game\n            let canvas = document.getElementById('lgameParticleCanvas');\n            if (!canvas) {\n                console.log('🎊 Creating L-Game particle canvas...');\n                canvas = document.createElement('canvas');\n                canvas.id = 'lgame-particles';\n                canvas.style.position = 'fixed';\n                canvas.style.top = '0';\n                canvas.style.left = '0';\n                canvas.style.pointerEvents = 'none';\n                canvas.style.zIndex = '9999';\n                canvas.width = window.innerWidth;\n                canvas.height = window.innerHeight;\n                document.body.appendChild(canvas);\n            }\n            \n            // Initialize particle engine for L-Game\n            this.particleEngine = new ParticleEngine(canvas, {\n                maxParticles: this.reducedMotion ? 15 : 100 // Fewer particles for 4x4 game\n            });\n            \n            console.log('🎊 L-Game ParticleEngine initialized successfully');\n        } catch (error) {\n            console.error('❌ L-Game ParticleEngine initialization failed:', error);\n            this.particleEngine = null;\n        }\n    }\n    \n    /**\n     * Initialize sound manager for L-Game\n     * @private\n     */\n    async initializeSoundManager() {\n        try {\n            const { soundManager } = await import('./SoundManager.js');\n            this.soundManager = soundManager;\n            console.log('🔊 L-Game SoundManager initialized');\n        } catch (error) {\n            console.warn('⚠️ L-Game SoundManager initialization failed:', error.message);\n            this.soundManager = null;\n        }\n    }\n\n    /**\n     * Animate L-piece placement with smooth transitions\n     * @param {Array} positions - Array of [row, col] positions for L-piece\n     * @param {number} player - Player number (1 or 2)\n     * @param {number} orientation - L-piece orientation (0-7)\n     */\n    async animateLPiecePlacement(positions, player, orientation) {\n        return new Promise((resolve) => {\n            console.log(`🎬 Animating L-piece placement: Player ${player}, positions:`, positions);\n            \n            // Play placement sound\n            if (this.soundManager) {\n                this.soundManager.playLPiecePlace();\n            }\n            \n            // Clear any existing pieces for this player\n            this.clearPlayerLPiece(player);\n            \n            let animationsCompleted = 0;\n            const totalAnimations = positions.length;\n            \n            // Animate each segment of the L-piece with stagger\n            positions.forEach((pos, index) => {\n                const [row, col] = pos;\n                const cell = this.boardRenderer.getCellAt(row, col);\n                \n                if (cell) {\n                    setTimeout(() => {\n                        // Create L-piece segment\n                        const piece = document.createElement('div');\n                        piece.className = `l-piece player-${player} ${index === 0 ? 'anchor' : 'segment'} orientation-${orientation}`;\n                        piece.dataset.player = player;\n                        piece.dataset.segmentIndex = index;\n                        \n                        // Set initial state for animation\n                        piece.style.cssText = `\n                            position: absolute;\n                            top: 10%;\n                            left: 10%;\n                            right: 10%;\n                            bottom: 10%;\n                            background: ${player === 1 ? 'linear-gradient(145deg, #3b82f6, #1d4ed8)' : 'linear-gradient(145deg, #ef4444, #dc2626)'};\n                            border: 2px solid ${player === 1 ? '#1e40af' : '#b91c1c'};\n                            border-radius: 6px;\n                            transform: scale(0) rotate(${orientation * 45}deg);\n                            opacity: 0;\n                            transition: all ${this.timing.lPiecePlacement * this.animationSpeed}ms cubic-bezier(0.34, 1.56, 0.64, 1);\n                            z-index: 10;\n                            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n                        `;\n                        \n                        // Add special styling for anchor piece\n                        if (index === 0) {\n                            piece.style.borderWidth = '3px';\n                            piece.style.boxShadow = `0 2px 12px ${player === 1 ? 'rgba(59, 130, 246, 0.5)' : 'rgba(239, 68, 68, 0.5)'}`;\n                        }\n                        \n                        cell.appendChild(piece);\n                        \n                        // Trigger animation\n                        requestAnimationFrame(() => {\n                            piece.style.transform = 'scale(1) rotate(0deg)';\n                            piece.style.opacity = '1';\n                        });\n                        \n                        // Handle animation completion\n                        const handleTransitionEnd = () => {\n                            piece.removeEventListener('transitionend', handleTransitionEnd);\n                            animationsCompleted++;\n                            \n                            if (animationsCompleted >= totalAnimations) {\n                                resolve();\n                            }\n                        };\n                        \n                        piece.addEventListener('transitionend', handleTransitionEnd);\n                        \n                        // Fallback timeout\n                        setTimeout(() => {\n                            piece.removeEventListener('transitionend', handleTransitionEnd);\n                            animationsCompleted++;\n                            if (animationsCompleted >= totalAnimations) {\n                                resolve();\n                            }\n                        }, this.timing.lPiecePlacement * this.animationSpeed + 100);\n                        \n                    }, index * 50); // Stagger each segment by 50ms\n                }\n            });\n            \n            // Fallback if no cells found\n            if (totalAnimations === 0) {\n                resolve();\n            }\n        });\n    }\n    \n    /**\n     * Animate L-piece removal with smooth fade-out\n     * @param {number} player - Player number (1 or 2)\n     */\n    async animateLPieceRemoval(player) {\n        return new Promise((resolve) => {\n            const pieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${player}\"]`);\n            \n            if (pieces.length === 0) {\n                resolve();\n                return;\n            }\n            \n            console.log(`🎬 Animating L-piece removal: Player ${player}`);\n            \n            let animationsCompleted = 0;\n            const totalAnimations = pieces.length;\n            \n            pieces.forEach((piece, index) => {\n                setTimeout(() => {\n                    piece.style.transition = `all ${this.timing.lPiecePlacement * this.animationSpeed}ms ease-out`;\n                    piece.style.transform = 'scale(0.8) rotate(45deg)';\n                    piece.style.opacity = '0';\n                    \n                    const handleTransitionEnd = () => {\n                        piece.removeEventListener('transitionend', handleTransitionEnd);\n                        if (piece.parentNode) {\n                            piece.parentNode.removeChild(piece);\n                        }\n                        animationsCompleted++;\n                        \n                        if (animationsCompleted >= totalAnimations) {\n                            resolve();\n                        }\n                    };\n                    \n                    piece.addEventListener('transitionend', handleTransitionEnd);\n                    \n                    // Fallback timeout\n                    setTimeout(() => {\n                        piece.removeEventListener('transitionend', handleTransitionEnd);\n                        if (piece.parentNode) {\n                            piece.parentNode.removeChild(piece);\n                        }\n                        animationsCompleted++;\n                        if (animationsCompleted >= totalAnimations) {\n                            resolve();\n                        }\n                    }, this.timing.lPiecePlacement * this.animationSpeed + 100);\n                    \n                }, index * 30); // Stagger removal\n            });\n        });\n    }\n    \n    /**\n     * Animate neutral piece placement\n     * @param {number} row - Row position (0-3)\n     * @param {number} col - Column position (0-3)\n     */\n    async animateNeutralPiecePlacement(row, col) {\n        return new Promise((resolve) => {\n            const cell = this.boardRenderer.getCellAt(row, col);\n            if (!cell) {\n                resolve();\n                return;\n            }\n            \n            console.log(`🎬 Animating neutral piece placement: ${row}, ${col}`);\n            \n            // Play placement sound\n            if (this.soundManager) {\n                this.soundManager.playNeutralPiecePlace();\n            }\n            \n            // Create neutral piece\n            const piece = document.createElement('div');\n            piece.className = 'neutral-piece';\n            piece.style.cssText = `\n                position: absolute;\n                top: 25%;\n                left: 25%;\n                right: 25%;\n                bottom: 25%;\n                background: radial-gradient(circle at 30% 30%, #ffffff, #e5e7eb);\n                border: 2px solid #9ca3af;\n                border-radius: 50%;\n                transform: scale(0);\n                opacity: 0;\n                transition: all ${this.timing.neutralPiece * this.animationSpeed}ms cubic-bezier(0.34, 1.56, 0.64, 1);\n                z-index: 8;\n                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n            `;\n            \n            cell.appendChild(piece);\n            \n            // Trigger animation\n            requestAnimationFrame(() => {\n                piece.style.transform = 'scale(1)';\n                piece.style.opacity = '1';\n            });\n            \n            // Handle animation completion\n            const handleTransitionEnd = () => {\n                piece.removeEventListener('transitionend', handleTransitionEnd);\n                resolve();\n            };\n            \n            piece.addEventListener('transitionend', handleTransitionEnd);\n            \n            // Fallback timeout\n            setTimeout(() => {\n                piece.removeEventListener('transitionend', handleTransitionEnd);\n                resolve();\n            }, this.timing.neutralPiece * this.animationSpeed + 100);\n        });\n    }\n    \n    /**\n     * Animate L-piece rotation preview\n     * @param {Array} positions - Array of [row, col] positions for L-piece\n     * @param {number} player - Player number (1 or 2)\n     * @param {number} newOrientation - New orientation (0-7)\n     */\n    showLPieceRotationPreview(positions, player, newOrientation) {\n        this.clearLPiecePreview();\n        \n        positions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.boardRenderer.getCellAt(row, col);\n            \n            if (cell) {\n                const preview = document.createElement('div');\n                preview.className = `l-piece-preview player-${player} ${index === 0 ? 'anchor' : 'segment'}`;\n                preview.style.cssText = `\n                    position: absolute;\n                    top: 15%;\n                    left: 15%;\n                    right: 15%;\n                    bottom: 15%;\n                    background: ${player === 1 ? 'rgba(59, 130, 246, 0.6)' : 'rgba(239, 68, 68, 0.6)'};\n                    border: 2px dashed ${player === 1 ? '#3b82f6' : '#ef4444'};\n                    border-radius: 4px;\n                    transform: rotate(${newOrientation * 45}deg);\n                    z-index: 12;\n                    pointer-events: none;\n                    animation: pulse-preview 1s infinite alternate;\n                `;\n                \n                cell.appendChild(preview);\n                this.previewElements.push(preview);\n            }\n        });\n        \n        console.log(`👻 L-piece rotation preview: Player ${player}, orientation ${newOrientation}`);\n    }\n    \n    /**\n     * Clear L-piece preview elements\n     */\n    clearLPiecePreview() {\n        this.previewElements.forEach(element => {\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n            }\n        });\n        this.previewElements = [];\n    }\n    \n    /**\n     * Clear all L-pieces for a specific player\n     * @private\n     */\n    clearPlayerLPiece(player) {\n        const pieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${player}\"]`);\n        pieces.forEach(piece => {\n            if (piece.parentNode) {\n                piece.parentNode.removeChild(piece);\n            }\n        });\n    }\n    \n    /**\n     * Animate victory sequence for L-Game\n     * @param {number} winningPlayer - Winning player (1 or 2)\n     * @param {Array} blockingPositions - Positions that caused the win\n     */\n    async animateVictory(winningPlayer, blockingPositions = []) {\n        if (this.reducedMotion) {\n            // Simple highlight for reduced motion\n            const winnerPieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${winningPlayer}\"]`);\n            winnerPieces.forEach(piece => {\n                piece.classList.add('victory-glow');\n            });\n            return;\n        }\n        \n        console.log(`🏆 Animating L-Game victory for player ${winningPlayer}`);\n        \n        // Highlight winning player's L-piece\n        const winnerPieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${winningPlayer}\"]`);\n        for (let i = 0; i < winnerPieces.length; i++) {\n            setTimeout(() => {\n                winnerPieces[i].classList.add('victory-piece');\n                \n                setTimeout(() => {\n                    winnerPieces[i].classList.add('victory-glow');\n                }, this.timing.victoryReveal);\n            }, i * this.timing.victoryStagger);\n        }\n        \n        // Highlight blocking positions if any\n        blockingPositions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.boardRenderer.getCellAt(row, col);\n            if (cell) {\n                setTimeout(() => {\n                    cell.classList.add('blocking-highlight');\n                }, (winnerPieces.length * this.timing.victoryStagger) + (index * 50));\n            }\n        });\n        \n        // Trigger celebration after highlights\n        setTimeout(() => {\n            this.triggerLGameCelebration(winningPlayer);\n        }, this.timing.victoryReveal + (winnerPieces.length * this.timing.victoryStagger));\n    }\n    \n    /**\n     * Trigger L-Game specific celebration effects\n     * @param {number} winningPlayer - Winning player (1 or 2)\n     */\n    triggerLGameCelebration(winningPlayer) {\n        if (this.reducedMotion || this.celebrationActive) return;\n        \n        this.celebrationActive = true;\n        console.log(`🎉 Triggering L-Game celebration for player ${winningPlayer}`);\n        \n        try {\n            // Play victory sound\n            if (this.soundManager) {\n                this.soundManager.playVictory();\n            }\n            \n            // Trigger confetti particles\n            if (this.particleEngine) {\n                const gameBoard = this.gameBoard;\n                const rect = gameBoard.getBoundingClientRect();\n                \n                const centerX = rect.left + rect.width / 2;\n                const centerY = rect.top + rect.height / 2;\n                \n                // Player-specific colors for L-Game\n                const confettiColors = winningPlayer === 1 ? \n                    ['#3b82f6', '#1d4ed8', '#60a5fa', '#1e40af', '#93c5fd'] :\n                    ['#ef4444', '#dc2626', '#f87171', '#b91c1c', '#fca5a5'];\n                    \n                // Create celebration burst\n                this.particleEngine.createCelebrationBurst({\n                    x: centerX,\n                    y: centerY,\n                    pattern: 'explosion',\n                    particleCount: 50, // Moderate for 4x4 game\n                    colors: confettiColors\n                });\n                \n            } else {\n                // Fallback: Simple DOM celebration for L-Game\n                const celebrationDiv = document.createElement('div');\n                celebrationDiv.innerHTML = winningPlayer === 1 ? '🔵🎉✨' : '🔴🎉✨';\n                celebrationDiv.style.cssText = `\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    font-size: 2.5rem;\n                    z-index: 9999;\n                    animation: l-game-celebration 2s ease-out forwards;\n                    pointer-events: none;\n                `;\n                \n                // Add keyframes for L-Game celebration\n                if (!document.getElementById('l-game-celebration-keyframes')) {\n                    const style = document.createElement('style');\n                    style.id = 'l-game-celebration-keyframes';\n                    style.textContent = `\n                        @keyframes l-game-celebration {\n                            0% { opacity: 1; transform: translate(-50%, -50%) scale(0.5) rotate(0deg); }\n                            50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2) rotate(180deg); }\n                            100% { opacity: 0; transform: translate(-50%, -50%) scale(1.5) rotate(360deg); }\n                        }\n                        @keyframes pulse-preview {\n                            0% { opacity: 0.6; }\n                            100% { opacity: 1.0; }\n                        }\n                    `;\n                    document.head.appendChild(style);\n                }\n                \n                this.gameBoard.style.position = 'relative';\n                this.gameBoard.appendChild(celebrationDiv);\n                \n                setTimeout(() => {\n                    if (celebrationDiv.parentNode) {\n                        celebrationDiv.parentNode.removeChild(celebrationDiv);\n                    }\n                }, 2000);\n            }\n            \n        } catch (error) {\n            console.warn('⚠️ L-Game celebration error:', error.message);\n        } finally {\n            // Reset celebration state\n            setTimeout(() => {\n                this.celebrationActive = false;\n            }, this.timing.confettiDuration);\n        }\n    }\n    \n    /**\n     * Animate cell hover feedback for L-Game\n     * @param {number} row - Row position (0-3)\n     * @param {number} col - Column position (0-3)\n     */\n    animateCellHover(row, col) {\n        if (this.reducedMotion) return;\n        \n        const cell = this.boardRenderer.getCellAt(row, col);\n        if (!cell) return;\n        \n        // Create hover ripple effect\n        const ripple = document.createElement('div');\n        ripple.className = 'cell-hover-ripple';\n        ripple.style.cssText = `\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            background: rgba(59, 130, 246, 0.3);\n            transform: translate(-50%, -50%) scale(0);\n            animation: cell-ripple-expand 0.5s ease-out;\n            pointer-events: none;\n            z-index: 5;\n        `;\n        \n        cell.style.position = 'relative';\n        cell.appendChild(ripple);\n        \n        // Remove ripple after animation\n        setTimeout(() => {\n            if (ripple.parentNode) {\n                ripple.parentNode.removeChild(ripple);\n            }\n        }, 500);\n    }\n    \n    /**\n     * Queue animation for smooth sequencing\n     * @param {Function} animationFunction - Animation function to execute\n     */\n    queueAnimation(animationFunction) {\n        this.animationQueue.push(animationFunction);\n        this.processAnimationQueue();\n    }\n    \n    /**\n     * Process animation queue\n     * @private\n     */\n    async processAnimationQueue() {\n        if (this.isAnimating || this.animationQueue.length === 0) {\n            return;\n        }\n        \n        this.isAnimating = true;\n        \n        while (this.animationQueue.length > 0) {\n            const animation = this.animationQueue.shift();\n            try {\n                await animation();\n            } catch (error) {\n                console.error('❌ L-Game animation error:', error);\n            }\n        }\n        \n        this.isAnimating = false;\n    }\n    \n    /**\n     * Clear all visual effects (for new game)\n     */\n    clearAllEffects() {\n        console.log('🧹 Clearing all L-Game visual effects for new game...');\n        \n        // Clear celebration state\n        this.celebrationActive = false;\n        \n        // Clear particle effects\n        if (this.particleEngine) {\n            this.particleEngine.clearCanvas();\n        }\n        \n        // Clear any pending animations\n        this.animationQueue = [];\n        this.isAnimating = false;\n        \n        // Clear previews\n        this.clearLPiecePreview();\n        \n        // Remove all game pieces\n        const allPieces = this.gameBoard.querySelectorAll('.l-piece, .neutral-piece');\n        allPieces.forEach(piece => {\n            if (piece.parentNode) {\n                piece.parentNode.removeChild(piece);\n            }\n        });\n        \n        // Clear all highlights\n        const highlightedCells = this.gameBoard.querySelectorAll('.victory-glow, .blocking-highlight');\n        highlightedCells.forEach(cell => {\n            cell.classList.remove('victory-glow', 'blocking-highlight');\n        });\n        \n        console.log('✅ All L-Game visual effects cleared');\n    }\n    \n    /**\n     * Get current animation state\n     */\n    getAnimationState() {\n        return {\n            isAnimating: this.isAnimating,\n            queueLength: this.animationQueue.length,\n            celebrationActive: this.celebrationActive,\n            previewElementsCount: this.previewElements.length,\n            reducedMotion: this.reducedMotion\n        };\n    }\n    \n    /**\n     * Cleanup all animations and remove event listeners\n     */\n    destroy() {\n        // Clear animation queue\n        this.animationQueue = [];\n        this.isAnimating = false;\n        \n        // Clear previews\n        this.clearLPiecePreview();\n        \n        // Clear all effects\n        this.clearAllEffects();\n        \n        // Cleanup premium effects\n        if (this.particleEngine) {\n            this.particleEngine.destroy();\n            this.particleEngine = null;\n        }\n        \n        if (this.soundManager) {\n            this.soundManager.destroy();\n            this.soundManager = null;\n        }\n        \n        this.celebrationActive = false;\n        \n        console.log('🎬 L-Game AnimationManager destroyed with premium effects cleanup');\n    }\n}\n\n// Add dynamic CSS for L-Game animations\nconst style = document.createElement('style');\nstyle.textContent = `\n@keyframes cell-ripple-expand {\n    0% {\n        transform: translate(-50%, -50%) scale(0);\n        opacity: 0.8;\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(3);\n        opacity: 0;\n    }\n}\n\n.l-piece.victory-piece {\n    animation: victory-pulse 0.8s infinite alternate;\n}\n\n.l-piece.victory-glow {\n    box-shadow: 0 0 20px currentColor, 0 0 40px currentColor !important;\n    transform: scale(1.1) !important;\n}\n\n.blocking-highlight {\n    background: rgba(255, 255, 0, 0.3) !important;\n    animation: blocking-flash 1s infinite alternate;\n}\n\n@keyframes victory-pulse {\n    0% { transform: scale(1); }\n    100% { transform: scale(1.05); }\n}\n\n@keyframes blocking-flash {\n    0% { background: rgba(255, 255, 0, 0.3) !important; }\n    100% { background: rgba(255, 255, 0, 0.6) !important; }\n}\n`;\ndocument.head.appendChild(style);"],"names":["style"],"mappings":"6CAsrBA,MAAMA,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCpB,SAAS,KAAK,YAAYA,CAAK"}