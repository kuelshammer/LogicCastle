{"version":3,"file":"DOMUtils-C6fb_Htl.js","sources":["../../assets/js/ui-modules/utils/DOMUtils.js"],"sourcesContent":["/**\n * DOM Utilities for UI Module System\n * \n * Provides null-safe DOM manipulation and element checking utilities\n * to support graceful degradation in minimal UI scenarios.\n */\n\nexport const DOMUtils = {\n    /**\n     * Safely add event listener to element if it exists\n     * @param {HTMLElement|null} element - DOM element or null\n     * @param {string} event - Event type\n     * @param {Function} handler - Event handler\n     * @param {Object} options - Event listener options\n     * @returns {boolean} True if listener was added\n     */\n    safeAddEventListener(element, event, handler, options = {}) {\n        if (!element || typeof element.addEventListener !== 'function') {\n            return false;\n        }\n        \n        try {\n            element.addEventListener(event, handler, options);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to add event listener:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely remove event listener from element if it exists\n     * @param {HTMLElement|null} element - DOM element or null\n     * @param {string} event - Event type\n     * @param {Function} handler - Event handler\n     * @param {Object} options - Event listener options\n     * @returns {boolean} True if listener was removed\n     */\n    safeRemoveEventListener(element, event, handler, options = {}) {\n        if (!element || typeof element.removeEventListener !== 'function') {\n            return false;\n        }\n        \n        try {\n            element.removeEventListener(event, handler, options);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to remove event listener:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Check if element exists and is connected to DOM\n     * @param {HTMLElement|null} element - Element to check\n     * @returns {boolean} True if element exists and is connected\n     */\n    isElementValid(element) {\n        return element && \n               element instanceof Element && \n               element.isConnected;\n    },\n\n    /**\n     * Safely set element content\n     * @param {HTMLElement|null} element - Target element\n     * @param {string} content - Content to set\n     * @param {string} method - Method to use: 'innerHTML', 'textContent', 'innerText'\n     * @returns {boolean} True if content was set\n     */\n    safeSetContent(element, content, method = 'innerHTML') {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            switch (method) {\n                case 'innerHTML':\n                    element.innerHTML = content;\n                    break;\n                case 'textContent':\n                    element.textContent = content;\n                    break;\n                case 'innerText':\n                    element.innerText = content;\n                    break;\n                default:\n                    element.innerHTML = content;\n            }\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to set element content:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely add CSS class to element\n     * @param {HTMLElement|null} element - Target element\n     * @param {string|string[]} classNames - Class name(s) to add\n     * @returns {boolean} True if classes were added\n     */\n    safeAddClass(element, classNames) {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            const classes = Array.isArray(classNames) ? classNames : [classNames];\n            element.classList.add(...classes);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to add CSS class:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely remove CSS class from element\n     * @param {HTMLElement|null} element - Target element\n     * @param {string|string[]} classNames - Class name(s) to remove\n     * @returns {boolean} True if classes were removed\n     */\n    safeRemoveClass(element, classNames) {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            const classes = Array.isArray(classNames) ? classNames : [classNames];\n            element.classList.remove(...classes);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to remove CSS class:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely toggle CSS class on element\n     * @param {HTMLElement|null} element - Target element\n     * @param {string} className - Class name to toggle\n     * @param {boolean} force - Force add (true) or remove (false)\n     * @returns {boolean} True if class was toggled\n     */\n    safeToggleClass(element, className, force = undefined) {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            return element.classList.toggle(className, force);\n        } catch (error) {\n            console.warn('⚠️ Failed to toggle CSS class:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely append child to element\n     * @param {HTMLElement|null} parent - Parent element\n     * @param {HTMLElement} child - Child element to append\n     * @returns {boolean} True if child was appended\n     */\n    safeAppendChild(parent, child) {\n        if (!this.isElementValid(parent) || !this.isElementValid(child)) {\n            return false;\n        }\n        \n        try {\n            parent.appendChild(child);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to append child:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely remove child from element\n     * @param {HTMLElement|null} parent - Parent element\n     * @param {HTMLElement} child - Child element to remove\n     * @returns {boolean} True if child was removed\n     */\n    safeRemoveChild(parent, child) {\n        if (!this.isElementValid(parent) || !this.isElementValid(child)) {\n            return false;\n        }\n        \n        try {\n            parent.removeChild(child);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to remove child:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely set element style properties\n     * @param {HTMLElement|null} element - Target element\n     * @param {Object} styles - Style properties to set\n     * @returns {boolean} True if styles were set\n     */\n    safeSetStyles(element, styles) {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            Object.assign(element.style, styles);\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to set element styles:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Safely set element attributes\n     * @param {HTMLElement|null} element - Target element\n     * @param {Object} attributes - Attributes to set\n     * @returns {boolean} True if attributes were set\n     */\n    safeSetAttributes(element, attributes) {\n        if (!this.isElementValid(element)) {\n            return false;\n        }\n        \n        try {\n            for (const [key, value] of Object.entries(attributes)) {\n                element.setAttribute(key, value);\n            }\n            return true;\n        } catch (error) {\n            console.warn('⚠️ Failed to set element attributes:', error.message);\n            return false;\n        }\n    },\n\n    /**\n     * Create element with safe attribute setting\n     * @param {string} tagName - HTML tag name\n     * @param {Object} options - Element options\n     * @param {Object} options.attributes - Attributes to set\n     * @param {Object} options.styles - Styles to set\n     * @param {string|string[]} options.classes - CSS classes to add\n     * @param {string} options.content - Inner content\n     * @returns {HTMLElement|null} Created element or null on failure\n     */\n    createElement(tagName, options = {}) {\n        try {\n            const element = document.createElement(tagName);\n            \n            if (options.attributes) {\n                this.safeSetAttributes(element, options.attributes);\n            }\n            \n            if (options.styles) {\n                this.safeSetStyles(element, options.styles);\n            }\n            \n            if (options.classes) {\n                this.safeAddClass(element, options.classes);\n            }\n            \n            if (options.content) {\n                this.safeSetContent(element, options.content);\n            }\n            \n            return element;\n        } catch (error) {\n            console.warn('⚠️ Failed to create element:', error.message);\n            return null;\n        }\n    },\n\n    /**\n     * Query selector with null safety\n     * @param {string} selector - CSS selector\n     * @param {HTMLElement} context - Context element (default: document)\n     * @returns {HTMLElement|null} Found element or null\n     */\n    safeQuerySelector(selector, context = document) {\n        try {\n            return context.querySelector(selector);\n        } catch (error) {\n            console.warn('⚠️ Failed to query selector:', error.message);\n            return null;\n        }\n    },\n\n    /**\n     * Query all selectors with null safety\n     * @param {string} selector - CSS selector\n     * @param {HTMLElement} context - Context element (default: document)\n     * @returns {NodeList|Array} Found elements or empty array\n     */\n    safeQuerySelectorAll(selector, context = document) {\n        try {\n            return context.querySelectorAll(selector);\n        } catch (error) {\n            console.warn('⚠️ Failed to query all selectors:', error.message);\n            return [];\n        }\n    }\n};\n\n// Export for CommonJS compatibility\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { DOMUtils };\n}"],"names":["require_DOMUtils_00c","__commonJSMin","exports","module","DOMUtils","element","event","handler","options","content","method","classNames","classes","className","force","parent","child","styles","attributes","key","value","tagName","selector","context"],"mappings":"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"}