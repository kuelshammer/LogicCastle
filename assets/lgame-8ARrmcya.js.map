{"version":3,"mappings":"sLAYO,MAAMA,CAAqB,CAC9B,aAAc,CACV,KAAK,KAAO,KACZ,KAAK,YAAc,GAGnB,KAAK,KAAO,EACZ,KAAK,KAAO,EAGZ,KAAK,YAAc,GACnB,KAAK,iBAAmB,GAGxB,KAAK,eAAiB,IAAI,IAG1B,KAAK,cAAgB,KACrB,KAAK,WAAa,EAClB,KAAK,gBAAkB,EAGvB,KAAK,cAAgB,KACrB,KAAK,UAAY,UACjB,KAAK,YAAc,IAC3B,CAKI,MAAM,MAAO,CACT,GAAI,CAIA,MAAMC,EAAI,EAGV,KAAK,KAAO,IAAIC,EAChB,KAAK,YAAc,GAKnB,MAAMC,EAAc,KAAK,oBAAmB,EACtCC,EAAmB,GAIzB,GAAID,GAAeC,EAAkB,CACjC,MAAMC,IAAeD,EAAmBD,GAAeC,EAAmB,KAAK,QAAQ,CAAC,CAExG,CAKY,YAAK,KAAK,cAAe,CAAE,YAAAD,CAAW,CAAE,EAEjC,EACnB,OAAiBG,EAAO,CAEZ,MAAMA,CAClB,CACA,CAKI,qBAAsB,CAGlB,MAAO,GAAK,EACpB,CASI,SAASC,EAAOC,EAAOC,EAAa,CAChC,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,sBAAsB,EAG1C,KAAK,cAAgB,YAAY,IAAG,EAEpC,GAAI,CAEA,GAAIF,EAAQ,GAAKA,GAAS,KAAK,MAAQC,EAAQ,GAAKA,GAAS,KAAK,KAC9D,MAAM,IAAI,MAAM,sBAAsBD,CAAK,KAAKC,CAAK,4BAA4B,EAIrF,GAAIC,EAAc,GAAKA,EAAc,EACjC,MAAM,IAAI,MAAM,wBAAwBA,CAAW,eAAe,EAGtE,MAAMC,EAAgB,KAAK,KAAK,eAGhC,KAAK,KAAK,UAAUH,EAAOC,EAAOC,CAAW,EAG7C,MAAME,EAAW,YAAY,IAAG,EAAK,KAAK,cAC1C,KAAK,aACL,KAAK,iBAAmB,KAAK,iBAAmB,KAAK,WAAa,GAAKA,GAAY,KAAK,WAGxF,MAAMC,EAAO,CACT,KAAM,UACN,MAAAL,EACA,MAAAC,EACA,YAAAC,EACA,OAAQC,EACR,WAAY,KAAK,KAAK,WACtB,UAAW,KAAK,IAAG,EACnB,cAAeC,CAC/B,EAEY,KAAK,YAAY,KAAKC,CAAI,EAC1B,KAAK,mBAGL,MAAMC,EAAS,CACX,KAAM,UACN,MAAAN,EACA,MAAAC,EACA,YAAAC,EACA,OAAQC,EACR,MAAO,KAAK,SAAQ,EACpB,cAAe,KAAK,KAAK,eACzB,WAAY,KAAK,KAAK,UACtB,OAAQ,KAAK,KAAK,OAClB,WAAY,KAAK,KAAK,WACtB,cAAeC,EACf,eAAgB,CAAC,KAAK,KAAK,SAC3C,EAQY,GAHA,KAAK,KAAK,OAAQE,CAAM,EACxB,KAAK,KAAK,aAAcA,CAAM,EAE1BA,EAAO,WAAY,CACnB,MAAMC,EAAc,CAChB,OAAQD,EAAO,OACf,WAAY,KAAK,cAAcA,EAAO,MAAM,EAC5C,WAAY,KAAK,WACjB,gBAAiB,KAAK,eAC1C,EAGgB,KAAK,KAAK,WAAYC,CAAW,CACjD,CAEY,OAAOD,CAEnB,OAAiBP,EAAO,CAEZ,MAAMA,CAClB,CACA,CAUI,iBAAiBS,EAASC,EAAST,EAAOC,EAAO,CAC7C,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,sBAAsB,EAG1C,GAAI,KAAK,KAAK,UACV,MAAM,IAAI,MAAM,yCAAyC,EAG7D,GAAI,CAEA,GAAIO,EAAU,GAAKA,GAAW,KAAK,MAAQC,EAAU,GAAKA,GAAW,KAAK,MACtET,EAAQ,GAAKA,GAAS,KAAK,MAAQC,EAAQ,GAAKA,GAAS,KAAK,KAC9D,MAAM,IAAI,MAAM,4CAA4C,EAIhE,GAAI,KAAK,QAAQO,EAASC,CAAO,IAAM,EACnC,MAAM,IAAI,MAAM,wBAAwBD,CAAO,IAAIC,CAAO,GAAG,EAIjE,GAAI,KAAK,QAAQT,EAAOC,CAAK,IAAM,EAC/B,MAAM,IAAI,MAAM,oBAAoBD,CAAK,IAAIC,CAAK,gBAAgB,EAItE,KAAK,KAAK,mBAAmBO,EAASC,EAAST,EAAOC,CAAK,EAE3D,MAAMI,EAAO,CACT,KAAM,UACN,QAAAG,EACA,QAAAC,EACA,MAAAT,EACA,MAAAC,EACA,UAAW,KAAK,IAAG,CACnC,EAGgB,KAAK,YAAY,OAAS,IAC1B,KAAK,YAAY,KAAK,YAAY,OAAS,CAAC,EAAE,YAAcI,GAGhE,MAAMC,EAAS,CACX,KAAM,UACN,QAAAE,EACA,QAAAC,EACA,MAAAT,EACA,MAAAC,EACA,MAAO,KAAK,SAAQ,CACpC,EAGY,YAAK,KAAK,cAAeK,CAAM,EAExBA,CAEnB,OAAiBP,EAAO,CAEZ,MAAMA,CAClB,CACA,CAKI,cAAe,CACX,OAAK,KAAK,YAIH,CACH,MAAO,KAAK,SAAQ,EACpB,cAAe,KAAK,KAAK,eACzB,kBAAmB,KAAK,cAAc,KAAK,KAAK,cAAc,EAC9D,UAAW,KAAK,KAAK,WACrB,WAAY,KAAK,KAAK,UACtB,OAAQ,KAAK,KAAK,OAClB,WAAY,KAAK,cAAc,KAAK,KAAK,MAAM,EAC/C,gBAAiB,KAAK,KAAK,sBAAqB,EAChD,YAAa,KAAK,oBAAmB,EACrC,iBAAkB,CACd,WAAY,KAAK,WACjB,gBAAiB,KAAK,eACtC,CACA,EAjBmB,IAkBnB,CAMI,UAAW,CACP,GAAI,CAAC,KAAK,YAAa,OAAO,KAE9B,MAAMW,EAAY,KAAK,KAAK,gBAAe,EACrCC,EAAU,GAEhB,QAASC,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAAO,CACtCD,EAAQC,CAAG,EAAI,GACf,QAASC,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAC/BF,EAAQC,CAAG,EAAEC,CAAG,EAAIH,EAAUE,EAAM,KAAK,KAAOC,CAAG,CAEnE,CAEQ,OAAOF,CACf,CAQI,QAAQC,EAAKC,EAAK,CAEd,GADI,CAAC,KAAK,aACND,EAAM,GAAKA,GAAO,KAAK,MAAQC,EAAM,GAAKA,GAAO,KAAK,KAAM,MAAO,GAEvE,GAAI,CACA,OAAO,KAAK,KAAK,SAASD,EAAKC,CAAG,CAC9C,MAAwB,CACZ,MAAO,EACnB,CACA,CAMI,kBAAmB,CACf,OAAK,KAAK,YACH,KAAK,KAAK,eADa,CAEtC,CAOI,cAAcC,EAAQ,CAClB,OAAKA,EACEA,IAAW,EAAI,OAAS,MADX,MAE5B,CAMI,cAAe,CACX,OAAK,KAAK,YACH,KAAK,KAAK,WADa,CAEtC,CAMI,YAAa,CACT,OAAK,KAAK,YACH,KAAK,KAAK,UADa,EAEtC,CAMI,WAAY,CACR,OAAK,KAAK,YACH,KAAK,KAAK,OADa,IAEtC,CAMI,oBAAqB,CACjB,OAAK,KAAK,YACH,KAAK,KAAK,sBAAqB,EADR,CAEtC,CAMI,wBAAyB,CACrB,OAAK,KAAK,YACH,KAAK,KAAK,0BAAyB,EADZ,EAEtC,CAKI,SAAU,CACN,GAAI,CAAC,KAAK,YACN,MAAM,IAAI,MAAM,sBAAsB,EAG1C,GAAI,CACA,KAAK,KAAK,MAAK,EACf,KAAK,YAAc,GACnB,KAAK,iBAAmB,GACxB,KAAK,WAAa,EAClB,KAAK,gBAAkB,EACvB,KAAK,cAAgB,KACrB,KAAK,UAAY,UACjB,KAAK,YAAc,KAGnB,KAAK,KAAK,UAAW,KAAK,aAAY,CAAE,CAEpD,OAAiBf,EAAO,CAEZ,MAAMA,CAClB,CACA,CAQI,mBAAmBa,EAAKC,EAAK,CACzB,MAAI,CAAC,KAAK,aAAe,KAAK,KAAK,UAAkB,GAC9C,KAAK,QAAQD,EAAKC,CAAG,IAAM,CAC1C,CAQI,kBAAkBD,EAAKC,EAAK,CACxB,MAAI,CAAC,KAAK,aAAe,KAAK,KAAK,UAAkB,GAC9C,KAAK,QAAQD,EAAKC,CAAG,IAAM,CAC1C,CAMI,kBAAmB,CACf,GAAI,CAAC,KAAK,YAAa,MAAO,GAE9B,MAAME,EAAgB,GACtB,QAASH,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAC/B,QAASC,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAC3B,KAAK,QAAQD,EAAKC,CAAG,IAAM,GAC3BE,EAAc,KAAK,CAAE,IAAAH,EAAK,IAAAC,CAAG,CAAE,EAI3C,OAAOE,CACf,CAMI,mBAAoB,CAChB,GAAI,CAAC,KAAK,YAAa,MAAO,GAE9B,MAAMC,EAAiB,GACvB,QAASJ,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAC/B,QAASC,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAC3B,KAAK,QAAQD,EAAKC,CAAG,IAAM,GAC3BG,EAAe,KAAK,CAAE,IAAAJ,EAAK,IAAAC,CAAG,CAAE,EAI5C,OAAOG,CACf,CAOI,GAAGC,EAAOC,EAAU,CACX,KAAK,eAAe,IAAID,CAAK,GAC9B,KAAK,eAAe,IAAIA,EAAO,EAAE,EAErC,KAAK,eAAe,IAAIA,CAAK,EAAE,KAAKC,CAAQ,CACpD,CAKI,IAAID,EAAOC,EAAU,CACjB,GAAI,KAAK,eAAe,IAAID,CAAK,EAAG,CAChC,MAAME,EAAY,KAAK,eAAe,IAAIF,CAAK,EACzCG,EAAQD,EAAU,QAAQD,CAAQ,EACpCE,EAAQ,IACRD,EAAU,OAAOC,EAAO,CAAC,CAEzC,CACA,CAMI,KAAKH,EAAOI,EAAM,CACd,GAAI,KAAK,eAAe,IAAIJ,CAAK,EAAG,CAChC,MAAME,EAAY,KAAK,eAAe,IAAIF,CAAK,EAC/C,UAAWC,KAAYC,EACnB,GAAI,CACAD,EAASG,CAAI,CACjC,MAAgC,CAEhC,CAEA,CACA,CAOI,qBAAsB,CAClB,MAAMzB,EAAc,KAAK,oBAAmB,EACtCC,EAAmB,GAEzB,IAAIyB,EAAmB,KACvB,OAAI,KAAK,cACD1B,GAAeC,EAEfyB,EAAmB,KADEzB,EAAmBD,GAAeC,EAAmB,KAAK,QAAQ,CAAC,CACxD,YAGhCyB,EAAmB,KADA1B,EAAcC,GAAoBA,EAAmB,KAAK,QAAQ,CAAC,CACxD,cAI/B,CACH,WAAY,KAAK,WACjB,gBAAiB,KAAK,gBACtB,YAAaD,EACb,iBAAkB0B,EAClB,aAAc,0BAC1B,CACA,CAKI,YAAa,CACT,MAAO,CAAC,GAAG,KAAK,WAAW,CACnC,CAKI,YAAa,CACT,MAAO,CACH,QAAS,KAAK,WAAU,EACxB,WAAY,KAAK,aAAY,EAC7B,YAAa,KAAK,oBAAmB,EACrC,UAAW,KAAK,IAAG,CAC/B,CACA,CAKI,YAAa,CACT,GAAI,CAAC,KAAK,YAEN,OAGJ,MAAMC,EAAQ,KAAK,SAAQ,EAI3B,QAASX,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAAO,CACtC,IAAIY,EAAS,GAAGZ,EAAM,CAAC,KACvB,QAASC,EAAM,EAAGA,EAAM,KAAK,KAAMA,IAAO,CACtC,MAAMY,EAAOF,EAAMX,CAAG,EAAEC,CAAG,EAC3B,IAAIa,EAAS,IACTD,IAAS,EAAGC,EAAS,IAChBD,IAAS,EAAGC,EAAS,IACrBD,IAAS,IAAGC,EAAS,KAC9BF,GAAUE,EAAS,GACnC,CAEA,CAQA,CAKI,cAAe,CACX,OAAK,KAAK,YAEH,CACH,UAAW,KAAK,aAAY,EAC5B,YAAa,KAAK,oBAAmB,EACrC,cAAe,KAAK,iBAAgB,EACpC,eAAgB,KAAK,kBAAiB,EACtC,QAAS,KAAK,WAAU,CACpC,EARsC,IAStC,CAKI,SAAU,CACN,KAAK,eAAe,MAAK,EACzB,KAAK,YAAc,GACnB,KAAK,YAAc,GACnB,KAAK,KAAO,KACZ,KAAK,cAAgB,KACrB,KAAK,YAAc,IAG3B,CACA,CCvlBO,MAAMC,CAAmB,CAC5B,YAAYC,EAAW,CACnB,KAAK,UAAYA,EAGjB,KAAK,UAAY,EACjB,KAAK,MAAQ,GAGb,KAAK,OAAS,CACV,QAAS,CAAE,KAAM,SAAU,MAAO,GAAI,YAAa,CAAC,EACpD,QAAS,CAAE,KAAM,SAAU,MAAO,GAAI,YAAa,CAAC,EACpD,SAAU,CAAE,KAAM,UAAW,KAAM,IAAI,EACvC,SAAU,CAAE,KAAM,UAAW,KAAM,IAAI,CACnD,EAGQ,KAAK,YAAc,GACnB,KAAK,cAAgB,KACrB,KAAK,iBAAmB,IAAI,GACpC,CAKI,MAAM,MAAO,CACT,OAAO,KAAK,gBAAe,CACnC,CAKI,MAAM,aAAc,CAChB,OAAO,KAAK,gBAAe,CACnC,CAKI,iBAAkB,CACd,OAAK,KAAK,WAMV,KAAK,UAAU,UAAY,GAC3B,KAAK,MAAQ,GAGb,KAAK,kBAAiB,EAGtB,KAAK,kBAAiB,EAItB,KAAK,YAAc,GACZ,IAhBI,EAiBnB,CAMI,mBAAoB,CAChB,KAAK,UAAU,UAAY,yBAG3B,OAAO,OAAO,KAAK,UAAU,MAAO,CAChC,QAAS,OACT,oBAAqB,UAAU,KAAK,SAAS,SAC7C,iBAAkB,UAAU,KAAK,SAAS,SAC1C,IAAK,MACL,YAAa,MACb,WAAY,2CACZ,aAAc,OACd,QAAS,OACT,UAAW,gCACX,OAAQ,oBACR,MAAO,QACP,OAAQ,QACR,OAAQ,YACR,SAAU,UACtB,CAAS,CAGT,CAMI,mBAAoB,CAChB,QAAShB,EAAM,EAAGA,EAAM,KAAK,UAAWA,IACpC,QAASC,EAAM,EAAGA,EAAM,KAAK,UAAWA,IAAO,CAC3C,MAAMY,EAAO,KAAK,YAAYb,EAAKC,CAAG,EACtC,KAAK,MAAM,KAAKY,CAAI,EACpB,KAAK,UAAU,YAAYA,CAAI,CAC/C,CAEA,CAMI,YAAYb,EAAKC,EAAK,CAClB,MAAMY,EAAO,SAAS,cAAc,KAAK,EACzC,OAAAA,EAAK,UAAY,aACjBA,EAAK,QAAQ,IAAMb,EACnBa,EAAK,QAAQ,IAAMZ,EACnBY,EAAK,QAAQ,MAAQb,EAAM,KAAK,UAAYC,EAG5C,OAAO,OAAOY,EAAK,MAAO,CACtB,WAAY,2CACZ,OAAQ,oBACR,QAAS,OACT,WAAY,SACZ,eAAgB,SAChB,OAAQ,UACR,WAAY,gBACZ,SAAU,WACV,WAAY,OACZ,aAAc,KAC1B,CAAS,EAEMA,CACf,CAKI,UAAUb,EAAKC,EAAK,CAChB,OAAO,KAAK,UAAU,cAAc,cAAcD,CAAG,gBAAgBC,CAAG,IAAI,CACpF,CAKI,eAAeO,EAAO,CAClB,OAAO,KAAK,UAAU,cAAc,gBAAgBA,CAAK,IAAI,CACrE,CAKI,YAAYN,EAAQe,EAAW3B,EAAc,EAAG,CAC5C,MAAI,CAAC,MAAM,QAAQ2B,CAAS,GAAKA,EAAU,SAAW,EAE3C,IAIX,KAAK,YAAYf,CAAM,EAGvBe,EAAU,QAAQ,CAACC,EAAKV,IAAU,CAC9B,KAAM,CAACR,EAAKC,CAAG,EAAIiB,EACbL,EAAO,KAAK,UAAUb,EAAKC,CAAG,EACpC,GAAIY,EAAM,CACN,MAAMM,EAAQ,KAAK,cAAcjB,EAAQM,IAAU,CAAC,EACpDK,EAAK,YAAYM,CAAK,EAGtB,KAAK,OAAOjB,CAAM,EAAE,MAAM,KAAK,CAAE,IAAAF,EAAK,IAAAC,EAAK,KAAAY,EAAM,CACjE,CACA,CAAS,EAED,KAAK,OAAOX,CAAM,EAAE,YAAcZ,EAE3B,GACf,CAMI,cAAcY,EAAQkB,EAAW,GAAO,CACpC,MAAMD,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,UAAUjB,CAAM,WAGlC,MAAMmB,EAAe,CACjB,QAAS,CACL,WAAY,4CACZ,OAAQ,mBACxB,EACY,QAAS,CACL,WAAY,4CACZ,OAAQ,mBACxB,CACA,EAaQ,GAXA,OAAO,OAAOF,EAAM,MAAO,CACvB,MAAO,OACP,OAAQ,OACR,aAAc,MACd,WAAY,wCACZ,UAAW,gCACX,SAAU,WACV,GAAGE,EAAanB,CAAM,CAClC,CAAS,EAGGkB,EAAU,CACV,MAAME,EAAkB,SAAS,cAAc,KAAK,EACpDA,EAAgB,UAAY,mBAC5B,OAAO,OAAOA,EAAgB,MAAO,CACjC,SAAU,WACV,IAAK,MACL,MAAO,MACP,MAAO,MACP,OAAQ,MACR,WAAY,2BACZ,aAAc,KAC9B,CAAa,EACDH,EAAM,YAAYG,CAAe,CAC7C,CAEQ,OAAOH,CACf,CAKI,YAAYjB,EAAQ,CAChB,KAAK,OAAOA,CAAM,EAAE,MAAM,QAAQ,CAAC,CAAE,KAAAW,KAAW,CAC5C,MAAMM,EAAQN,EAAK,cAAc,SAAS,EACtCM,GACAA,EAAM,OAAM,CAE5B,CAAS,EACD,KAAK,OAAOjB,CAAM,EAAE,MAAQ,EACpC,CAKI,kBAAkBqB,EAAWvB,EAAKC,EAAK,CACnC,MAAMY,EAAO,KAAK,UAAUb,EAAKC,CAAG,EACpC,GAAI,CAACY,EAED,MAAO,GAIX,KAAK,kBAAkBU,CAAS,EAGhC,MAAMJ,EAAQ,KAAK,oBAAmB,EACtC,OAAAN,EAAK,YAAYM,CAAK,EAGtB,KAAK,OAAOI,CAAS,EAAI,CAAE,KAAM,UAAW,KAAM,CAAE,IAAAvB,EAAK,IAAAC,EAAK,QAASY,CAAI,CAAE,EAGtE,EACf,CAMI,qBAAsB,CAClB,MAAMM,EAAQ,SAAS,cAAc,KAAK,EAC1C,OAAAA,EAAM,UAAY,wBAElB,OAAO,OAAOA,EAAM,MAAO,CACvB,MAAO,MACP,OAAQ,MACR,aAAc,MACd,WAAY,4CACZ,OAAQ,oBACR,UAAW,8BACvB,CAAS,EAEMA,CACf,CAKI,kBAAkBI,EAAW,CACzB,GAAI,KAAK,OAAOA,CAAS,GAAK,KAAK,OAAOA,CAAS,EAAE,KAAM,CAEvD,MAAMJ,EADO,KAAK,OAAOI,CAAS,EAAE,KAAK,QACtB,cAAc,gBAAgB,EAC7CJ,GACAA,EAAM,OAAM,EAEhB,KAAK,OAAOI,CAAS,EAAE,KAAO,IAC1C,CACA,CAKI,YAAa,CACT,KAAK,MAAM,QAAQV,GAAQ,CAERA,EAAK,iBAAiB,yBAAyB,EACvD,QAAQM,GAASA,EAAM,OAAM,CAAE,EAGtCN,EAAK,UAAU,OACX,cAAe,WAAY,aAAc,eACzC,kBAAmB,mBAAoB,cACvD,CACA,CAAS,EAGD,KAAK,OAAS,CACV,QAAS,CAAE,KAAM,SAAU,MAAO,GAAI,YAAa,CAAC,EACpD,QAAS,CAAE,KAAM,SAAU,MAAO,GAAI,YAAa,CAAC,EACpD,SAAU,CAAE,KAAM,UAAW,KAAM,IAAI,EACvC,SAAU,CAAE,KAAM,UAAW,KAAM,IAAI,CACnD,EAEQ,KAAK,cAAgB,KACrB,KAAK,iBAAiB,MAAK,CAGnC,CAKI,oBAAoBW,EAAgB,CAChC,KAAK,gBAAe,EAEf,MAAM,QAAQA,CAAc,GAEjCA,EAAe,QAAQC,GAAY,CAC/B,IAAIzB,EAAKC,EACL,MAAM,QAAQwB,CAAQ,EACtB,CAACzB,EAAKC,CAAG,EAAIwB,GAEbzB,EAAMyB,EAAS,IACfxB,EAAMwB,EAAS,KAGnB,MAAMZ,EAAO,KAAK,UAAUb,EAAKC,CAAG,EAChCY,IACAA,EAAK,UAAU,IAAI,YAAY,EAC/B,KAAK,iBAAiB,IAAIA,CAAI,EAE9C,CAAS,CAGT,CAKI,gBAAgBb,EAAKC,EAAK,CACtB,MAAMY,EAAO,KAAK,UAAUb,EAAKC,CAAG,EAChCY,IACAA,EAAK,UAAU,IAAI,cAAc,EAGjC,WAAW,IAAM,CACbA,EAAK,UAAU,OAAO,cAAc,CACpD,EAAe,GAAI,EAEnB,CAKI,YAAYb,EAAKC,EAAK,CAClB,KAAK,eAAc,EAEnB,MAAMY,EAAO,KAAK,UAAUb,EAAKC,CAAG,EAChCY,IACAA,EAAK,UAAU,IAAI,UAAU,EAC7B,KAAK,cAAgB,CAAE,IAAAb,EAAK,IAAAC,EAAK,KAAAY,CAAI,EAEjD,CAKI,gBAAiB,CACT,KAAK,gBACL,KAAK,cAAc,KAAK,UAAU,OAAO,UAAU,EACnD,KAAK,cAAgB,KAEjC,CAKI,iBAAkB,CACd,KAAK,iBAAiB,QAAQA,GAAQ,CAClCA,EAAK,UAAU,OAAO,aAAc,cAAe,cAAc,CAC7E,CAAS,EACD,KAAK,iBAAiB,MAAK,CACnC,CAKI,mBAAmBI,EAAW,CACrB,MAAM,QAAQA,CAAS,GAE5BA,EAAU,QAAQQ,GAAY,CAC1B,KAAM,CAACzB,EAAKC,CAAG,EAAIwB,EACbZ,EAAO,KAAK,UAAUb,EAAKC,CAAG,EAChCY,GACAA,EAAK,UAAU,IAAI,iBAAiB,CAEpD,CAAS,CACT,CAKI,oBAAoBX,EAAQ,CAExB,KAAK,OAAOA,CAAM,EAAE,MAAM,QAAQ,CAAC,CAAE,KAAAW,KAAW,CAC5CA,EAAK,UAAU,IAAI,kBAAkB,CACjD,CAAS,CACT,CAKI,oBAAoBa,EAAW,CAC3B,KAAK,WAAU,EAEVA,IAGDA,EAAU,gBACV,KAAK,YAAY,UAAWA,EAAU,eAAe,UAAWA,EAAU,eAAe,WAAW,EAEpGA,EAAU,gBACV,KAAK,YAAY,UAAWA,EAAU,eAAe,UAAWA,EAAU,eAAe,WAAW,EAIpGA,EAAU,UACV,KAAK,kBAAkB,WAAYA,EAAU,SAAS,IAAKA,EAAU,SAAS,GAAG,EAEjFA,EAAU,UACV,KAAK,kBAAkB,WAAYA,EAAU,SAAS,IAAKA,EAAU,SAAS,GAAG,EAI7F,CAKI,eAAgB,CACZ,MAAO,CACH,OAAQ,CAAE,GAAG,KAAK,MAAM,EACxB,cAAe,KAAK,cACpB,iBAAkB,MAAM,KAAK,KAAK,gBAAgB,CAC9D,CACA,CAKI,gBAAgB1B,EAAKC,EAAK,CACtB,MAAMY,EAAO,KAAK,UAAUb,EAAKC,CAAG,EACpC,OAAOY,GAAQ,CAACA,EAAK,cAAc,yBAAyB,CACpE,CAKI,gBAAgBb,EAAKC,EAAK,CACtB,OAAOD,GAAO,GAAKA,EAAM,KAAK,WAAaC,GAAO,GAAKA,EAAM,KAAK,SAC1E,CAKI,WAAWD,EAAKC,EAAK,CACjB,MAAMY,EAAO,KAAK,UAAUb,EAAKC,CAAG,EACpC,GAAI,CAACY,EAAM,OAAO,KAElB,MAAMc,EAASd,EAAK,cAAc,SAAS,EAC3C,OAAIc,EAEO,CAAE,KAAM,SAAU,OADVA,EAAO,UAAU,SAAS,SAAS,EAAI,UAAY,SACnC,EAGnBd,EAAK,cAAc,gBAAgB,EAExC,CAAE,KAAM,SAAS,EAGrB,IACf,CAKI,aAAc,CACV,OAAO,KAAK,KACpB,CACA,CCxfO,MAAMe,CAAwB,CACjC,YAAYC,EAAeb,EAAW,CAClC,KAAK,cAAgBa,EACrB,KAAK,UAAYb,EAGjB,KAAK,YAAc,KACnB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,GACvB,KAAK,iBAAmB,GACxB,KAAK,gBAAkB,UACvB,KAAK,mBAAqB,EAG1B,KAAK,eAAiB,GAGtB,KAAK,oBAAsB,KAC3B,KAAK,oBAAsB,KAC3B,KAAK,yBAA2B,KAChC,KAAK,uBAAyB,KAC9B,KAAK,4BAA8B,IAC3C,CAKI,uBAAwB,CACf,KAAK,YAGV,KAAK,wBAAuB,EAC5B,KAAK,wBAAuB,EAGpC,CAMI,yBAA0B,CACtB,MAAMc,EAAgBzB,GAAU,CAC5B,MAAMQ,EAAOR,EAAM,OAAO,QAAQ,aAAa,EAC/C,GAAIQ,EAAM,CACN,MAAMb,EAAM,SAASa,EAAK,QAAQ,GAAG,EAC/BZ,EAAM,SAASY,EAAK,QAAQ,GAAG,EACrC,KAAK,gBAAgBb,EAAKC,CAAG,CAC7C,CACA,EAEQ,KAAK,UAAU,iBAAiB,QAAS6B,CAAY,EACrD,KAAK,oBAAoB,KAAK,UAAW,QAASA,CAAY,CACtE,CAMI,yBAA0B,CACtB,MAAMC,EAAqB1B,GAAU,CACjC,MAAMQ,EAAOR,EAAM,OAAO,QAAQ,aAAa,EAC/C,GAAIQ,EAAM,CACN,MAAMb,EAAM,SAASa,EAAK,QAAQ,GAAG,EAC/BZ,EAAM,SAASY,EAAK,QAAQ,GAAG,EACjC,CAAC,MAAMb,CAAG,GAAK,CAAC,MAAMC,CAAG,GACzB,KAAK,gBAAgBD,EAAKC,CAAG,CAEjD,CACA,EAEc+B,EAAqB3B,GAAU,EAE7B,CAACA,EAAM,eAAiB,CAAC,KAAK,UAAU,SAASA,EAAM,aAAa,IACpE,KAAK,qBAAoB,CAEzC,EAEQ,KAAK,UAAU,iBAAiB,aAAc0B,EAAmB,EAAI,EACrE,KAAK,UAAU,iBAAiB,aAAcC,CAAiB,EAE/D,KAAK,oBAAoB,KAAK,UAAW,aAAcD,CAAiB,EACxE,KAAK,oBAAoB,KAAK,UAAW,aAAcC,CAAiB,CAChF,CAKI,gBAAgBhC,EAAKC,EAAK,CAClB,KAAK,mBAET,KAAK,YAAc,CAAE,IAAAD,EAAK,IAAAC,CAAG,EAEzB,KAAK,kBAAoB,WAAa,KAAK,eAC3C,KAAK,kBAAkBD,EAAKC,EAAK,KAAK,eAAgB,KAAK,kBAAkB,EACtE,KAAK,kBAAoB,iBAChC,KAAK,wBAAwBD,EAAKC,CAAG,EAIzC,KAAK,UAAU,aAAa,iBAAkBD,CAAG,EACjD,KAAK,UAAU,aAAa,iBAAkBC,CAAG,EAG7C,KAAK,qBACL,KAAK,oBAAoBD,EAAKC,CAAG,EAE7C,CAKI,sBAAuB,CACnB,KAAK,YAAc,KACnB,KAAK,YAAW,EAGhB,KAAK,UAAU,gBAAgB,gBAAgB,EAC/C,KAAK,UAAU,gBAAgB,gBAAgB,EAG3C,KAAK,0BACL,KAAK,yBAAwB,CAEzC,CAKI,gBAAgBD,EAAKC,EAAK,CAClB,KAAK,kBAKLD,EAAM,GAAKA,GAAO,GAAKC,EAAM,GAAKA,GAAO,GAMzC,KAAK,qBACL,KAAK,oBAAoBD,EAAKC,EAAK,KAAK,gBAAiB,KAAK,eAAgB,KAAK,kBAAkB,CAEjH,CAKI,kBAAkBgC,EAAWC,EAAWhC,EAAQZ,EAAa,CACzD,KAAK,YAAW,EAGhB,MAAM6C,EAAkB,KAAK,oBAAoBF,EAAWC,EAAW5C,CAAW,EAE7E,KAAK,wBAAwB6C,CAAe,GAKjDA,EAAgB,QAAQ,CAACjB,EAAKV,IAAU,CACpC,KAAM,CAACR,EAAKC,CAAG,EAAIiB,EACbL,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAClD,GAAIY,EAAM,CACN,MAAMuB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,0BAA0BlC,CAAM,IAAIM,IAAU,EAAI,SAAW,SAAS,GAC1F4B,EAAQ,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAMNlC,IAAW,EAAI,0BAA4B,wBAAwB;AAAA,yCAC5DA,IAAW,EAAI,UAAY,SAAS;AAAA;AAAA;AAAA;AAAA,kBAM7DW,EAAK,YAAYuB,CAAO,EACxB,KAAK,gBAAgB,KAAKA,CAAO,CACjD,CACA,CAAS,CACT,CAKI,wBAAwBpC,EAAKC,EAAK,CAC9B,KAAK,YAAW,EAEhB,MAAMY,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAClD,GAAIY,GAAQ,KAAK,8BAA8Bb,EAAKC,CAAG,EAAG,CACtD,MAAMmC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,wBACpBA,EAAQ,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAaxBvB,EAAK,YAAYuB,CAAO,EACxB,KAAK,gBAAgB,KAAKA,CAAO,CAC7C,CACA,CAKI,aAAc,CACV,KAAK,gBAAgB,QAAQC,GAAW,CAChCA,EAAQ,YACRA,EAAQ,WAAW,YAAYA,CAAO,CAEtD,CAAS,EACD,KAAK,gBAAkB,EAC/B,CAMI,oBAAoBJ,EAAWC,EAAW5C,EAAa,CAcnD,MAZqB,CACjB,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,CAAC,EACjC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,CAAC,EAChC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,CAAC,EAChC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,CAAC,EAClC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,CAAC,CAAC,CAC9C,EAE+CA,EAAc,CAAC,EAC7B,IAAI,CAAC,CAACgD,EAAMC,CAAI,IAAM,CAC3CN,EAAYK,EACZJ,EAAYK,CACxB,CAAS,CACT,CAMI,wBAAwBtB,EAAW,CAC/B,OAAOA,EAAU,MAAM,CAAC,CAACjB,EAAKC,CAAG,IAEzB,EAAAD,EAAM,GAAKA,GAAO,GAAKC,EAAM,GAAKA,GAAO,EAKhD,CACT,CAMI,8BAA8BD,EAAKC,EAAK,CAEpC,MAAI,EAAAD,EAAM,GAAKA,GAAO,GAAKC,EAAM,GAAKA,GAAO,EAIrD,CAKI,2BAA4B,CACxB,MAAMuC,EAAmBnC,GAAU,CAG/B,OAFYA,EAAM,IAAI,YAAW,EAEtB,CACP,IAAK,IAED,KAAK,oBAAmB,EACxBA,EAAM,eAAc,EACpB,MACJ,IAAK,IAED,KAAK,aAAa,CAAC,EACnBA,EAAM,eAAc,EACpB,MACJ,IAAK,IAED,KAAK,aAAa,CAAC,EACnBA,EAAM,eAAc,EACpB,MACJ,IAAK,IAED,KAAK,mBAAmB,eAAe,EACvCA,EAAM,eAAc,EACpB,MACJ,IAAK,IAED,KAAK,mBAAmB,SAAS,EACjCA,EAAM,eAAc,EACpB,KACpB,CACA,EAEQ,SAAS,iBAAiB,UAAWmC,CAAe,EACpD,KAAK,oBAAoB,SAAU,UAAWA,CAAe,CACrE,CAKI,aAAatC,EAAQ,CACjB,KAAK,eAAiBA,EACtB,KAAK,mBAAmB,SAAS,EAI7B,KAAK,wBACL,KAAK,uBAAuBA,CAAM,CAE9C,CAKI,qBAAsB,CAClB,KAAK,oBAAsB,KAAK,mBAAqB,GAAK,EAGtD,KAAK,aAAe,KAAK,gBACzB,KAAK,kBACD,KAAK,YAAY,IACjB,KAAK,YAAY,IACjB,KAAK,eACL,KAAK,kBACrB,CAIA,CAKI,mBAAmBuC,EAAM,CACrB,KAAK,gBAAkBA,EACvB,KAAK,YAAW,EAGZA,IAAS,UACT,KAAK,UAAU,MAAM,OAAS,YACvBA,IAAS,kBAChB,KAAK,UAAU,MAAM,OAAS,UAI1C,CAKI,kBAAkBC,EAAc,CAC5B,KAAK,iBAAmBA,EAGpBA,GACA,KAAK,YAAW,EAChB,KAAK,UAAU,MAAM,OAAS,QAE9B,KAAK,UAAU,MAAM,OAAS,KAAK,kBAAoB,UAAY,YAAc,SAE7F,CAKI,cAAc1C,EAAKC,EAAK0C,EAAY,YAAa,CAC7C,KAAK,oBAAoBA,CAAS,EAElC,MAAM9B,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAC9CY,GACAA,EAAK,UAAU,IAAI8B,CAAS,CAExC,CAKI,oBAAoBA,EAAY,YAAa,CAChB,KAAK,UAAU,iBAAiB,eAAeA,CAAS,EAAE,EAClE,QAAQ9B,GAAQA,EAAK,UAAU,OAAO8B,CAAS,CAAC,CACzE,CAKI,aAAa,CACT,YAAAC,EACA,YAAAC,EACA,iBAAAC,EACA,eAAAC,EACA,oBAAAC,CACR,EAAO,CACC,KAAK,oBAAsBJ,EAC3B,KAAK,oBAAsBC,EAC3B,KAAK,yBAA2BC,EAChC,KAAK,uBAAyBC,EAC9B,KAAK,4BAA8BC,CAC3C,CAMI,oBAAoBX,EAAShC,EAAO4C,EAAS,CACzC,KAAK,eAAe,KAAK,CAAE,QAAAZ,EAAS,MAAAhC,EAAO,QAAA4C,EAAS,CAC5D,CAKI,qBAAsB,CAClB,MAAO,CACH,KAAM,KAAK,gBACX,eAAgB,KAAK,eACrB,YAAa,KAAK,mBAClB,YAAa,KAAK,WAC9B,CACA,CAKI,SAAU,CAEN,SAAW,CAAE,QAAAZ,EAAS,MAAAhC,EAAO,QAAA4C,CAAO,IAAM,KAAK,eAC3CZ,EAAQ,oBAAoBhC,EAAO4C,CAAO,EAE9C,KAAK,eAAiB,GAGtB,KAAK,YAAW,EAChB,KAAK,YAAc,KACnB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,GAGvB,KAAK,oBAAsB,KAC3B,KAAK,oBAAsB,KAC3B,KAAK,yBAA2B,KAChC,KAAK,uBAAyB,KAC9B,KAAK,4BAA8B,IAC3C,CACA,CC1cO,MAAMC,CAAsB,CAC/B,YAAYlC,EAAWa,EAAe,CAClC,KAAK,UAAYb,EACjB,KAAK,cAAgBa,EAGrB,KAAK,eAAiB,GACtB,KAAK,YAAc,GACnB,KAAK,gBAAkB,GACvB,KAAK,kBAAoB,GAGzB,KAAK,cAAgB,OAAO,WAAW,kCAAkC,EAAE,QAC3E,KAAK,eAAiB,KAAK,cAAgB,GAAM,EAGjD,KAAK,eAAiB,KACtB,KAAK,aAAe,KAGpB,KAAK,yBAAwB,EAG7B,KAAK,OAAS,CACV,gBAAiB,IACjB,eAAgB,IAChB,aAAc,IACd,cAAe,IACf,eAAgB,IAChB,iBAAkB,KAClB,iBAAkB,GAC9B,CAIA,CAMI,MAAM,0BAA2B,CAC7B,GAAI,CAEA,MAAM,KAAK,yBAAwB,EAGnC,MAAM,KAAK,uBAAsB,CAG7C,MAAwB,CAExB,CACA,CAMI,MAAM,0BAA2B,CAC7B,GAAI,CACA,KAAM,CAAE,eAAAsB,CAAc,EAAK,+CAAM,QAAO,8BAAqB,wBAAAA,CAAA,OAG7D,IAAIC,EAAS,SAAS,eAAe,qBAAqB,EACrDA,IAEDA,EAAS,SAAS,cAAc,QAAQ,EACxCA,EAAO,GAAK,kBACZA,EAAO,MAAM,SAAW,QACxBA,EAAO,MAAM,IAAM,IACnBA,EAAO,MAAM,KAAO,IACpBA,EAAO,MAAM,cAAgB,OAC7BA,EAAO,MAAM,OAAS,OACtBA,EAAO,MAAQ,OAAO,WACtBA,EAAO,OAAS,OAAO,YACvB,SAAS,KAAK,YAAYA,CAAM,GAIpC,KAAK,eAAiB,IAAID,EAAeC,EAAQ,CAC7C,aAAc,KAAK,cAAgB,GAAK,GACxD,CAAa,CAGb,MAAwB,CAEZ,KAAK,eAAiB,IAClC,CACA,CAMI,MAAM,wBAAyB,CAC3B,GAAI,CACA,KAAM,CAAE,aAAAC,CAAY,EAAK,6CAAM,QAAO,4BAAmB,sBAAAA,CAAA,OACzD,KAAK,aAAeA,CAEhC,MAAwB,CAEZ,KAAK,aAAe,IAChC,CACA,CAQI,MAAM,uBAAuBpC,EAAWf,EAAQZ,EAAa,CACzD,OAAO,IAAI,QAASgE,GAAY,CAIxB,KAAK,cACL,KAAK,aAAa,gBAAe,EAIrC,KAAK,kBAAkBpD,CAAM,EAE7B,IAAIqD,EAAsB,EAC1B,MAAMC,EAAkBvC,EAAU,OAGlCA,EAAU,QAAQ,CAACC,EAAKV,IAAU,CAC9B,KAAM,CAACR,EAAKC,CAAG,EAAIiB,EACbL,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAE9CY,GACA,WAAW,IAAM,CAEb,MAAMM,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,kBAAkBjB,CAAM,IAAIM,IAAU,EAAI,SAAW,SAAS,gBAAgBlB,CAAW,GAC3G6B,EAAM,QAAQ,OAASjB,EACvBiB,EAAM,QAAQ,aAAeX,EAG7BW,EAAM,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAMJjB,IAAW,EAAI,4CAA8C,2CAA2C;AAAA,gDAClGA,IAAW,EAAI,UAAY,SAAS;AAAA;AAAA,yDAE3BZ,EAAc,EAAE;AAAA;AAAA,8CAE3B,KAAK,OAAO,gBAAkB,KAAK,cAAc;AAAA;AAAA;AAAA,0BAMnEkB,IAAU,IACVW,EAAM,MAAM,YAAc,MAC1BA,EAAM,MAAM,UAAY,cAAcjB,IAAW,EAAI,0BAA4B,wBAAwB,IAG7GW,EAAK,YAAYM,CAAK,EAGtB,sBAAsB,IAAM,CACxBA,EAAM,MAAM,UAAY,wBACxBA,EAAM,MAAM,QAAU,GAClD,CAAyB,EAGD,MAAMsC,EAAsB,IAAM,CAC9BtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC9DF,IAEIA,GAAuBC,GACvBF,EAAO,CAEvC,EAEwBnC,EAAM,iBAAiB,gBAAiBsC,CAAmB,EAG3D,WAAW,IAAM,CACbtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC9DF,IACIA,GAAuBC,GACvBF,EAAO,CAEvC,EAA2B,KAAK,OAAO,gBAAkB,KAAK,eAAiB,GAAG,CAElF,EAAuB9C,EAAQ,EAAE,CAEjC,CAAa,EAGGgD,IAAoB,GACpBF,EAAO,CAEvB,CAAS,CACT,CAMI,MAAM,qBAAqBpD,EAAQ,CAC/B,OAAO,IAAI,QAASoD,GAAY,CAC5B,MAAMI,EAAS,KAAK,UAAU,iBAAiB,yBAAyBxD,CAAM,IAAI,EAElF,GAAIwD,EAAO,SAAW,EAAG,CACrBJ,EAAO,EACP,MAChB,CAIY,IAAIC,EAAsB,EAC1B,MAAMC,EAAkBE,EAAO,OAE/BA,EAAO,QAAQ,CAACvC,EAAOX,IAAU,CAC7B,WAAW,IAAM,CACbW,EAAM,MAAM,WAAa,OAAO,KAAK,OAAO,gBAAkB,KAAK,cAAc,cACjFA,EAAM,MAAM,UAAY,2BACxBA,EAAM,MAAM,QAAU,IAEtB,MAAMsC,EAAsB,IAAM,CAC9BtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC1DtC,EAAM,YACNA,EAAM,WAAW,YAAYA,CAAK,EAEtCoC,IAEIA,GAAuBC,GACvBF,EAAO,CAEnC,EAEoBnC,EAAM,iBAAiB,gBAAiBsC,CAAmB,EAG3D,WAAW,IAAM,CACbtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC1DtC,EAAM,YACNA,EAAM,WAAW,YAAYA,CAAK,EAEtCoC,IACIA,GAAuBC,GACvBF,EAAO,CAEnC,EAAuB,KAAK,OAAO,gBAAkB,KAAK,eAAiB,GAAG,CAE9E,EAAmB9C,EAAQ,EAAE,CAC7B,CAAa,CACb,CAAS,CACT,CAOI,MAAM,6BAA6BR,EAAKC,EAAK,CACzC,OAAO,IAAI,QAASqD,GAAY,CAC5B,MAAMzC,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAClD,GAAI,CAACY,EAAM,CACPyC,EAAO,EACP,MAChB,CAKgB,KAAK,cACL,KAAK,aAAa,sBAAqB,EAI3C,MAAMnC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,gBAClBA,EAAM,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAWA,KAAK,OAAO,aAAe,KAAK,cAAc;AAAA;AAAA;AAAA,cAKpEN,EAAK,YAAYM,CAAK,EAGtB,sBAAsB,IAAM,CACxBA,EAAM,MAAM,UAAY,WACxBA,EAAM,MAAM,QAAU,GACtC,CAAa,EAGD,MAAMsC,EAAsB,IAAM,CAC9BtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC9DH,EAAO,CACvB,EAEYnC,EAAM,iBAAiB,gBAAiBsC,CAAmB,EAG3D,WAAW,IAAM,CACbtC,EAAM,oBAAoB,gBAAiBsC,CAAmB,EAC9DH,EAAO,CACvB,EAAe,KAAK,OAAO,aAAe,KAAK,eAAiB,GAAG,CACnE,CAAS,CACT,CAQI,0BAA0BrC,EAAWf,EAAQyD,EAAgB,CACzD,KAAK,mBAAkB,EAEvB1C,EAAU,QAAQ,CAACC,EAAKV,IAAU,CAC9B,KAAM,CAACR,EAAKC,CAAG,EAAIiB,EACbL,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAElD,GAAIY,EAAM,CACN,MAAMuB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,0BAA0BlC,CAAM,IAAIM,IAAU,EAAI,SAAW,SAAS,GAC1F4B,EAAQ,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAMNlC,IAAW,EAAI,0BAA4B,wBAAwB;AAAA,yCAC5DA,IAAW,EAAI,UAAY,SAAS;AAAA;AAAA,wCAErCyD,EAAiB,EAAE;AAAA;AAAA;AAAA;AAAA,kBAM3C9C,EAAK,YAAYuB,CAAO,EACxB,KAAK,gBAAgB,KAAKA,CAAO,CACjD,CACA,CAAS,CAGT,CAKI,oBAAqB,CACjB,KAAK,gBAAgB,QAAQC,GAAW,CAChCA,EAAQ,YACRA,EAAQ,WAAW,YAAYA,CAAO,CAEtD,CAAS,EACD,KAAK,gBAAkB,EAC/B,CAMI,kBAAkBnC,EAAQ,CACP,KAAK,UAAU,iBAAiB,yBAAyBA,CAAM,IAAI,EAC3E,QAAQiB,GAAS,CAChBA,EAAM,YACNA,EAAM,WAAW,YAAYA,CAAK,CAElD,CAAS,CACT,CAOI,MAAM,eAAeyC,EAAeC,EAAoB,GAAI,CACxD,GAAI,KAAK,cAAe,CAEC,KAAK,UAAU,iBAAiB,yBAAyBD,CAAa,IAAI,EAClF,QAAQzC,GAAS,CAC1BA,EAAM,UAAU,IAAI,cAAc,CAClD,CAAa,EACD,MACZ,CAKQ,MAAM2C,EAAe,KAAK,UAAU,iBAAiB,yBAAyBF,CAAa,IAAI,EAC/F,QAASG,EAAI,EAAGA,EAAID,EAAa,OAAQC,IACrC,WAAW,IAAM,CACbD,EAAaC,CAAC,EAAE,UAAU,IAAI,eAAe,EAE7C,WAAW,IAAM,CACbD,EAAaC,CAAC,EAAE,UAAU,IAAI,cAAc,CAChE,EAAmB,KAAK,OAAO,aAAa,CAC5C,EAAeA,EAAI,KAAK,OAAO,cAAc,EAIrCF,EAAkB,QAAQ,CAAC3C,EAAKV,IAAU,CACtC,KAAM,CAACR,EAAKC,CAAG,EAAIiB,EACbL,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAC9CY,GACA,WAAW,IAAM,CACbA,EAAK,UAAU,IAAI,oBAAoB,CAC3D,EAAoBiD,EAAa,OAAS,KAAK,OAAO,eAAmBtD,EAAQ,EAAG,CAEpF,CAAS,EAGD,WAAW,IAAM,CACb,KAAK,wBAAwBoD,CAAa,CACtD,EAAW,KAAK,OAAO,cAAiBE,EAAa,OAAS,KAAK,OAAO,cAAe,CACzF,CAMI,wBAAwBF,EAAe,CACnC,GAAI,OAAK,eAAiB,KAAK,mBAE/B,MAAK,kBAAoB,GAGzB,GAAI,CAOA,GALI,KAAK,cACL,KAAK,aAAa,YAAW,EAI7B,KAAK,eAAgB,CAErB,MAAMI,EADY,KAAK,UACA,sBAAqB,EAEtCC,EAAUD,EAAK,KAAOA,EAAK,MAAQ,EACnCE,EAAUF,EAAK,IAAMA,EAAK,OAAS,EAGnCG,EAAiBP,IAAkB,EACrC,CAAC,UAAW,UAAW,UAAW,UAAW,SAAS,EACtD,CAAC,UAAW,UAAW,UAAW,UAAW,SAAS,EAG1D,KAAK,eAAe,uBAAuB,CACvC,EAAGK,EACH,EAAGC,EACH,QAAS,YACT,cAAe,GACf,OAAQC,CAC5B,CAAiB,CAEjB,KAAmB,CAEH,MAAMC,EAAiB,SAAS,cAAc,KAAK,EAcnD,GAbAA,EAAe,UAAYR,IAAkB,EAAI,QAAU,QAC3DQ,EAAe,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAY3B,CAAC,SAAS,eAAe,8BAA8B,EAAG,CAC1D,MAAMC,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,+BACXA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAWpB,SAAS,KAAK,YAAYA,CAAK,CACnD,CAEgB,KAAK,UAAU,MAAM,SAAW,WAChC,KAAK,UAAU,YAAYD,CAAc,EAEzC,WAAW,IAAM,CACTA,EAAe,YACfA,EAAe,WAAW,YAAYA,CAAc,CAE5E,EAAmB,GAAI,CACvB,CAEA,MAAwB,CAExB,QAAS,CAEG,WAAW,IAAM,CACb,KAAK,kBAAoB,EACzC,EAAe,KAAK,OAAO,gBAAgB,CAC3C,EACA,CAOI,iBAAiBpE,EAAKC,EAAK,CACvB,GAAI,KAAK,cAAe,OAExB,MAAMY,EAAO,KAAK,cAAc,UAAUb,EAAKC,CAAG,EAClD,GAAI,CAACY,EAAM,OAGX,MAAMyD,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,oBACnBA,EAAO,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAcvBzD,EAAK,MAAM,SAAW,WACtBA,EAAK,YAAYyD,CAAM,EAGvB,WAAW,IAAM,CACTA,EAAO,YACPA,EAAO,WAAW,YAAYA,CAAM,CAEpD,EAAW,GAAG,CACd,CAMI,eAAeC,EAAmB,CAC9B,KAAK,eAAe,KAAKA,CAAiB,EAC1C,KAAK,sBAAqB,CAClC,CAMI,MAAM,uBAAwB,CAC1B,GAAI,OAAK,aAAe,KAAK,eAAe,SAAW,GAMvD,KAFA,KAAK,YAAc,GAEZ,KAAK,eAAe,OAAS,GAAG,CACnC,MAAMC,EAAY,KAAK,eAAe,MAAK,EAC3C,GAAI,CACA,MAAMA,EAAS,CAC/B,MAA4B,CAE5B,CACA,CAEQ,KAAK,YAAc,GAC3B,CAKI,iBAAkB,CAId,KAAK,kBAAoB,GAGrB,KAAK,gBACL,KAAK,eAAe,YAAW,EAInC,KAAK,eAAiB,GACtB,KAAK,YAAc,GAGnB,KAAK,mBAAkB,EAGL,KAAK,UAAU,iBAAiB,0BAA0B,EAClE,QAAQrD,GAAS,CACnBA,EAAM,YACNA,EAAM,WAAW,YAAYA,CAAK,CAElD,CAAS,EAGwB,KAAK,UAAU,iBAAiB,oCAAoC,EAC5E,QAAQN,GAAQ,CAC7BA,EAAK,UAAU,OAAO,eAAgB,oBAAoB,CACtE,CAAS,CAGT,CAKI,mBAAoB,CAChB,MAAO,CACH,YAAa,KAAK,YAClB,YAAa,KAAK,eAAe,OACjC,kBAAmB,KAAK,kBACxB,qBAAsB,KAAK,gBAAgB,OAC3C,cAAe,KAAK,aAChC,CACA,CAKI,SAAU,CAEN,KAAK,eAAiB,GACtB,KAAK,YAAc,GAGnB,KAAK,mBAAkB,EAGvB,KAAK,gBAAe,EAGhB,KAAK,iBACL,KAAK,eAAe,QAAO,EAC3B,KAAK,eAAiB,MAGtB,KAAK,eACL,KAAK,aAAa,QAAO,EACzB,KAAK,aAAe,MAGxB,KAAK,kBAAoB,EAGjC,CACA,CAGA,MAAMwD,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCpB,SAAS,KAAK,YAAYA,CAAK,EChsBxB,MAAMI,CAAQ,CACjB,YAAYC,EAAa,KAAM,CAE3B,KAAK,WAAaA,GAAc,IAAI7F,EACpC,KAAK,cAAgB,GAGrB,KAAK,cAAgB,KACrB,KAAK,mBAAqB,KAC1B,KAAK,iBAAmB,KAGxB,KAAK,cAAgB,EACrB,KAAK,SAAW,GAChB,KAAK,UAAY,EACjB,KAAK,YAAc,GAGnB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,UACvB,KAAK,mBAAqB,EAG1B,KAAK,UAAY,UACjB,KAAK,mBAAqB,KAG1B,KAAK,mBAAqB,CACtB,QAAS,CACL,MAAO,GACP,WAAY,GACZ,KAAM,EACtB,EACY,QAAS,CACL,MAAO,GACP,WAAY,GACZ,KAAM,EACtB,CACA,EAGQ,KAAK,OAAS,CAAE,QAAS,EAAG,QAAS,CAAC,EAGtC,KAAK,iBAAmB,CACpB,WAAY,EACZ,gBAAiB,EACjB,YAAa,CACzB,CAGA,CAKI,MAAM,MAAO,CACT,GAAI,CAIA,aAAM,KAAK,0BAAyB,EAGpC,MAAM,KAAK,qBAAoB,EAG/B,MAAM,KAAK,WAAU,EAGrB,KAAK,kBAAiB,EAGtB,KAAK,gBAAe,EAGpB,KAAK,uBAAsB,EAG3B,KAAK,iBAAgB,EAGrB,KAAK,sBAAqB,EAG1B,KAAK,oBAAmB,EAGxB,MAAM,KAAK,6BAA4B,EAEvC,KAAK,cAAgB,GAGd,EAEnB,MAAwB,CAEZ,YAAK,YAAY,yCAA0C,OAAO,EAC3D,EACnB,CACA,CAMI,MAAM,2BAA4B,CACzB,KAAK,WAAW,cAEjB,MAAM,KAAK,WAAW,KAAI,EAG1B,KAAK,iBAAmB,KAAK,WAAW,oBAAmB,EAGvE,CAMI,MAAM,sBAAuB,CACzB,MAAMmC,EAAY,SAAS,eAAe,WAAW,EACrD,GAAI,CAACA,EACD,MAAM,IAAI,MAAM,8BAA8B,EAIlD,KAAK,cAAgB,IAAID,EAAmBC,CAAS,EACrD,MAAM,KAAK,cAAc,KAAI,EAG7B,KAAK,mBAAqB,IAAIY,EAAwB,KAAK,cAAeZ,CAAS,EAGnF,KAAK,iBAAmB,IAAIkC,EAAsBlC,EAAW,KAAK,aAAa,CAGvF,CAMI,MAAM,YAAa,CACf,MAAM,KAAK,cAAc,YAAW,CAE5C,CAMI,mBAAoB,CAEhB,KAAK,mBAAmB,sBAAqB,EAC7C,KAAK,mBAAmB,0BAAyB,EAGjD,KAAK,mBAAmB,aAAa,CACjC,YAAa,CAAChB,EAAKC,EAAKwC,EAAMkC,EAAerF,IAAgB,CACzD,KAAK,gBAAgBU,EAAKC,EAAKwC,EAAMkC,EAAerF,CAAW,CAC/E,EACY,YAAa,CAACU,EAAKC,IAAQ,CACvB,KAAK,gBAAgBD,EAAKC,CAAG,CAC7C,EACY,iBAAkB,IAAM,CACpB,KAAK,qBAAoB,CACzC,EACY,eAAiBC,GAAW,CACxB,KAAK,mBAAmBA,CAAM,CAC9C,CACA,CAAS,CAGT,CAMI,iBAAkB,CAEd,MAAM0E,EAAa,SAAS,eAAe,YAAY,EACnDA,GACAA,EAAW,iBAAiB,QAAS,IAAM,KAAK,aAAY,CAAE,EAIlE,MAAMC,EAAU,SAAS,eAAe,SAAS,EAC7CA,GACAA,EAAQ,iBAAiB,QAAS,IAAM,KAAK,aAAY,CAAE,EAI/D,MAAMC,EAAU,SAAS,eAAe,SAAS,EAC7CA,GACAA,EAAQ,iBAAiB,QAAS,IAAM,KAAK,cAAa,CAAE,EAIhE,MAAMC,EAAgB,SAAS,eAAe,eAAe,EACzDA,GACAA,EAAc,iBAAiB,QAAS,IAAM,KAAK,oBAAmB,CAAE,EAI5E,MAAMC,EAAgB,SAAS,eAAe,qBAAqB,EAC/DA,GACAA,EAAc,iBAAiB,QAAS,IAAM,KAAK,aAAa,CAAC,CAAC,EAGtE,MAAMC,EAAgB,SAAS,eAAe,qBAAqB,EAC/DA,GACAA,EAAc,iBAAiB,QAAS,IAAM,KAAK,aAAa,CAAC,CAAC,CAI9E,CAMI,wBAAyB,CACrB,SAAS,iBAAiB,UAAY5E,GAAU,CAE5C,GAAI,EAAAA,EAAM,OAAO,UAAY,SAAWA,EAAM,OAAO,UAAY,YAIjE,OAAQA,EAAM,IAAI,YAAW,EAAE,CAC3B,IAAK,IACD,KAAK,aAAY,EACjBA,EAAM,eAAc,EACpB,MACJ,IAAK,IACD,KAAK,aAAY,EACjBA,EAAM,eAAc,EACpB,MACJ,IAAK,IACD,KAAK,oBAAmB,EACxBA,EAAM,eAAc,EACpB,MACJ,IAAK,IACD,KAAK,aAAa,CAAC,EACnBA,EAAM,eAAc,EACpB,MACJ,IAAK,IACD,KAAK,aAAa,CAAC,EACnBA,EAAM,eAAc,EACpB,MACJ,IAAK,IACD,KAAK,mBAAmB,SAAS,EACjCA,EAAM,eAAc,EACpB,MACJ,IAAK,QACD,KAAK,mBAAmB,eAAe,EACvCA,EAAM,eAAc,EACpB,MACJ,IAAK,KACD,KAAK,cAAa,EAClBA,EAAM,eAAc,EACpB,MACJ,IAAK,KACD,KAAK,oBAAmB,EACxBA,EAAM,eAAc,EACpB,KACpB,CACA,CAAS,CAGT,CAMI,uBAAwB,CAEpB,KAAK,WAAW,GAAG,OAASI,GAAS,CACjC,KAAK,aAAaA,CAAI,CAClC,CAAS,EAED,KAAK,WAAW,GAAG,aAAeA,GAAS,CACvC,KAAK,mBAAmBA,CAAI,CACxC,CAAS,EAED,KAAK,WAAW,GAAG,cAAgBA,GAAS,CACxC,KAAK,oBAAoBA,CAAI,CACzC,CAAS,EAED,KAAK,WAAW,GAAG,WAAaA,GAAS,CACrC,KAAK,iBAAiBA,CAAI,CACtC,CAAS,EAED,KAAK,WAAW,GAAG,UAAYA,GAAS,CACpC,KAAK,gBAAgBA,CAAI,CACrC,CAAS,CAGT,CAMI,MAAM,gBAAgBT,EAAKC,EAAKwC,EAAMkC,EAAerF,EAAa,CAC9D,GAAI,MAAK,SAKT,GAAI,CAKA,GAHmB,KAAK,WAAW,SAAQ,EACdU,CAAG,EAAEC,CAAG,IAEnB,KAAK,cAAe,CAElC,KAAK,aAAa,KAAK,aAAa,EACpC,KAAK,YAAY,mBAAmB,KAAK,aAAa,mDAAoD,MAAM,EAChH,MAChB,CAEgBwC,IAAS,WAAakC,EACtB,MAAM,KAAK,YAAY3E,EAAKC,EAAK0E,EAAerF,CAAW,EACpDmD,IAAS,gBAChB,MAAM,KAAK,kBAAkBzC,EAAKC,CAAG,EAErC,KAAK,YAAY,kEAAmE,MAAM,CAE1G,MAAwB,CAEZ,KAAK,YAAY,sCAAuC,OAAO,CAC3E,CACA,CAMI,gBAAgBD,EAAKC,EAAK,CACtB,KAAK,iBAAiB,iBAAiBD,EAAKC,CAAG,CACvD,CAMI,sBAAuB,CAE3B,CAMI,mBAAmBC,EAAQ,CAEvB,KAAK,eAAiBA,EACtB,KAAK,mBAAmB,SAAS,EACjC,KAAK,2BAA0B,CAEvC,CAMI,MAAM,YAAY+B,EAAWC,EAAWhC,EAAQZ,EAAa,CACzD,GAAI,CAEA,MAAMI,EAAS,KAAK,WAAW,SAASuC,EAAWC,EAAW5C,CAAW,EAGzE,GAAI,KAAK,iBAAkB,CACvB,MAAM2B,EAAY,KAAK,yBAAyBgB,EAAWC,EAAW5C,CAAW,EACjF,MAAM,KAAK,iBAAiB,uBAAuB2B,EAAWf,EAAQZ,CAAW,CACjG,CAGY,MAAM,KAAK,sBAAqB,EAGhC,KAAK,UAAYI,EAAO,WACxB,KAAK,cAAgBA,EAAO,cAC5B,KAAK,SAAWA,EAAO,WAGvB,KAAK,kBAAiB,EAGlBA,EAAO,WACP,MAAM,KAAK,cAAcA,EAAO,MAAM,GAGtC,KAAK,UAAY,UACjB,KAAK,iBAAiB,oCAAoC,EAK1E,OAAiBP,EAAO,CAEZ,KAAK,YAAY,2BAA2BA,EAAM,OAAO,GAAI,SAAS,CAClF,CACA,CAMI,MAAM,kBAAkBa,EAAKC,EAAK,CAC9B,GAAI,CAEA,MAAME,EAAgB,KAAK,WAAW,iBAAgB,EACtD,GAAIA,EAAc,SAAW,EAAG,CAC5B,KAAK,YAAY,gDAAiD,SAAS,EAC3E,MAChB,CAGY,MAAM+E,EAAU/E,EAAc,CAAC,EAGzBT,EAAS,KAAK,WAAW,iBAAiBwF,EAAQ,IAAKA,EAAQ,IAAKlF,EAAKC,CAAG,EAG9E,KAAK,kBACL,MAAM,KAAK,iBAAiB,4BAA4BiF,EAAQ,IAAKA,EAAQ,IAAKlF,EAAKC,CAAG,EAI9F,MAAM,KAAK,sBAAqB,EAGhC,KAAK,UAAY,WACjB,KAAK,iBAAiB,sCAAsC,CAIxE,OAAiBd,EAAO,CAEZ,KAAK,YAAY,+CAA+CA,EAAM,OAAO,GAAI,SAAS,CACtG,CACA,CAMI,yBAAyB8C,EAAWC,EAAW5C,EAAa,CAcxD,MAZqB,CACjB,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAC/B,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,CAAC,EACjC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,CAAC,EAChC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,CAAC,EAChC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,EAAG,CAAC,EAAG,EAAE,CAAC,EAClC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,CAAC,EAAG,CAAC,GAAI,CAAC,CAAC,CAC9C,EAE+CA,EAAc,CAAC,EAC7B,IAAI,CAAC,CAACgD,EAAMC,CAAI,IAAM,CAC3CN,EAAYK,EACZJ,EAAYK,CACxB,CAAS,CACT,CAKI,aAAarC,EAAQ,CACjB,KAAK,eAAiBA,EACtB,KAAK,mBAAmB,aAAaA,CAAM,EAC3C,KAAK,mBAAmB,SAAS,EACjC,KAAK,2BAA0B,CAGvC,CAKI,qBAAsB,CAClB,KAAK,oBAAsB,KAAK,mBAAqB,GAAK,EAC1D,KAAK,mBAAmB,oBAAmB,CAGnD,CAKI,mBAAmBuC,EAAM,CACrB,KAAK,gBAAkBA,EACvB,KAAK,mBAAmB,mBAAmBA,CAAI,CAGvD,CAMI,cAAe,CACX,KAAK,cAAgB,KAAK,gBAAkB,EAAI,EAAI,EACpD,KAAK,eAAiB,KAAK,cAC3B,KAAK,2BAA0B,CACvC,CAMI,oBAAqB,CAGjB,KAAK,mBAAmB,eAAe,CAC/C,CAMI,MAAM,cAAcmB,EAAe,CAC/B,KAAK,SAAW,GAChB,KAAK,OAAO,SAASA,CAAa,EAAE,IAGpC,MAAM,KAAK,iBAAiB,eAAeA,CAAa,EAGxD,KAAK,mBAAkB,EACvB,KAAK,iBAAiB,WAAWA,CAAa,WAAW,EAGzD,KAAK,YAAY,cAAcA,CAAa,iBAAkB,SAAS,CAG/E,CAKI,MAAM,cAAe,CACjB,GAAI,CAEA,KAAK,WAAW,QAAO,EAGvB,KAAK,SAAW,GAChB,KAAK,UAAY,EACjB,KAAK,cAAgB,EACrB,KAAK,eAAiB,EACtB,KAAK,gBAAkB,UACvB,KAAK,mBAAqB,EAC1B,KAAK,UAAY,UACjB,KAAK,mBAAqB,KAC1B,KAAK,YAAc,GAGf,KAAK,kBACL,KAAK,iBAAiB,gBAAe,EAIrC,KAAK,gBACL,MAAM,KAAK,cAAc,WAAU,EACnC,MAAM,KAAK,cAAc,YAAW,GAIxC,MAAM,KAAK,sBAAqB,EAGhC,KAAK,kBAAiB,EACtB,KAAK,iBAAiB,yCAAyC,CAI3E,MAAwB,CAEZ,KAAK,YAAY,6CAA8C,OAAO,CAClF,CACA,CAMI,MAAM,uBAAwB,CAC1B,GAAI,CAAC,KAAK,YAAc,CAAC,KAAK,cAAe,OAE7C,MAAMuB,EAAa,KAAK,WAAW,SAAQ,EAC3C,GAAI,CAACA,EAAY,OAGjB,MAAM,KAAK,cAAc,WAAU,EAGnC,MAAMC,EAAe,GACfC,EAAe,GACfC,EAAe,GAErB,QAAStF,EAAM,EAAGA,EAAM,EAAGA,IACvB,QAASC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAC9B,MAAMsF,EAAYJ,EAAWnF,CAAG,EAAEC,CAAG,EACjCsF,IAAc,EACdH,EAAa,KAAK,CAACpF,EAAKC,CAAG,CAAC,EACrBsF,IAAc,EACrBF,EAAa,KAAK,CAACrF,EAAKC,CAAG,CAAC,EACrBsF,IAAc,GACrBD,EAAa,KAAK,CAACtF,EAAKC,CAAG,CAAC,CAEhD,CAIYmF,EAAa,OAAS,GACtB,KAAK,cAAc,YAAY,UAAWA,EAAc,CAAC,EAEzDC,EAAa,OAAS,GACtB,KAAK,cAAc,YAAY,UAAWA,EAAc,CAAC,EAI7DC,EAAa,QAAQ,CAAC,CAACtF,EAAKC,CAAG,EAAGO,IAAU,CACxC,KAAK,cAAc,kBAAkB,UAAUA,EAAQ,CAAC,GAAIR,EAAKC,CAAG,CAChF,CAAS,CAGT,CAKI,MAAM,cAAe,CACjB,GAAI,KAAK,YAAc,EAAG,CACtB,KAAK,YAAY,mCAAoC,MAAM,EAC3D,MACZ,CAEQ,GAAI,EACe,MAAM,KAAK,WAAW,SAAQ,GAClC,SACP,KAAK,YACL,KAAK,kBAAiB,EACtB,KAAK,YAAY,0BAA2B,MAAM,GAElD,KAAK,YAAY,8CAA+C,SAAS,CAEzF,MAAwB,CAEZ,KAAK,YAAY,gCAAiC,OAAO,CACrE,CACA,CAMI,qBAAsB,CAClB,KAAK,kBAAiB,EACtB,KAAK,iBAAiB,oBAAoB,EAC1C,KAAK,aAAa,CAAC,CAC3B,CAMI,MAAM,8BAA+B,CACjC,GAAI,CAIA,MAAM,KAAK,sBAAqB,EAGhC,KAAK,kBAAiB,EACtB,KAAK,iBAAiB,mCAAmC,CAIrE,MAAwB,CAGxB,CACA,CAMI,mBAAoB,CAChB,KAAK,kBAAiB,EACtB,KAAK,2BAA0B,EAC/B,KAAK,mBAAkB,CAC/B,CAMI,mBAAoB,CAChB,MAAMuF,EAAc,SAAS,eAAe,aAAa,EACrDA,IACAA,EAAY,YAAc,KAAK,UAE3C,CAMI,4BAA6B,CACzB,MAAMC,EAAuB,SAAS,eAAe,sBAAsB,EACrEC,EAAyB,SAAS,eAAe,wBAAwB,EAE3ED,IACAA,EAAqB,UAAY;AAAA,mDACM,KAAK,aAAa;AAAA,gCACrC,KAAK,aAAa;AAAA,eAItCC,IACAA,EAAuB,UAAY;AAAA;AAAA,uDAEQ,KAAK,aAAa;AAAA,8BAC3C,KAAK,aAAa;AAAA;AAAA,cAIhD,CAMI,oBAAqB,CACjB,MAAMC,EAAe,SAAS,eAAe,cAAc,EACrDC,EAAe,SAAS,eAAe,cAAc,EAEvDD,IACAA,EAAa,YAAc,KAAK,OAAO,SAGvCC,IACAA,EAAa,YAAc,KAAK,OAAO,QAEnD,CAMI,iBAAiBC,EAAS,CACtB,MAAMC,EAAa,SAAS,eAAe,YAAY,EACnDA,IACAA,EAAW,YAAcD,EAErC,CAMI,YAAYA,EAASE,EAAO,OAAQ,CAIhC,MAAMC,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAY,wBAAwBD,CAAI,GACnDC,EAAW,YAAcH,EACzBG,EAAW,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA,0BAITD,IAAS,QAAU,UAAYA,IAAS,UAAY,UAAYA,IAAS,UAAY,UAAY,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAS5H,SAAS,KAAK,YAAYC,CAAU,EAGpC,WAAW,IAAM,CACTA,EAAW,YACXA,EAAW,WAAW,YAAYA,CAAU,CAE5D,EAAW,GAAI,CACf,CAMI,kBAAmB,CAEf,MAAMC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAe,SAAS,eAAe,cAAc,EACrDC,EAAqB,SAAS,eAAe,oBAAoB,EAEnED,GACAA,EAAa,iBAAiB,QAAS,IAAM,KAAK,UAAU,WAAW,CAAC,EAGxEC,GACAA,EAAmB,iBAAiB,QAAS,IAAM,KAAK,UAAU,WAAW,CAAC,EAIlF,MAAMC,EAAkB,SAAS,eAAe,iBAAiB,EAC3DC,EAAqB,SAAS,eAAe,oBAAoB,EACjEC,EAA2B,SAAS,eAAe,0BAA0B,EAE/ED,GACAA,EAAmB,iBAAiB,QAAS,IAAM,KAAK,UAAU,iBAAiB,CAAC,EAGpFC,GACAA,EAAyB,iBAAiB,QAAS,IAAM,KAAK,UAAU,iBAAiB,CAAC,EAI9F,CAACL,EAAWG,CAAe,EAAE,QAAQG,GAAS,CACtCA,GACAA,EAAM,iBAAiB,QAAUC,GAAM,CAC/BA,EAAE,SAAWD,GACb,KAAK,UAAUA,EAAM,EAAE,CAE/C,CAAiB,CAEjB,CAAS,CAGT,CAKI,eAAgB,CACZ,KAAK,UAAU,WAAW,CAClC,CAKI,qBAAsB,CAClB,KAAK,UAAU,iBAAiB,CACxC,CAMI,UAAUE,EAAS,CACf,MAAMF,EAAQ,SAAS,eAAeE,CAAO,EACzCF,IACAA,EAAM,MAAM,QAAU,OACtBA,EAAM,UAAU,OAAO,QAAQ,EAC/B,SAAS,KAAK,MAAM,SAAW,SAE3C,CAMI,UAAUE,EAAS,CACf,MAAMF,EAAQ,SAAS,eAAeE,CAAO,EACzCF,IACAA,EAAM,MAAM,QAAU,OACtBA,EAAM,UAAU,IAAI,QAAQ,EAC5B,SAAS,KAAK,MAAM,SAAW,GAE3C,CAKI,cAAe,CACX,MAAO,CACH,cAAe,KAAK,cACpB,SAAU,KAAK,SACf,UAAW,KAAK,UAChB,OAAQ,CAAE,GAAG,KAAK,MAAM,EACxB,eAAgB,KAAK,eACrB,gBAAiB,KAAK,gBACtB,mBAAoB,KAAK,kBACrC,CACA,CAKI,SAAU,CAEF,KAAK,kBACL,KAAK,iBAAiB,QAAO,EAG7B,KAAK,oBACL,KAAK,mBAAmB,QAAO,EAG/B,KAAK,eACL,KAAK,cAAc,QAAO,EAI1B,KAAK,YACL,KAAK,WAAW,QAAO,EAI3B,KAAK,cAAgB,EAG7B,CAQI,aAAa9F,EAAM,CAEf,KAAK,sBAAqB,EAC1B,KAAK,kBAAiB,CAC9B,CAMI,mBAAmBA,EAAM,CAErB,KAAK,cAAgBA,EAAK,cAC1B,KAAK,UAAYA,EAAK,WAElBA,EAAK,gBACL,KAAK,UAAY,UACjB,KAAK,iBAAiB,oCAAoC,GAE1D,KAAK,UAAY,WAGrB,KAAK,kBAAiB,CAC9B,CAMI,oBAAoBA,EAAM,CAEtB,KAAK,UAAY,WACjB,KAAK,iBAAiB,mBAAmB,EACzC,KAAK,sBAAqB,CAClC,CAMI,iBAAiBA,EAAM,CAEnB,KAAK,SAAW,GAChB,KAAK,cAAcA,EAAK,MAAM,CACtC,CAMI,gBAAgBA,EAAM,CAElB,KAAK,sBAAqB,EAC1B,KAAK,kBAAiB,CAC9B,CACA,CCv/BQ,eAAeiG,GAAkB,CAC7B,GAAI,CAIA,MAAMC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAkB,SAAS,eAAe,kBAAkB,EAE9DA,IACAA,EAAgB,YAAc,0CAIlC,MAAMC,EAAK,IAAIpC,EACf,MAAMoC,EAAG,KAAI,EAGb,MAAMC,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAmB,SAAS,eAAe,oBAAoB,EAEjED,IACAA,EAAW,YAAc,UACzBA,EAAW,UAAY,4BAGvBC,IACAA,EAAiB,YAAc,kBAC/BA,EAAiB,UAAY,4BAI7BJ,IACAA,EAAe,MAAM,QAAU,QAInC,OAAO,GAAKE,EACZ,OAAO,WAAaA,EAAG,UAKvC,OAAqB1H,EAAO,CAIZ,MAAM6H,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAe,SAAS,eAAe,eAAe,EACtDN,EAAiB,SAAS,eAAe,iBAAiB,EAE5DA,IACAA,EAAe,MAAM,QAAU,QAG/BK,GACAA,EAAW,UAAU,OAAO,QAAQ,EAGpCC,IACAA,EAAa,YAAc,4BAA4B9H,EAAM,OAAO,GAExF,CACA,CAGQ,SAAS,iBAAiB,mBAAoB,IAAM,CAChD,MAAM+H,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAmB,SAAS,eAAe,aAAa,EAE1DD,GACAA,EAAY,iBAAiB,QAAS,IAAM,CACxC,SAAS,OAAM,CACnC,CAAiB,EAGDC,GACAA,EAAiB,iBAAiB,QAAS,IAAM,CAC7C,MAAMH,EAAa,SAAS,eAAe,aAAa,EACpDA,GACAA,EAAW,UAAU,IAAI,QAAQ,CAEzD,CAAiB,CAEjB,CAAS,EAGG,SAAS,aAAe,UACxB,SAAS,iBAAiB,mBAAoBN,CAAe,EAE7DA,EAAe","names":["LGameEngineBitPacked","init","LGame","memoryUsage","naiveMemoryUsage","efficiency","error","toRow","toCol","orientation","currentPlayer","moveTime","move","result","gameEndData","fromRow","fromCol","flatBoard","board2D","row","col","player","neutralPieces","emptyPositions","event","callback","listeners","index","data","memoryEfficiency","board","rowStr","cell","symbol","LGameBoardRenderer","gameBoard","positions","pos","piece","isCorner","playerStyles","cornerIndicator","neutralId","validPositions","position","gameState","lpiece","LGameInteractionHandler","boardRenderer","clickHandler","mouseEnterHandler","mouseLeaveHandler","anchorRow","anchorCol","lPiecePositions","preview","element","dRow","dCol","keyboardHandler","mode","isProcessing","className","onCellClick","onCellHover","onCellHoverLeave","onLPieceSelect","onNeutralPiecePlace","handler","LGameAnimationManager","ParticleEngine","canvas","soundManager","resolve","animationsCompleted","totalAnimations","handleTransitionEnd","pieces","newOrientation","winningPlayer","blockingPositions","winnerPieces","i","rect","centerX","centerY","confettiColors","celebrationDiv","style","ripple","animationFunction","animation","LGameUI","gameEngine","selectedPiece","newGameBtn","undoBtn","helpBtn","assistanceBtn","player1Button","player2Button","fromPos","boardState","player1Cells","player2Cells","neutralCells","cellValue","moveCounter","currentPlayerDisplay","currentPlayerIndicator","player1Score","player2Score","message","gameStatus","type","messageDiv","helpModal","closeHelpBtn","closeHelpFooterBtn","assistanceModal","closeAssistanceBtn","closeAssistanceFooterBtn","modal","e","modalId","initializeLGame","loadingOverlay","loadingProgress","ui","wasmStatus","gameEngineStatus","errorModal","errorMessage","retryButton","closeErrorButton"],"ignoreList":[],"sources":["../../games/lgame/js/LGameEngineBitPacked.js","../../games/lgame/js/components/LGameBoardRenderer.js","../../games/lgame/js/components/LGameInteractionHandler.js","../../games/lgame/js/components/LGameAnimationManager.js","../../games/lgame/js/ui-production.js","../../games/lgame/index.html?html-proxy&index=0.js"],"sourcesContent":["/**\n * L-Game BitPacked Engine Integration\n * \n * High-performance L-Game using 3 separate BitPackedBoard<4,4,1> instances.\n * Following Connect4 goldstandard pattern for 3-layer architecture.\n * Memory efficiency: Separate boards for player1, player2, and neutral pieces.\n * \n * Architecture: WASM/Rust ↔ JavaScript Engine ↔ UI Components\n */\n\nimport init, { LGame } from '../../../game_engine/pkg/game_engine.js';\n\nexport class LGameEngineBitPacked {\n    constructor() {\n        this.game = null;\n        this.initialized = false;\n        \n        // Game configuration\n        this.rows = 4;\n        this.cols = 4;\n        \n        // Game state tracking\n        this.gameHistory = [];\n        this.currentMoveIndex = -1;\n        \n        // Event system\n        this.eventListeners = new Map();\n        \n        // Performance tracking\n        this.moveStartTime = null;\n        this.totalMoves = 0;\n        this.averageMoveTime = 0;\n        \n        // L-Game specific state\n        this.selectedPiece = null; // 'l-piece' or coordinates for neutral piece\n        this.movePhase = 'l-piece'; // 'l-piece' or 'neutral' or 'complete'\n        this.pendingMove = null;\n    }\n    \n    /**\n     * Initialize the BitPackedBoard WASM L-Game engine\n     */\n    async init() {\n        try {\n            console.log('🧩 Initializing BitPacked L-Game Engine...');\n            \n            // Initialize WASM module\n            await init();\n            \n            // Create LGame instance\n            this.game = new LGame();\n            this.initialized = true;\n            \n            console.log('✅ BitPacked L-Game initialized successfully');\n            \n            // L-Game uses 3 separate BitPackedBoard<4,4,1> instances\n            const memoryUsage = this.estimateMemoryUsage();\n            const naiveMemoryUsage = 48; // 4 * 4 * 3 bytes for naive implementation\n            \n            console.log(`📊 Memory usage: ~${memoryUsage} bytes (vs ${naiveMemoryUsage} bytes naive implementation)`);\n            \n            if (memoryUsage <= naiveMemoryUsage) {\n                const efficiency = ((naiveMemoryUsage - memoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                console.log(`🔢 Memory efficiency: ${efficiency}% savings`);\n            }\n            \n            console.log(`⚡ Performance optimized for ${this.rows}x${this.cols} L-Game board`);\n            console.log(`🎯 3-Layer Architecture: player1_board + player2_board + neutral_board`);\n            \n            this.emit('initialized', { memoryUsage });\n            \n            return true;\n        } catch (error) {\n            console.error('❌ Failed to initialize BitPacked L-Game:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Estimate memory usage for 3 BitPackedBoard<4,4,1> instances\n     */\n    estimateMemoryUsage() {\n        // Each BitPackedBoard<4,4,1> uses: 16 cells / 64 bits per u64 = 1 u64 = 8 bytes\n        // Plus metadata overhead ~8 bytes per board\n        return 3 * (8 + 8); // 3 boards * (data + metadata)\n    }\n    \n    /**\n     * Make L-piece move (mandatory part of turn)\n     * @param {number} toRow - Target row (0-3)\n     * @param {number} toCol - Target column (0-3)\n     * @param {number} orientation - L-piece orientation (0-7)\n     * @returns {Object} Move result with game state\n     */\n    makeMove(toRow, toCol, orientation) {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        this.moveStartTime = performance.now();\n        \n        try {\n            // Validate coordinates\n            if (toRow < 0 || toRow >= this.rows || toCol < 0 || toCol >= this.cols) {\n                throw new Error(`Invalid position: (${toRow}, ${toCol}). Must be within 4x4 grid`);\n            }\n            \n            // Validate orientation\n            if (orientation < 0 || orientation > 7) {\n                throw new Error(`Invalid orientation: ${orientation}. Must be 0-7`);\n            }\n            \n            const currentPlayer = this.game.current_player;\n            \n            // Make L-piece move using BitPacked L-Game\n            this.game.make_move(toRow, toCol, orientation);\n            \n            // Calculate move execution time\n            const moveTime = performance.now() - this.moveStartTime;\n            this.totalMoves++;\n            this.averageMoveTime = (this.averageMoveTime * (this.totalMoves - 1) + moveTime) / this.totalMoves;\n            \n            // Record move in history\n            const move = {\n                type: 'l-piece',\n                toRow,\n                toCol,\n                orientation,\n                player: currentPlayer,\n                moveNumber: this.game.move_count,\n                timestamp: Date.now(),\n                executionTime: moveTime\n            };\n            \n            this.gameHistory.push(move);\n            this.currentMoveIndex++;\n            \n            // Create comprehensive move result\n            const result = {\n                type: 'l-piece',\n                toRow,\n                toCol,\n                orientation,\n                player: currentPlayer,\n                board: this.getBoard(),\n                currentPlayer: this.game.current_player,\n                isGameOver: this.game.game_over,\n                winner: this.game.winner,\n                moveNumber: this.game.move_count,\n                executionTime: moveTime,\n                canMoveNeutral: !this.game.game_over // Can move neutral piece if game continues\n            };\n            \n            console.log(`🧩 L-Move ${result.moveNumber}: Player ${this.getPlayerName(currentPlayer)} → (${toRow},${toCol}) orient:${orientation} (${moveTime.toFixed(2)}ms)`);\n            \n            // Emit events\n            this.emit('move', result);\n            this.emit('lPieceMove', result);\n            \n            if (result.isGameOver) {\n                const gameEndData = {\n                    winner: result.winner,\n                    winnerName: this.getPlayerName(result.winner),\n                    totalMoves: this.totalMoves,\n                    averageMoveTime: this.averageMoveTime\n                };\n                \n                console.log(`🏁 L-Game Over! Winner: ${gameEndData.winnerName}`);\n                this.emit('gameOver', gameEndData);\n            }\n            \n            return result;\n            \n        } catch (error) {\n            console.error(`❌ L-piece move failed to (${toRow},${toCol}) orient:${orientation}:`, error.message);\n            throw error;\n        }\n    }\n    \n    /**\n     * Move neutral piece (optional part of turn)\n     * @param {number} fromRow - Source row (0-3)\n     * @param {number} fromCol - Source column (0-3)\n     * @param {number} toRow - Target row (0-3)\n     * @param {number} toCol - Target column (0-3)\n     * @returns {Object} Move result\n     */\n    moveNeutralPiece(fromRow, fromCol, toRow, toCol) {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        if (this.game.game_over) {\n            throw new Error('Game is over - no neutral moves allowed');\n        }\n        \n        try {\n            // Validate coordinates\n            if (fromRow < 0 || fromRow >= this.rows || fromCol < 0 || fromCol >= this.cols ||\n                toRow < 0 || toRow >= this.rows || toCol < 0 || toCol >= this.cols) {\n                throw new Error('Invalid coordinates for neutral piece move');\n            }\n            \n            // Check if there's a neutral piece at source\n            if (this.getCell(fromRow, fromCol) !== 3) {\n                throw new Error(`No neutral piece at (${fromRow},${fromCol})`);\n            }\n            \n            // Check if target is empty\n            if (this.getCell(toRow, toCol) !== 0) {\n                throw new Error(`Target position (${toRow},${toCol}) is not empty`);\n            }\n            \n            // Make neutral piece move\n            this.game.move_neutral_piece(fromRow, fromCol, toRow, toCol);\n            \n            const move = {\n                type: 'neutral',\n                fromRow,\n                fromCol,\n                toRow,\n                toCol,\n                timestamp: Date.now()\n            };\n            \n            // Add to last move in history\n            if (this.gameHistory.length > 0) {\n                this.gameHistory[this.gameHistory.length - 1].neutralMove = move;\n            }\n            \n            const result = {\n                type: 'neutral',\n                fromRow,\n                fromCol,\n                toRow,\n                toCol,\n                board: this.getBoard()\n            };\n            \n            console.log(`🔘 Neutral piece moved: (${fromRow},${fromCol}) → (${toRow},${toCol})`);\n            this.emit('neutralMove', result);\n            \n            return result;\n            \n        } catch (error) {\n            console.error(`❌ Neutral move failed (${fromRow},${fromCol}) → (${toRow},${toCol}):`, error.message);\n            throw error;\n        }\n    }\n    \n    /**\n     * Get current game state\n     */\n    getGameState() {\n        if (!this.initialized) {\n            return null;\n        }\n        \n        return {\n            board: this.getBoard(),\n            currentPlayer: this.game.current_player,\n            currentPlayerName: this.getPlayerName(this.game.current_player),\n            moveCount: this.game.move_count,\n            isGameOver: this.game.game_over,\n            winner: this.game.winner,\n            winnerName: this.getPlayerName(this.game.winner),\n            validMovesCount: this.game.get_valid_moves_count(),\n            memoryUsage: this.estimateMemoryUsage(),\n            performanceStats: {\n                totalMoves: this.totalMoves,\n                averageMoveTime: this.averageMoveTime\n            }\n        };\n    }\n    \n    /**\n     * Get current board as 2D array\n     * @returns {number[][]} Board state (0=empty, 1=player1, 2=player2, 3=neutral)\n     */\n    getBoard() {\n        if (!this.initialized) return null;\n        \n        const flatBoard = this.game.get_board_state();\n        const board2D = [];\n        \n        for (let row = 0; row < this.rows; row++) {\n            board2D[row] = [];\n            for (let col = 0; col < this.cols; col++) {\n                board2D[row][col] = flatBoard[row * this.cols + col];\n            }\n        }\n        \n        return board2D;\n    }\n    \n    /**\n     * Get cell value at specific position\n     * @param {number} row - Row (0-3)\n     * @param {number} col - Column (0-3)\n     * @returns {number} Cell value (0=empty, 1=player1, 2=player2, 3=neutral)\n     */\n    getCell(row, col) {\n        if (!this.initialized) return 0;\n        if (row < 0 || row >= this.rows || col < 0 || col >= this.cols) return 0;\n        \n        try {\n            return this.game.get_cell(row, col);\n        } catch (error) {\n            return 0;\n        }\n    }\n    \n    /**\n     * Get current player\n     * @returns {number} Current player (1=Yellow, 2=Red)\n     */\n    getCurrentPlayer() {\n        if (!this.initialized) return 1;\n        return this.game.current_player;\n    }\n    \n    /**\n     * Get player name for display\n     * @param {number} player - Player number\n     * @returns {string} Player name\n     */\n    getPlayerName(player) {\n        if (!player) return 'None';\n        return player === 1 ? 'Gelb' : 'Rot';\n    }\n    \n    /**\n     * Get move count\n     * @returns {number} Number of moves made\n     */\n    getMoveCount() {\n        if (!this.initialized) return 0;\n        return this.game.move_count;\n    }\n    \n    /**\n     * Check if game is over\n     * @returns {boolean} True if game is over\n     */\n    isGameOver() {\n        if (!this.initialized) return false;\n        return this.game.game_over;\n    }\n    \n    /**\n     * Get game winner\n     * @returns {number|null} Winner (1, 2) or null for ongoing\n     */\n    getWinner() {\n        if (!this.initialized) return null;\n        return this.game.winner;\n    }\n    \n    /**\n     * Get number of valid L-piece moves for current player\n     * @returns {number} Number of valid moves\n     */\n    getValidMovesCount() {\n        if (!this.initialized) return 0;\n        return this.game.get_valid_moves_count();\n    }\n    \n    /**\n     * Check if current player is blocked (cannot move L-piece)\n     * @returns {boolean} True if player is blocked\n     */\n    isCurrentPlayerBlocked() {\n        if (!this.initialized) return false;\n        return this.game.is_current_player_blocked();\n    }\n    \n    /**\n     * Reset game to initial state\n     */\n    newGame() {\n        if (!this.initialized) {\n            throw new Error('Game not initialized');\n        }\n        \n        try {\n            this.game.reset();\n            this.gameHistory = [];\n            this.currentMoveIndex = -1;\n            this.totalMoves = 0;\n            this.averageMoveTime = 0;\n            this.selectedPiece = null;\n            this.movePhase = 'l-piece';\n            this.pendingMove = null;\n            \n            console.log('🆕 New L-Game started');\n            this.emit('newGame', this.getGameState());\n            \n        } catch (error) {\n            console.error('❌ Failed to reset L-Game:', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Check if neutral piece can be moved from position\n     * @param {number} row - Row (0-3)\n     * @param {number} col - Column (0-3)\n     * @returns {boolean} True if neutral piece can be moved\n     */\n    canMoveNeutralFrom(row, col) {\n        if (!this.initialized || this.game.game_over) return false;\n        return this.getCell(row, col) === 3; // Neutral piece\n    }\n    \n    /**\n     * Check if position is empty for neutral piece placement\n     * @param {number} row - Row (0-3)\n     * @param {number} col - Column (0-3)\n     * @returns {boolean} True if position is empty\n     */\n    canPlaceNeutralAt(row, col) {\n        if (!this.initialized || this.game.game_over) return false;\n        return this.getCell(row, col) === 0; // Empty\n    }\n    \n    /**\n     * Find all neutral pieces on board\n     * @returns {Array} Array of {row, col} coordinates\n     */\n    getNeutralPieces() {\n        if (!this.initialized) return [];\n        \n        const neutralPieces = [];\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.cols; col++) {\n                if (this.getCell(row, col) === 3) {\n                    neutralPieces.push({ row, col });\n                }\n            }\n        }\n        return neutralPieces;\n    }\n    \n    /**\n     * Find all empty positions for neutral piece moves\n     * @returns {Array} Array of {row, col} coordinates\n     */\n    getEmptyPositions() {\n        if (!this.initialized) return [];\n        \n        const emptyPositions = [];\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.cols; col++) {\n                if (this.getCell(row, col) === 0) {\n                    emptyPositions.push({ row, col });\n                }\n            }\n        }\n        return emptyPositions;\n    }\n    \n    // ==================== EVENT SYSTEM ====================\n    \n    /**\n     * Add event listener\n     */\n    on(event, callback) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(callback);\n    }\n    \n    /**\n     * Remove event listener\n     */\n    off(event, callback) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            const index = listeners.indexOf(callback);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * Emit event\n     * @private\n     */\n    emit(event, data) {\n        if (this.eventListeners.has(event)) {\n            const listeners = this.eventListeners.get(event);\n            for (const callback of listeners) {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`❌ Event callback error for '${event}':`, error);\n                }\n            }\n        }\n    }\n    \n    // ==================== PERFORMANCE & DEBUGGING ====================\n    \n    /**\n     * Get performance statistics\n     */\n    getPerformanceStats() {\n        const memoryUsage = this.estimateMemoryUsage();\n        const naiveMemoryUsage = 48; // 4 * 4 * 3 bytes\n        \n        let memoryEfficiency = '0%';\n        if (this.initialized) {\n            if (memoryUsage <= naiveMemoryUsage) {\n                const efficiency = ((naiveMemoryUsage - memoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                memoryEfficiency = `${efficiency}% savings`;\n            } else {\n                const overhead = ((memoryUsage - naiveMemoryUsage) / naiveMemoryUsage * 100).toFixed(1);\n                memoryEfficiency = `${overhead}% overhead`;\n            }\n        }\n        \n        return {\n            totalMoves: this.totalMoves,\n            averageMoveTime: this.averageMoveTime,\n            memoryUsage: memoryUsage,\n            memoryEfficiency: memoryEfficiency,\n            architecture: '3x BitPackedBoard<4,4,1>'\n        };\n    }\n    \n    /**\n     * Get game history\n     */\n    getHistory() {\n        return [...this.gameHistory]; // Return copy\n    }\n    \n    /**\n     * Export game state for analysis\n     */\n    exportGame() {\n        return {\n            history: this.getHistory(),\n            finalState: this.getGameState(),\n            performance: this.getPerformanceStats(),\n            timestamp: Date.now()\n        };\n    }\n    \n    /**\n     * Debug board state\n     */\n    debugBoard() {\n        if (!this.initialized) {\n            console.log('🚫 L-Game not initialized');\n            return;\n        }\n        \n        const board = this.getBoard();\n        console.log('🧩 L-Game Board State:');\n        console.log('   1 2 3 4');\n        \n        for (let row = 0; row < this.rows; row++) {\n            let rowStr = `${row + 1}: `;\n            for (let col = 0; col < this.cols; col++) {\n                const cell = board[row][col];\n                let symbol = '.';\n                if (cell === 1) symbol = 'G'; // Gelb (Yellow)\n                else if (cell === 2) symbol = 'R'; // Rot (Red)\n                else if (cell === 3) symbol = 'N'; // Neutral\n                rowStr += symbol + ' ';\n            }\n            console.log(rowStr);\n        }\n        \n        console.log(`Current Player: ${this.getPlayerName(this.getCurrentPlayer())}`);\n        console.log(`Move Count: ${this.getMoveCount()}`);\n        console.log(`Game Over: ${this.isGameOver()}`);\n        console.log(`Winner: ${this.getPlayerName(this.getWinner())}`);\n        console.log(`Valid L-Moves: ${this.getValidMovesCount()}`);\n        console.log(`Blocked: ${this.isCurrentPlayerBlocked()}`);\n    }\n    \n    /**\n     * Get debug information\n     */\n    getDebugInfo() {\n        if (!this.initialized) return null;\n        \n        return {\n            gameState: this.getGameState(),\n            performance: this.getPerformanceStats(),\n            neutralPieces: this.getNeutralPieces(),\n            emptyPositions: this.getEmptyPositions(),\n            history: this.getHistory()\n        };\n    }\n    \n    /**\n     * Destroy game instance and cleanup\n     */\n    destroy() {\n        this.eventListeners.clear();\n        this.gameHistory = [];\n        this.initialized = false;\n        this.game = null;\n        this.selectedPiece = null;\n        this.pendingMove = null;\n        \n        console.log('🗑️ LGameEngineBitPacked destroyed');\n    }\n}","/**\n * LGameBoardRenderer - L-Game Board Rendering & Visual Updates\n * \n * Adapted from Connect4/Gomoku BoardRenderer for 4x4 L-Game board.\n * Handles L-piece visualization, neutral pieces, and board state management.\n * \n * Responsibilities:\n * - 4x4 Board DOM creation & styling\n * - L-piece rendering with 8 orientations (4 rotations + 4 mirrored)\n * - Neutral piece management\n * - Move validation highlighting\n * - Board state visual updates\n */\n\nexport class LGameBoardRenderer {\n    constructor(gameBoard) {\n        this.gameBoard = gameBoard;\n        \n        // Board configuration\n        this.boardSize = 4;  // 4x4 L-Game board\n        this.cells = [];\n        \n        // Piece state tracking\n        this.pieces = {\n            player1: { type: 'lpiece', cells: [], orientation: 0 },\n            player2: { type: 'lpiece', cells: [], orientation: 0 },\n            neutral1: { type: 'neutral', cell: null },\n            neutral2: { type: 'neutral', cell: null }\n        };\n        \n        // Visual state\n        this.initialized = false;\n        this.selectedPiece = null;\n        this.highlightedCells = new Set();\n    }\n\n    /**\n     * Initialize method for compatibility with ui-production.js\n     */\n    async init() {\n        return this.initializeBoard();\n    }\n\n    /**\n     * Create board method for compatibility with ui-production.js\n     */\n    async createBoard() {\n        return this.initializeBoard();\n    }\n\n    /**\n     * Initialize the L-Game board (4x4 grid)\n     */\n    initializeBoard() {\n        if (!this.gameBoard) {\n            console.error('❌ Game board element not found');\n            return false;\n        }\n\n        // Clear existing board\n        this.gameBoard.innerHTML = '';\n        this.cells = [];\n        \n        // Apply L-Game board styles\n        this._applyBoardStyles();\n        \n        // Create 4x4 grid (16 cells total)\n        this._createBoardCells();\n        \n        console.log(`🧩 L-Game board initialized (${this.boardSize}x${this.boardSize} grid, ${this.cells.length} cells)`);\n        \n        this.initialized = true;\n        return true;\n    }\n\n    /**\n     * Apply CSS Grid styles for 4x4 L-Game board\n     * @private\n     */\n    _applyBoardStyles() {\n        this.gameBoard.className = 'game-board lgame-board';\n        \n        // Apply L-Game specific styles\n        Object.assign(this.gameBoard.style, {\n            display: 'grid',\n            gridTemplateColumns: `repeat(${this.boardSize}, 1fr)`,\n            gridTemplateRows: `repeat(${this.boardSize}, 1fr)`,\n            gap: '4px',\n            aspectRatio: '1/1',\n            background: 'linear-gradient(45deg, #8B4513, #A0522D)',\n            borderRadius: '12px',\n            padding: '20px',\n            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n            border: '3px solid #654321',\n            width: '320px',\n            height: '320px',\n            margin: '1rem auto',\n            position: 'relative'\n        });\n        \n        console.log('🎨 Applied CSS Grid styles for 4x4 L-Game board');\n    }\n\n    /**\n     * Create all board cells\n     * @private\n     */\n    _createBoardCells() {\n        for (let row = 0; row < this.boardSize; row++) {\n            for (let col = 0; col < this.boardSize; col++) {\n                const cell = this._createCell(row, col);\n                this.cells.push(cell);\n                this.gameBoard.appendChild(cell);\n            }\n        }\n    }\n\n    /**\n     * Create a single board cell\n     * @private\n     */\n    _createCell(row, col) {\n        const cell = document.createElement('div');\n        cell.className = 'board-cell';\n        cell.dataset.row = row;\n        cell.dataset.col = col;\n        cell.dataset.index = row * this.boardSize + col;\n        \n        // Apply cell styles\n        Object.assign(cell.style, {\n            background: 'linear-gradient(45deg, #F5DEB3, #FFEFD5)',\n            border: '2px solid #8B4513',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            cursor: 'pointer',\n            transition: 'all 0.2s ease',\n            position: 'relative',\n            userSelect: 'none',\n            borderRadius: '4px'\n        });\n        \n        return cell;\n    }\n\n    /**\n     * Get cell at specific position\n     */\n    getCellAt(row, col) {\n        return this.gameBoard.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n    }\n\n    /**\n     * Get cell by index (0-15)\n     */\n    getCellByIndex(index) {\n        return this.gameBoard.querySelector(`[data-index=\"${index}\"]`);\n    }\n\n    /**\n     * Place L-piece at position with orientation\n     */\n    placeLPiece(player, positions, orientation = 0) {\n        if (!Array.isArray(positions) || positions.length !== 4) {\n            console.warn('⚠️ Invalid L-piece positions - need exactly 4 positions');\n            return false;\n        }\n\n        // Clear previous L-piece for this player\n        this.clearLPiece(player);\n\n        // Place new L-piece\n        positions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.getCellAt(row, col);\n            if (cell) {\n                const piece = this._createLPiece(player, index === 0); // first position is the corner\n                cell.appendChild(piece);\n                \n                // Track piece state\n                this.pieces[player].cells.push({ row, col, cell });\n            }\n        });\n\n        this.pieces[player].orientation = orientation;\n        console.log(`🧩 Placed L-piece for ${player} at positions:`, positions);\n        return true;\n    }\n\n    /**\n     * Create L-piece element\n     * @private\n     */\n    _createLPiece(player, isCorner = false) {\n        const piece = document.createElement('div');\n        piece.className = `lpiece ${player} placing`;\n        \n        // Apply L-piece styles based on player (L-Game standard colors)\n        const playerStyles = {\n            player1: {\n                background: 'linear-gradient(135deg, #FFD700, #FFC107)', // Gold/Yellow\n                border: '2px solid #F57F17'\n            },\n            player2: {\n                background: 'linear-gradient(135deg, #F44336, #C62828)', // Red\n                border: '2px solid #B71C1C'\n            }\n        };\n\n        Object.assign(piece.style, {\n            width: '100%',\n            height: '100%',\n            borderRadius: '4px',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.4)',\n            position: 'relative',\n            ...playerStyles[player]\n        });\n\n        // Add corner indicator for the corner piece\n        if (isCorner) {\n            const cornerIndicator = document.createElement('div');\n            cornerIndicator.className = 'corner-indicator';\n            Object.assign(cornerIndicator.style, {\n                position: 'absolute',\n                top: '2px',\n                right: '2px',\n                width: '6px',\n                height: '6px',\n                background: 'rgba(255, 255, 255, 0.8)',\n                borderRadius: '50%'\n            });\n            piece.appendChild(cornerIndicator);\n        }\n\n        return piece;\n    }\n\n    /**\n     * Clear L-piece for player\n     */\n    clearLPiece(player) {\n        this.pieces[player].cells.forEach(({ cell }) => {\n            const piece = cell.querySelector('.lpiece');\n            if (piece) {\n                piece.remove();\n            }\n        });\n        this.pieces[player].cells = [];\n    }\n\n    /**\n     * Place neutral piece at position\n     */\n    placeNeutralPiece(neutralId, row, col) {\n        const cell = this.getCellAt(row, col);\n        if (!cell) {\n            console.warn(`⚠️ Cell not found at (${row}, ${col})`);\n            return false;\n        }\n\n        // Clear previous neutral piece\n        this.clearNeutralPiece(neutralId);\n\n        // Create and place neutral piece\n        const piece = this._createNeutralPiece();\n        cell.appendChild(piece);\n\n        // Track piece state\n        this.pieces[neutralId] = { type: 'neutral', cell: { row, col, element: cell } };\n\n        console.log(`🔴 Placed neutral piece ${neutralId} at (${row}, ${col})`);\n        return true;\n    }\n\n    /**\n     * Create neutral piece element\n     * @private\n     */\n    _createNeutralPiece() {\n        const piece = document.createElement('div');\n        piece.className = 'neutral-piece placing';\n        \n        Object.assign(piece.style, {\n            width: '70%',\n            height: '70%',\n            borderRadius: '50%',\n            background: 'linear-gradient(135deg, #757575, #424242)', // Gray\n            border: '2px solid #212121',\n            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.3)'\n        });\n\n        return piece;\n    }\n\n    /**\n     * Clear neutral piece\n     */\n    clearNeutralPiece(neutralId) {\n        if (this.pieces[neutralId] && this.pieces[neutralId].cell) {\n            const cell = this.pieces[neutralId].cell.element;\n            const piece = cell.querySelector('.neutral-piece');\n            if (piece) {\n                piece.remove();\n            }\n            this.pieces[neutralId].cell = null;\n        }\n    }\n\n    /**\n     * Clear all pieces from board\n     */\n    clearBoard() {\n        this.cells.forEach(cell => {\n            // Remove all pieces\n            const pieces = cell.querySelectorAll('.lpiece, .neutral-piece');\n            pieces.forEach(piece => piece.remove());\n            \n            // Clear all cell states\n            cell.classList.remove(\n                'highlighted', 'selected', 'valid-move', 'invalid-move',\n                'blockade-threat', 'winning-position', 'move-preview'\n            );\n        });\n        \n        // Reset piece tracking\n        this.pieces = {\n            player1: { type: 'lpiece', cells: [], orientation: 0 },\n            player2: { type: 'lpiece', cells: [], orientation: 0 },\n            neutral1: { type: 'neutral', cell: null },\n            neutral2: { type: 'neutral', cell: null }\n        };\n\n        this.selectedPiece = null;\n        this.highlightedCells.clear();\n        \n        console.log('🧹 L-Game board cleared');\n    }\n\n    /**\n     * Highlight valid moves for current selection\n     */\n    highlightValidMoves(validPositions) {\n        this.clearHighlights();\n        \n        if (!Array.isArray(validPositions)) return;\n\n        validPositions.forEach(position => {\n            let row, col;\n            if (Array.isArray(position)) {\n                [row, col] = position;\n            } else {\n                row = position.row;\n                col = position.col;\n            }\n            \n            const cell = this.getCellAt(row, col);\n            if (cell) {\n                cell.classList.add('valid-move');\n                this.highlightedCells.add(cell);\n            }\n        });\n\n        console.log(`💡 Highlighted ${validPositions.length} valid moves`);\n    }\n\n    /**\n     * Show invalid move feedback\n     */\n    showInvalidMove(row, col) {\n        const cell = this.getCellAt(row, col);\n        if (cell) {\n            cell.classList.add('invalid-move');\n            \n            // Auto-remove after animation\n            setTimeout(() => {\n                cell.classList.remove('invalid-move');\n            }, 1000);\n        }\n    }\n\n    /**\n     * Select piece at position\n     */\n    selectPiece(row, col) {\n        this.clearSelection();\n        \n        const cell = this.getCellAt(row, col);\n        if (cell) {\n            cell.classList.add('selected');\n            this.selectedPiece = { row, col, cell };\n        }\n    }\n\n    /**\n     * Clear current selection\n     */\n    clearSelection() {\n        if (this.selectedPiece) {\n            this.selectedPiece.cell.classList.remove('selected');\n            this.selectedPiece = null;\n        }\n    }\n\n    /**\n     * Clear all highlights\n     */\n    clearHighlights() {\n        this.highlightedCells.forEach(cell => {\n            cell.classList.remove('valid-move', 'highlighted', 'move-preview');\n        });\n        this.highlightedCells.clear();\n    }\n\n    /**\n     * Show blockade threat warning\n     */\n    showBlockadeThreat(positions) {\n        if (!Array.isArray(positions)) return;\n\n        positions.forEach(position => {\n            const [row, col] = position;\n            const cell = this.getCellAt(row, col);\n            if (cell) {\n                cell.classList.add('blockade-threat');\n            }\n        });\n    }\n\n    /**\n     * Show winning position\n     */\n    showWinningPosition(player) {\n        // Highlight the winning player's L-piece\n        this.pieces[player].cells.forEach(({ cell }) => {\n            cell.classList.add('winning-position');\n        });\n    }\n\n    /**\n     * Update board from game state\n     */\n    updateFromGameState(gameState) {\n        this.clearBoard();\n        \n        if (!gameState) return;\n\n        // Place L-pieces\n        if (gameState.player1_lpiece) {\n            this.placeLPiece('player1', gameState.player1_lpiece.positions, gameState.player1_lpiece.orientation);\n        }\n        if (gameState.player2_lpiece) {\n            this.placeLPiece('player2', gameState.player2_lpiece.positions, gameState.player2_lpiece.orientation);\n        }\n\n        // Place neutral pieces\n        if (gameState.neutral1) {\n            this.placeNeutralPiece('neutral1', gameState.neutral1.row, gameState.neutral1.col);\n        }\n        if (gameState.neutral2) {\n            this.placeNeutralPiece('neutral2', gameState.neutral2.row, gameState.neutral2.col);\n        }\n\n        console.log('🔄 Board updated from game state');\n    }\n\n    /**\n     * Get current board state\n     */\n    getBoardState() {\n        return {\n            pieces: { ...this.pieces },\n            selectedPiece: this.selectedPiece,\n            highlightedCells: Array.from(this.highlightedCells)\n        };\n    }\n\n    /**\n     * Check if position is empty\n     */\n    isPositionEmpty(row, col) {\n        const cell = this.getCellAt(row, col);\n        return cell && !cell.querySelector('.lpiece, .neutral-piece');\n    }\n\n    /**\n     * Check if position is valid\n     */\n    isValidPosition(row, col) {\n        return row >= 0 && row < this.boardSize && col >= 0 && col < this.boardSize;\n    }\n\n    /**\n     * Get piece at position\n     */\n    getPieceAt(row, col) {\n        const cell = this.getCellAt(row, col);\n        if (!cell) return null;\n\n        const lpiece = cell.querySelector('.lpiece');\n        if (lpiece) {\n            const player = lpiece.classList.contains('player1') ? 'player1' : 'player2';\n            return { type: 'lpiece', player };\n        }\n\n        const neutral = cell.querySelector('.neutral-piece');\n        if (neutral) {\n            return { type: 'neutral' };\n        }\n\n        return null;\n    }\n\n    /**\n     * Get all cells\n     */\n    getAllCells() {\n        return this.cells;\n    }\n}","/**\n * LGameInteractionHandler - L-Game User Interaction Management\n * \n * Adapted from Connect4 InteractionHandler for L-Game specific needs.\n * Handles all user interactions: clicks, hover, keyboard, L-piece selection and placement.\n * \n * Responsibilities:\n * - Cell click & hover handling (4x4 grid)\n * - L-piece selection and placement preview\n * - Neutral piece placement\n * - L-piece rotation and orientation\n * - Touch/mobile interaction support\n * - Move validation & feedback\n */\n\nexport class LGameInteractionHandler {\n    constructor(boardRenderer, gameBoard) {\n        this.boardRenderer = boardRenderer;\n        this.gameBoard = gameBoard;\n        \n        // Interaction state\n        this.hoveredCell = null;\n        this.selectedLPiece = null; // Which L-piece is selected (1 or 2)\n        this.previewElements = [];\n        this.isProcessingMove = false;\n        this.interactionMode = 'L_PIECE'; // 'L_PIECE' or 'NEUTRAL_PIECE'\n        this.currentOrientation = 0; // L-piece rotation (0-7)\n        \n        // Event listeners for cleanup\n        this.eventListeners = [];\n        \n        // Callback functions\n        this.onCellClickCallback = null;\n        this.onCellHoverCallback = null;\n        this.onCellHoverLeaveCallback = null;\n        this.onLPieceSelectCallback = null;\n        this.onNeutralPiecePlaceCallback = null;\n    }\n\n    /**\n     * Setup all cell interactions (click, hover) for 4x4 L-Game board\n     */\n    setupCellInteractions() {\n        if (!this.gameBoard) return;\n\n        // Setup cell click and hover handlers\n        this._setupBoardClickHandler();\n        this._setupBoardHoverHandler();\n        \n        console.log('🎯 L-Game cell interactions set up (4x4 grid clicks + hover)');\n    }\n\n    /**\n     * Setup board click event handler for L-Game\n     * @private\n     */\n    _setupBoardClickHandler() {\n        const clickHandler = (event) => {\n            const cell = event.target.closest('.board-cell');\n            if (cell) {\n                const row = parseInt(cell.dataset.row);\n                const col = parseInt(cell.dataset.col);\n                this.handleCellClick(row, col);\n            }\n        };\n        \n        this.gameBoard.addEventListener('click', clickHandler);\n        this._trackEventListener(this.gameBoard, 'click', clickHandler);\n    }\n\n    /**\n     * Setup board hover event handler for move preview\n     * @private\n     */\n    _setupBoardHoverHandler() {\n        const mouseEnterHandler = (event) => {\n            const cell = event.target.closest('.board-cell');\n            if (cell) {\n                const row = parseInt(cell.dataset.row);\n                const col = parseInt(cell.dataset.col);\n                if (!isNaN(row) && !isNaN(col)) {\n                    this.handleCellHover(row, col);\n                }\n            }\n        };\n\n        const mouseLeaveHandler = (event) => {\n            // Only clear hover if we're leaving the entire board\n            if (!event.relatedTarget || !this.gameBoard.contains(event.relatedTarget)) {\n                this.handleCellHoverLeave();\n            }\n        };\n\n        this.gameBoard.addEventListener('mouseenter', mouseEnterHandler, true);\n        this.gameBoard.addEventListener('mouseleave', mouseLeaveHandler);\n        \n        this._trackEventListener(this.gameBoard, 'mouseenter', mouseEnterHandler);\n        this._trackEventListener(this.gameBoard, 'mouseleave', mouseLeaveHandler);\n    }\n\n    /**\n     * Handle cell hover for L-piece placement preview\n     */\n    handleCellHover(row, col) {\n        if (this.isProcessingMove) return;\n        \n        this.hoveredCell = { row, col };\n        \n        if (this.interactionMode === 'L_PIECE' && this.selectedLPiece) {\n            this.showLPiecePreview(row, col, this.selectedLPiece, this.currentOrientation);\n        } else if (this.interactionMode === 'NEUTRAL_PIECE') {\n            this.showNeutralPiecePreview(row, col);\n        }\n        \n        // Set data attribute for CSS styling\n        this.gameBoard.setAttribute('data-hover-row', row);\n        this.gameBoard.setAttribute('data-hover-col', col);\n        \n        // Callback for external handling\n        if (this.onCellHoverCallback) {\n            this.onCellHoverCallback(row, col);\n        }\n    }\n\n    /**\n     * Handle cell hover leave\n     */\n    handleCellHoverLeave() {\n        this.hoveredCell = null;\n        this.hidePreview();\n        \n        // Remove data attributes for CSS styling\n        this.gameBoard.removeAttribute('data-hover-row');\n        this.gameBoard.removeAttribute('data-hover-col');\n        \n        // Callback for external handling\n        if (this.onCellHoverLeaveCallback) {\n            this.onCellHoverLeaveCallback();\n        }\n    }\n\n    /**\n     * Handle cell click for L-Game moves\n     */\n    handleCellClick(row, col) {\n        if (this.isProcessingMove) {\n            console.log('Move already in progress, ignoring input');\n            return;\n        }\n\n        if (row < 0 || row >= 4 || col < 0 || col >= 4) {\n            console.warn(`Invalid cell click: ${row},${col}`);\n            return;\n        }\n\n        // Callback for external handling (UI will handle actual move logic)\n        if (this.onCellClickCallback) {\n            this.onCellClickCallback(row, col, this.interactionMode, this.selectedLPiece, this.currentOrientation);\n        }\n    }\n\n    /**\n     * Show L-piece placement preview\n     */\n    showLPiecePreview(anchorRow, anchorCol, player, orientation) {\n        this.hidePreview(); // Clear any existing preview\n        \n        // Get L-piece shape for current orientation\n        const lPiecePositions = this._getLPiecePositions(anchorRow, anchorCol, orientation);\n        \n        if (!this._isValidLPiecePlacement(lPiecePositions)) {\n            return; // Invalid placement\n        }\n        \n        // Create preview elements\n        lPiecePositions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.boardRenderer.getCellAt(row, col);\n            if (cell) {\n                const preview = document.createElement('div');\n                preview.className = `l-piece-preview player-${player} ${index === 0 ? 'anchor' : 'segment'}`;\n                preview.style.cssText = `\n                    position: absolute;\n                    top: 5%;\n                    left: 5%;\n                    right: 5%;\n                    bottom: 5%;\n                    background: ${player === 1 ? 'rgba(59, 130, 246, 0.5)' : 'rgba(239, 68, 68, 0.5)'};\n                    border: 2px dashed ${player === 1 ? '#3b82f6' : '#ef4444'};\n                    border-radius: 4px;\n                    z-index: 10;\n                    pointer-events: none;\n                `;\n                \n                cell.appendChild(preview);\n                this.previewElements.push(preview);\n            }\n        });\n    }\n\n    /**\n     * Show neutral piece placement preview\n     */\n    showNeutralPiecePreview(row, col) {\n        this.hidePreview(); // Clear any existing preview\n        \n        const cell = this.boardRenderer.getCellAt(row, col);\n        if (cell && this._isValidNeutralPiecePlacement(row, col)) {\n            const preview = document.createElement('div');\n            preview.className = 'neutral-piece-preview';\n            preview.style.cssText = `\n                position: absolute;\n                top: 20%;\n                left: 20%;\n                right: 20%;\n                bottom: 20%;\n                background: rgba(255, 255, 255, 0.7);\n                border: 2px dashed #ffffff;\n                border-radius: 50%;\n                z-index: 10;\n                pointer-events: none;\n            `;\n            \n            cell.appendChild(preview);\n            this.previewElements.push(preview);\n        }\n    }\n\n    /**\n     * Hide all preview elements\n     */\n    hidePreview() {\n        this.previewElements.forEach(element => {\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n            }\n        });\n        this.previewElements = [];\n    }\n\n    /**\n     * Get L-piece positions for given anchor and orientation\n     * @private\n     */\n    _getLPiecePositions(anchorRow, anchorCol, orientation) {\n        // L-piece orientations (relative to anchor point)\n        const orientations = [\n            [[0, 0], [1, 0], [2, 0], [0, 1]], // L (normal)\n            [[0, 0], [0, 1], [0, 2], [1, 0]], // L (rotated 90°)\n            [[0, 0], [0, 1], [1, 1], [2, 1]], // L (rotated 180°)\n            [[0, 0], [1, 0], [1, -1], [1, -2]], // L (rotated 270°)\n            [[0, 0], [1, 0], [2, 0], [0, -1]], // L (flipped)\n            [[0, 0], [0, 1], [0, 2], [-1, 0]], // L (flipped + 90°)\n            [[0, 0], [0, -1], [1, -1], [2, -1]], // L (flipped + 180°)\n            [[0, 0], [-1, 0], [-1, 1], [-1, 2]]  // L (flipped + 270°)\n        ];\n        \n        const relativePositions = orientations[orientation % 8];\n        return relativePositions.map(([dRow, dCol]) => [\n            anchorRow + dRow,\n            anchorCol + dCol\n        ]);\n    }\n\n    /**\n     * Check if L-piece placement is valid\n     * @private\n     */\n    _isValidLPiecePlacement(positions) {\n        return positions.every(([row, col]) => {\n            // Check bounds\n            if (row < 0 || row >= 4 || col < 0 || col >= 4) return false;\n            \n            // Check if cell is empty (would need to check with game state)\n            // For now, just check bounds\n            return true;\n        });\n    }\n\n    /**\n     * Check if neutral piece placement is valid\n     * @private\n     */\n    _isValidNeutralPiecePlacement(row, col) {\n        // Check bounds\n        if (row < 0 || row >= 4 || col < 0 || col >= 4) return false;\n        \n        // Check if cell is empty (would need to check with game state)\n        return true;\n    }\n\n    /**\n     * Setup keyboard interactions for L-Game\n     */\n    setupKeyboardInteractions() {\n        const keyboardHandler = (event) => {\n            const key = event.key.toLowerCase();\n            \n            switch (key) {\n                case 'r':\n                    // Rotate L-piece\n                    this.rotateCurrentLPiece();\n                    event.preventDefault();\n                    break;\n                case '1':\n                    // Select player 1 L-piece\n                    this.selectLPiece(1);\n                    event.preventDefault();\n                    break;\n                case '2':\n                    // Select player 2 L-piece\n                    this.selectLPiece(2);\n                    event.preventDefault();\n                    break;\n                case 'n':\n                    // Switch to neutral piece mode\n                    this.setInteractionMode('NEUTRAL_PIECE');\n                    event.preventDefault();\n                    break;\n                case 'l':\n                    // Switch to L-piece mode\n                    this.setInteractionMode('L_PIECE');\n                    event.preventDefault();\n                    break;\n            }\n        };\n        \n        document.addEventListener('keydown', keyboardHandler);\n        this._trackEventListener(document, 'keydown', keyboardHandler);\n    }\n\n    /**\n     * Select which L-piece to place\n     */\n    selectLPiece(player) {\n        this.selectedLPiece = player;\n        this.setInteractionMode('L_PIECE');\n        \n        console.log(`Selected L-piece for player ${player}`);\n        \n        if (this.onLPieceSelectCallback) {\n            this.onLPieceSelectCallback(player);\n        }\n    }\n\n    /**\n     * Rotate current L-piece orientation\n     */\n    rotateCurrentLPiece() {\n        this.currentOrientation = (this.currentOrientation + 1) % 8;\n        \n        // Update preview if hovering\n        if (this.hoveredCell && this.selectedLPiece) {\n            this.showLPiecePreview(\n                this.hoveredCell.row, \n                this.hoveredCell.col, \n                this.selectedLPiece, \n                this.currentOrientation\n            );\n        }\n        \n        console.log(`Rotated L-piece to orientation ${this.currentOrientation}`);\n    }\n\n    /**\n     * Set interaction mode\n     */\n    setInteractionMode(mode) {\n        this.interactionMode = mode;\n        this.hidePreview();\n        \n        // Update cursor style\n        if (mode === 'L_PIECE') {\n            this.gameBoard.style.cursor = 'crosshair';\n        } else if (mode === 'NEUTRAL_PIECE') {\n            this.gameBoard.style.cursor = 'pointer';\n        }\n        \n        console.log(`Interaction mode set to: ${mode}`);\n    }\n\n    /**\n     * Set processing move state\n     */\n    setProcessingMove(isProcessing) {\n        this.isProcessingMove = isProcessing;\n        \n        // Update visual feedback\n        if (isProcessing) {\n            this.hidePreview();\n            this.gameBoard.style.cursor = 'wait';\n        } else {\n            this.gameBoard.style.cursor = this.interactionMode === 'L_PIECE' ? 'crosshair' : 'pointer';\n        }\n    }\n\n    /**\n     * Highlight specific cell\n     */\n    highlightCell(row, col, className = 'highlight') {\n        this.clearCellHighlights(className);\n        \n        const cell = this.boardRenderer.getCellAt(row, col);\n        if (cell) {\n            cell.classList.add(className);\n        }\n    }\n\n    /**\n     * Clear cell highlights\n     */\n    clearCellHighlights(className = 'highlight') {\n        const highlightedCells = this.gameBoard.querySelectorAll(`.board-cell.${className}`);\n        highlightedCells.forEach(cell => cell.classList.remove(className));\n    }\n\n    /**\n     * Set callback functions for external handling\n     */\n    setCallbacks({ \n        onCellClick, \n        onCellHover, \n        onCellHoverLeave, \n        onLPieceSelect, \n        onNeutralPiecePlace \n    }) {\n        this.onCellClickCallback = onCellClick;\n        this.onCellHoverCallback = onCellHover;\n        this.onCellHoverLeaveCallback = onCellHoverLeave;\n        this.onLPieceSelectCallback = onLPieceSelect;\n        this.onNeutralPiecePlaceCallback = onNeutralPiecePlace;\n    }\n\n    /**\n     * Track event listeners for cleanup\n     * @private\n     */\n    _trackEventListener(element, event, handler) {\n        this.eventListeners.push({ element, event, handler });\n    }\n\n    /**\n     * Get current interaction state\n     */\n    getInteractionState() {\n        return {\n            mode: this.interactionMode,\n            selectedLPiece: this.selectedLPiece,\n            orientation: this.currentOrientation,\n            hoveredCell: this.hoveredCell\n        };\n    }\n\n    /**\n     * Destroy interaction handler and cleanup all event listeners\n     */\n    destroy() {\n        // Remove all tracked event listeners\n        for (const { element, event, handler } of this.eventListeners) {\n            element.removeEventListener(event, handler);\n        }\n        this.eventListeners = [];\n        \n        // Clear state\n        this.hidePreview();\n        this.hoveredCell = null;\n        this.selectedLPiece = null;\n        this.previewElements = [];\n        \n        // Reset callbacks\n        this.onCellClickCallback = null;\n        this.onCellHoverCallback = null;\n        this.onCellHoverLeaveCallback = null;\n        this.onLPieceSelectCallback = null;\n        this.onNeutralPiecePlaceCallback = null;\n    }\n}","/**\n * LGameAnimationManager - L-Game Advanced Animation Controller\n * \n * Adapted from Connect4 AnimationManager for L-Game specific needs.\n * Handles all premium L-Game animations including:\n * - L-piece placement and rotation animations\n * - Neutral piece placement\n * - Victory celebrations\n * - Micro-interactions and feedback\n * \n * Responsibilities:\n * - L-piece smooth placement and removal animations\n * - Rotation preview and transitions\n * - Neutral piece interactions\n * - Performance optimization for 4x4 grid\n * - Accessibility support\n */\n\nexport class LGameAnimationManager {\n    constructor(gameBoard, boardRenderer) {\n        this.gameBoard = gameBoard;\n        this.boardRenderer = boardRenderer;\n        \n        // Animation state\n        this.animationQueue = [];\n        this.isAnimating = false;\n        this.previewElements = [];\n        this.celebrationActive = false;\n        \n        // Performance settings\n        this.reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n        this.animationSpeed = this.reducedMotion ? 0.5 : 1.0;\n        \n        // Premium effects engines\n        this.particleEngine = null;\n        this.soundManager = null;\n        \n        // Initialize premium effects\n        this.initializePremiumEffects();\n        \n        // Animation timing configuration for L-Game\n        this.timing = {\n            lPiecePlacement: 300,\n            lPieceRotation: 200,\n            neutralPiece: 150,\n            victoryReveal: 600,\n            victoryStagger: 100,\n            confettiDuration: 2500,\n            microInteraction: 150\n        };\n        \n        console.log('🎬 L-Game AnimationManager initialized with', this.reducedMotion ? 'reduced motion' : 'full animations');\n        console.log('🎊 Premium effects and sound integration ready for L-Game');\n    }\n    \n    /**\n     * Initialize premium effects systems\n     * @private\n     */\n    async initializePremiumEffects() {\n        try {\n            // Initialize particle engine for L-Game\n            await this.initializeParticleEngine();\n            \n            // Initialize sound manager\n            await this.initializeSoundManager();\n            \n            console.log('✨ L-Game premium effects systems initialized');\n        } catch (error) {\n            console.warn('⚠️ L-Game premium effects initialization failed:', error.message);\n        }\n    }\n    \n    /**\n     * Initialize particle engine for L-Game confetti effects\n     * @private\n     */\n    async initializeParticleEngine() {\n        try {\n            const { ParticleEngine } = await import('./ParticleEngine.js');\n            \n            // Create or use existing canvas for L-Game\n            let canvas = document.getElementById('lgameParticleCanvas');\n            if (!canvas) {\n                console.log('🎊 Creating L-Game particle canvas...');\n                canvas = document.createElement('canvas');\n                canvas.id = 'lgame-particles';\n                canvas.style.position = 'fixed';\n                canvas.style.top = '0';\n                canvas.style.left = '0';\n                canvas.style.pointerEvents = 'none';\n                canvas.style.zIndex = '9999';\n                canvas.width = window.innerWidth;\n                canvas.height = window.innerHeight;\n                document.body.appendChild(canvas);\n            }\n            \n            // Initialize particle engine for L-Game\n            this.particleEngine = new ParticleEngine(canvas, {\n                maxParticles: this.reducedMotion ? 15 : 100 // Fewer particles for 4x4 game\n            });\n            \n            console.log('🎊 L-Game ParticleEngine initialized successfully');\n        } catch (error) {\n            console.error('❌ L-Game ParticleEngine initialization failed:', error);\n            this.particleEngine = null;\n        }\n    }\n    \n    /**\n     * Initialize sound manager for L-Game\n     * @private\n     */\n    async initializeSoundManager() {\n        try {\n            const { soundManager } = await import('./SoundManager.js');\n            this.soundManager = soundManager;\n            console.log('🔊 L-Game SoundManager initialized');\n        } catch (error) {\n            console.warn('⚠️ L-Game SoundManager initialization failed:', error.message);\n            this.soundManager = null;\n        }\n    }\n\n    /**\n     * Animate L-piece placement with smooth transitions\n     * @param {Array} positions - Array of [row, col] positions for L-piece\n     * @param {number} player - Player number (1 or 2)\n     * @param {number} orientation - L-piece orientation (0-7)\n     */\n    async animateLPiecePlacement(positions, player, orientation) {\n        return new Promise((resolve) => {\n            console.log(`🎬 Animating L-piece placement: Player ${player}, positions:`, positions);\n            \n            // Play placement sound\n            if (this.soundManager) {\n                this.soundManager.playLPiecePlace();\n            }\n            \n            // Clear any existing pieces for this player\n            this.clearPlayerLPiece(player);\n            \n            let animationsCompleted = 0;\n            const totalAnimations = positions.length;\n            \n            // Animate each segment of the L-piece with stagger\n            positions.forEach((pos, index) => {\n                const [row, col] = pos;\n                const cell = this.boardRenderer.getCellAt(row, col);\n                \n                if (cell) {\n                    setTimeout(() => {\n                        // Create L-piece segment\n                        const piece = document.createElement('div');\n                        piece.className = `l-piece player-${player} ${index === 0 ? 'anchor' : 'segment'} orientation-${orientation}`;\n                        piece.dataset.player = player;\n                        piece.dataset.segmentIndex = index;\n                        \n                        // Set initial state for animation\n                        piece.style.cssText = `\n                            position: absolute;\n                            top: 10%;\n                            left: 10%;\n                            right: 10%;\n                            bottom: 10%;\n                            background: ${player === 1 ? 'linear-gradient(145deg, #3b82f6, #1d4ed8)' : 'linear-gradient(145deg, #ef4444, #dc2626)'};\n                            border: 2px solid ${player === 1 ? '#1e40af' : '#b91c1c'};\n                            border-radius: 6px;\n                            transform: scale(0) rotate(${orientation * 45}deg);\n                            opacity: 0;\n                            transition: all ${this.timing.lPiecePlacement * this.animationSpeed}ms cubic-bezier(0.34, 1.56, 0.64, 1);\n                            z-index: 10;\n                            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n                        `;\n                        \n                        // Add special styling for anchor piece\n                        if (index === 0) {\n                            piece.style.borderWidth = '3px';\n                            piece.style.boxShadow = `0 2px 12px ${player === 1 ? 'rgba(59, 130, 246, 0.5)' : 'rgba(239, 68, 68, 0.5)'}`;\n                        }\n                        \n                        cell.appendChild(piece);\n                        \n                        // Trigger animation\n                        requestAnimationFrame(() => {\n                            piece.style.transform = 'scale(1) rotate(0deg)';\n                            piece.style.opacity = '1';\n                        });\n                        \n                        // Handle animation completion\n                        const handleTransitionEnd = () => {\n                            piece.removeEventListener('transitionend', handleTransitionEnd);\n                            animationsCompleted++;\n                            \n                            if (animationsCompleted >= totalAnimations) {\n                                resolve();\n                            }\n                        };\n                        \n                        piece.addEventListener('transitionend', handleTransitionEnd);\n                        \n                        // Fallback timeout\n                        setTimeout(() => {\n                            piece.removeEventListener('transitionend', handleTransitionEnd);\n                            animationsCompleted++;\n                            if (animationsCompleted >= totalAnimations) {\n                                resolve();\n                            }\n                        }, this.timing.lPiecePlacement * this.animationSpeed + 100);\n                        \n                    }, index * 50); // Stagger each segment by 50ms\n                }\n            });\n            \n            // Fallback if no cells found\n            if (totalAnimations === 0) {\n                resolve();\n            }\n        });\n    }\n    \n    /**\n     * Animate L-piece removal with smooth fade-out\n     * @param {number} player - Player number (1 or 2)\n     */\n    async animateLPieceRemoval(player) {\n        return new Promise((resolve) => {\n            const pieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${player}\"]`);\n            \n            if (pieces.length === 0) {\n                resolve();\n                return;\n            }\n            \n            console.log(`🎬 Animating L-piece removal: Player ${player}`);\n            \n            let animationsCompleted = 0;\n            const totalAnimations = pieces.length;\n            \n            pieces.forEach((piece, index) => {\n                setTimeout(() => {\n                    piece.style.transition = `all ${this.timing.lPiecePlacement * this.animationSpeed}ms ease-out`;\n                    piece.style.transform = 'scale(0.8) rotate(45deg)';\n                    piece.style.opacity = '0';\n                    \n                    const handleTransitionEnd = () => {\n                        piece.removeEventListener('transitionend', handleTransitionEnd);\n                        if (piece.parentNode) {\n                            piece.parentNode.removeChild(piece);\n                        }\n                        animationsCompleted++;\n                        \n                        if (animationsCompleted >= totalAnimations) {\n                            resolve();\n                        }\n                    };\n                    \n                    piece.addEventListener('transitionend', handleTransitionEnd);\n                    \n                    // Fallback timeout\n                    setTimeout(() => {\n                        piece.removeEventListener('transitionend', handleTransitionEnd);\n                        if (piece.parentNode) {\n                            piece.parentNode.removeChild(piece);\n                        }\n                        animationsCompleted++;\n                        if (animationsCompleted >= totalAnimations) {\n                            resolve();\n                        }\n                    }, this.timing.lPiecePlacement * this.animationSpeed + 100);\n                    \n                }, index * 30); // Stagger removal\n            });\n        });\n    }\n    \n    /**\n     * Animate neutral piece placement\n     * @param {number} row - Row position (0-3)\n     * @param {number} col - Column position (0-3)\n     */\n    async animateNeutralPiecePlacement(row, col) {\n        return new Promise((resolve) => {\n            const cell = this.boardRenderer.getCellAt(row, col);\n            if (!cell) {\n                resolve();\n                return;\n            }\n            \n            console.log(`🎬 Animating neutral piece placement: ${row}, ${col}`);\n            \n            // Play placement sound\n            if (this.soundManager) {\n                this.soundManager.playNeutralPiecePlace();\n            }\n            \n            // Create neutral piece\n            const piece = document.createElement('div');\n            piece.className = 'neutral-piece';\n            piece.style.cssText = `\n                position: absolute;\n                top: 25%;\n                left: 25%;\n                right: 25%;\n                bottom: 25%;\n                background: radial-gradient(circle at 30% 30%, #ffffff, #e5e7eb);\n                border: 2px solid #9ca3af;\n                border-radius: 50%;\n                transform: scale(0);\n                opacity: 0;\n                transition: all ${this.timing.neutralPiece * this.animationSpeed}ms cubic-bezier(0.34, 1.56, 0.64, 1);\n                z-index: 8;\n                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n            `;\n            \n            cell.appendChild(piece);\n            \n            // Trigger animation\n            requestAnimationFrame(() => {\n                piece.style.transform = 'scale(1)';\n                piece.style.opacity = '1';\n            });\n            \n            // Handle animation completion\n            const handleTransitionEnd = () => {\n                piece.removeEventListener('transitionend', handleTransitionEnd);\n                resolve();\n            };\n            \n            piece.addEventListener('transitionend', handleTransitionEnd);\n            \n            // Fallback timeout\n            setTimeout(() => {\n                piece.removeEventListener('transitionend', handleTransitionEnd);\n                resolve();\n            }, this.timing.neutralPiece * this.animationSpeed + 100);\n        });\n    }\n    \n    /**\n     * Animate L-piece rotation preview\n     * @param {Array} positions - Array of [row, col] positions for L-piece\n     * @param {number} player - Player number (1 or 2)\n     * @param {number} newOrientation - New orientation (0-7)\n     */\n    showLPieceRotationPreview(positions, player, newOrientation) {\n        this.clearLPiecePreview();\n        \n        positions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.boardRenderer.getCellAt(row, col);\n            \n            if (cell) {\n                const preview = document.createElement('div');\n                preview.className = `l-piece-preview player-${player} ${index === 0 ? 'anchor' : 'segment'}`;\n                preview.style.cssText = `\n                    position: absolute;\n                    top: 15%;\n                    left: 15%;\n                    right: 15%;\n                    bottom: 15%;\n                    background: ${player === 1 ? 'rgba(59, 130, 246, 0.6)' : 'rgba(239, 68, 68, 0.6)'};\n                    border: 2px dashed ${player === 1 ? '#3b82f6' : '#ef4444'};\n                    border-radius: 4px;\n                    transform: rotate(${newOrientation * 45}deg);\n                    z-index: 12;\n                    pointer-events: none;\n                    animation: pulse-preview 1s infinite alternate;\n                `;\n                \n                cell.appendChild(preview);\n                this.previewElements.push(preview);\n            }\n        });\n        \n        console.log(`👻 L-piece rotation preview: Player ${player}, orientation ${newOrientation}`);\n    }\n    \n    /**\n     * Clear L-piece preview elements\n     */\n    clearLPiecePreview() {\n        this.previewElements.forEach(element => {\n            if (element.parentNode) {\n                element.parentNode.removeChild(element);\n            }\n        });\n        this.previewElements = [];\n    }\n    \n    /**\n     * Clear all L-pieces for a specific player\n     * @private\n     */\n    clearPlayerLPiece(player) {\n        const pieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${player}\"]`);\n        pieces.forEach(piece => {\n            if (piece.parentNode) {\n                piece.parentNode.removeChild(piece);\n            }\n        });\n    }\n    \n    /**\n     * Animate victory sequence for L-Game\n     * @param {number} winningPlayer - Winning player (1 or 2)\n     * @param {Array} blockingPositions - Positions that caused the win\n     */\n    async animateVictory(winningPlayer, blockingPositions = []) {\n        if (this.reducedMotion) {\n            // Simple highlight for reduced motion\n            const winnerPieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${winningPlayer}\"]`);\n            winnerPieces.forEach(piece => {\n                piece.classList.add('victory-glow');\n            });\n            return;\n        }\n        \n        console.log(`🏆 Animating L-Game victory for player ${winningPlayer}`);\n        \n        // Highlight winning player's L-piece\n        const winnerPieces = this.gameBoard.querySelectorAll(`.l-piece[data-player=\"${winningPlayer}\"]`);\n        for (let i = 0; i < winnerPieces.length; i++) {\n            setTimeout(() => {\n                winnerPieces[i].classList.add('victory-piece');\n                \n                setTimeout(() => {\n                    winnerPieces[i].classList.add('victory-glow');\n                }, this.timing.victoryReveal);\n            }, i * this.timing.victoryStagger);\n        }\n        \n        // Highlight blocking positions if any\n        blockingPositions.forEach((pos, index) => {\n            const [row, col] = pos;\n            const cell = this.boardRenderer.getCellAt(row, col);\n            if (cell) {\n                setTimeout(() => {\n                    cell.classList.add('blocking-highlight');\n                }, (winnerPieces.length * this.timing.victoryStagger) + (index * 50));\n            }\n        });\n        \n        // Trigger celebration after highlights\n        setTimeout(() => {\n            this.triggerLGameCelebration(winningPlayer);\n        }, this.timing.victoryReveal + (winnerPieces.length * this.timing.victoryStagger));\n    }\n    \n    /**\n     * Trigger L-Game specific celebration effects\n     * @param {number} winningPlayer - Winning player (1 or 2)\n     */\n    triggerLGameCelebration(winningPlayer) {\n        if (this.reducedMotion || this.celebrationActive) return;\n        \n        this.celebrationActive = true;\n        console.log(`🎉 Triggering L-Game celebration for player ${winningPlayer}`);\n        \n        try {\n            // Play victory sound\n            if (this.soundManager) {\n                this.soundManager.playVictory();\n            }\n            \n            // Trigger confetti particles\n            if (this.particleEngine) {\n                const gameBoard = this.gameBoard;\n                const rect = gameBoard.getBoundingClientRect();\n                \n                const centerX = rect.left + rect.width / 2;\n                const centerY = rect.top + rect.height / 2;\n                \n                // Player-specific colors for L-Game\n                const confettiColors = winningPlayer === 1 ? \n                    ['#3b82f6', '#1d4ed8', '#60a5fa', '#1e40af', '#93c5fd'] :\n                    ['#ef4444', '#dc2626', '#f87171', '#b91c1c', '#fca5a5'];\n                    \n                // Create celebration burst\n                this.particleEngine.createCelebrationBurst({\n                    x: centerX,\n                    y: centerY,\n                    pattern: 'explosion',\n                    particleCount: 50, // Moderate for 4x4 game\n                    colors: confettiColors\n                });\n                \n            } else {\n                // Fallback: Simple DOM celebration for L-Game\n                const celebrationDiv = document.createElement('div');\n                celebrationDiv.innerHTML = winningPlayer === 1 ? '🔵🎉✨' : '🔴🎉✨';\n                celebrationDiv.style.cssText = `\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    font-size: 2.5rem;\n                    z-index: 9999;\n                    animation: l-game-celebration 2s ease-out forwards;\n                    pointer-events: none;\n                `;\n                \n                // Add keyframes for L-Game celebration\n                if (!document.getElementById('l-game-celebration-keyframes')) {\n                    const style = document.createElement('style');\n                    style.id = 'l-game-celebration-keyframes';\n                    style.textContent = `\n                        @keyframes l-game-celebration {\n                            0% { opacity: 1; transform: translate(-50%, -50%) scale(0.5) rotate(0deg); }\n                            50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2) rotate(180deg); }\n                            100% { opacity: 0; transform: translate(-50%, -50%) scale(1.5) rotate(360deg); }\n                        }\n                        @keyframes pulse-preview {\n                            0% { opacity: 0.6; }\n                            100% { opacity: 1.0; }\n                        }\n                    `;\n                    document.head.appendChild(style);\n                }\n                \n                this.gameBoard.style.position = 'relative';\n                this.gameBoard.appendChild(celebrationDiv);\n                \n                setTimeout(() => {\n                    if (celebrationDiv.parentNode) {\n                        celebrationDiv.parentNode.removeChild(celebrationDiv);\n                    }\n                }, 2000);\n            }\n            \n        } catch (error) {\n            console.warn('⚠️ L-Game celebration error:', error.message);\n        } finally {\n            // Reset celebration state\n            setTimeout(() => {\n                this.celebrationActive = false;\n            }, this.timing.confettiDuration);\n        }\n    }\n    \n    /**\n     * Animate cell hover feedback for L-Game\n     * @param {number} row - Row position (0-3)\n     * @param {number} col - Column position (0-3)\n     */\n    animateCellHover(row, col) {\n        if (this.reducedMotion) return;\n        \n        const cell = this.boardRenderer.getCellAt(row, col);\n        if (!cell) return;\n        \n        // Create hover ripple effect\n        const ripple = document.createElement('div');\n        ripple.className = 'cell-hover-ripple';\n        ripple.style.cssText = `\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            background: rgba(59, 130, 246, 0.3);\n            transform: translate(-50%, -50%) scale(0);\n            animation: cell-ripple-expand 0.5s ease-out;\n            pointer-events: none;\n            z-index: 5;\n        `;\n        \n        cell.style.position = 'relative';\n        cell.appendChild(ripple);\n        \n        // Remove ripple after animation\n        setTimeout(() => {\n            if (ripple.parentNode) {\n                ripple.parentNode.removeChild(ripple);\n            }\n        }, 500);\n    }\n    \n    /**\n     * Queue animation for smooth sequencing\n     * @param {Function} animationFunction - Animation function to execute\n     */\n    queueAnimation(animationFunction) {\n        this.animationQueue.push(animationFunction);\n        this.processAnimationQueue();\n    }\n    \n    /**\n     * Process animation queue\n     * @private\n     */\n    async processAnimationQueue() {\n        if (this.isAnimating || this.animationQueue.length === 0) {\n            return;\n        }\n        \n        this.isAnimating = true;\n        \n        while (this.animationQueue.length > 0) {\n            const animation = this.animationQueue.shift();\n            try {\n                await animation();\n            } catch (error) {\n                console.error('❌ L-Game animation error:', error);\n            }\n        }\n        \n        this.isAnimating = false;\n    }\n    \n    /**\n     * Clear all visual effects (for new game)\n     */\n    clearAllEffects() {\n        console.log('🧹 Clearing all L-Game visual effects for new game...');\n        \n        // Clear celebration state\n        this.celebrationActive = false;\n        \n        // Clear particle effects\n        if (this.particleEngine) {\n            this.particleEngine.clearCanvas();\n        }\n        \n        // Clear any pending animations\n        this.animationQueue = [];\n        this.isAnimating = false;\n        \n        // Clear previews\n        this.clearLPiecePreview();\n        \n        // Remove all game pieces\n        const allPieces = this.gameBoard.querySelectorAll('.l-piece, .neutral-piece');\n        allPieces.forEach(piece => {\n            if (piece.parentNode) {\n                piece.parentNode.removeChild(piece);\n            }\n        });\n        \n        // Clear all highlights\n        const highlightedCells = this.gameBoard.querySelectorAll('.victory-glow, .blocking-highlight');\n        highlightedCells.forEach(cell => {\n            cell.classList.remove('victory-glow', 'blocking-highlight');\n        });\n        \n        console.log('✅ All L-Game visual effects cleared');\n    }\n    \n    /**\n     * Get current animation state\n     */\n    getAnimationState() {\n        return {\n            isAnimating: this.isAnimating,\n            queueLength: this.animationQueue.length,\n            celebrationActive: this.celebrationActive,\n            previewElementsCount: this.previewElements.length,\n            reducedMotion: this.reducedMotion\n        };\n    }\n    \n    /**\n     * Cleanup all animations and remove event listeners\n     */\n    destroy() {\n        // Clear animation queue\n        this.animationQueue = [];\n        this.isAnimating = false;\n        \n        // Clear previews\n        this.clearLPiecePreview();\n        \n        // Clear all effects\n        this.clearAllEffects();\n        \n        // Cleanup premium effects\n        if (this.particleEngine) {\n            this.particleEngine.destroy();\n            this.particleEngine = null;\n        }\n        \n        if (this.soundManager) {\n            this.soundManager.destroy();\n            this.soundManager = null;\n        }\n        \n        this.celebrationActive = false;\n        \n        console.log('🎬 L-Game AnimationManager destroyed with premium effects cleanup');\n    }\n}\n\n// Add dynamic CSS for L-Game animations\nconst style = document.createElement('style');\nstyle.textContent = `\n@keyframes cell-ripple-expand {\n    0% {\n        transform: translate(-50%, -50%) scale(0);\n        opacity: 0.8;\n    }\n    100% {\n        transform: translate(-50%, -50%) scale(3);\n        opacity: 0;\n    }\n}\n\n.l-piece.victory-piece {\n    animation: victory-pulse 0.8s infinite alternate;\n}\n\n.l-piece.victory-glow {\n    box-shadow: 0 0 20px currentColor, 0 0 40px currentColor !important;\n    transform: scale(1.1) !important;\n}\n\n.blocking-highlight {\n    background: rgba(255, 255, 0, 0.3) !important;\n    animation: blocking-flash 1s infinite alternate;\n}\n\n@keyframes victory-pulse {\n    0% { transform: scale(1); }\n    100% { transform: scale(1.05); }\n}\n\n@keyframes blocking-flash {\n    0% { background: rgba(255, 255, 0, 0.3) !important; }\n    100% { background: rgba(255, 255, 0, 0.6) !important; }\n}\n`;\ndocument.head.appendChild(style);","/**\n * LGameUI - L-Game Production UI Controller with BitPacked Engine\n * \n * Implements the complete 3-layer architecture with BitPacked WASM integration.\n * Following Connect4 goldstandard pattern for L-Game.\n * \n * Architecture:\n * - LAYER 1: WASM/Rust (3x BitPackedBoard<4,4,1> via LGameEngineBitPacked)\n * - LAYER 2: Game Logic/JavaScript (ui-production.js)\n * - LAYER 3: UI/Frontend (components + interactions)\n * \n * Features:\n * - L-piece placement with 8 orientations\n * - Neutral piece movement\n * - BitPacked game state management\n * - Blockade victory detection\n * - Performance tracking\n * - Keyboard shortcuts\n * - Modal system\n */\n\n// Import BitPacked engine and L-Game specific components\nimport { LGameEngineBitPacked } from './LGameEngineBitPacked.js';\nimport { LGameBoardRenderer } from './components/LGameBoardRenderer.js';\nimport { LGameInteractionHandler } from './components/LGameInteractionHandler.js';\nimport { LGameAnimationManager } from './components/LGameAnimationManager.js';\n\nexport class LGameUI {\n    constructor(gameEngine = null) {\n        // Initialize BitPacked engine if none provided\n        this.gameEngine = gameEngine || new LGameEngineBitPacked();\n        this.isInitialized = false;\n        \n        // Component instances\n        this.boardRenderer = null;\n        this.interactionHandler = null;\n        this.animationManager = null;\n        \n        // Game state\n        this.currentPlayer = 1; // 1=Yellow, 2=Red\n        this.gameOver = false;\n        this.moveCount = 0;\n        this.gameHistory = [];\n        \n        // L-Game specific interaction state\n        this.selectedLPiece = null;\n        this.interactionMode = 'L_PIECE'; // 'L_PIECE' or 'NEUTRAL_PIECE'\n        this.currentOrientation = 0; // 0-7 for L-piece orientations\n        \n        // Move phases\n        this.movePhase = 'l-piece'; // 'l-piece' → 'neutral' → 'complete'\n        this.pendingNeutralMove = null;\n        \n        // Player assistance settings\n        this.assistanceSettings = {\n            player1: {\n                hints: false,\n                validMoves: false,\n                undo: true\n            },\n            player2: {\n                hints: false,\n                validMoves: false,\n                undo: true\n            }\n        };\n        \n        // Score tracking\n        this.scores = { player1: 0, player2: 0 };\n        \n        // Performance tracking\n        this.performanceStats = {\n            totalMoves: 0,\n            averageMoveTime: 0,\n            memoryUsage: 0\n        };\n        \n        console.log('🧩 L-Game UI initialized with BitPacked engine');\n    }\n\n    /**\n     * Initialize the complete UI system with BitPacked engine\n     */\n    async init() {\n        try {\n            console.log('🚀 Initializing L-Game Production UI with BitPacked engine...');\n            \n            // Initialize BitPacked game engine first\n            await this.initializeBitPackedEngine();\n            \n            // Initialize core UI components\n            await this.initializeComponents();\n            \n            // Setup board rendering\n            await this.setupBoard();\n            \n            // Setup interactions\n            this.setupInteractions();\n            \n            // Setup UI controls\n            this.setupUIControls();\n            \n            // Setup keyboard shortcuts\n            this.setupKeyboardShortcuts();\n            \n            // Setup modal system\n            this.setupModalSystem();\n            \n            // Setup game engine event listeners\n            this.setupGameEngineEvents();\n            \n            // Initialize game state and load initial board configuration\n            this.initializeGameState();\n            \n            // Load and display the initial L-Game configuration from WASM\n            await this.loadInitialGameConfiguration();\n            \n            this.isInitialized = true;\n            console.log('✅ L-Game Production UI with BitPacked engine fully initialized');\n            \n            return true;\n            \n        } catch (error) {\n            console.error('❌ L-Game UI initialization failed:', error);\n            this.showMessage('UI-System konnte nicht geladen werden.', 'error');\n            return false;\n        }\n    }\n\n    /**\n     * Initialize BitPacked game engine\n     * @private\n     */\n    async initializeBitPackedEngine() {\n        if (!this.gameEngine.initialized) {\n            console.log('🧩 Initializing BitPacked L-Game engine...');\n            await this.gameEngine.init();\n            \n            // Update performance stats\n            this.performanceStats = this.gameEngine.getPerformanceStats();\n            console.log('✅ BitPacked engine initialized:', this.performanceStats);\n        }\n    }\n\n    /**\n     * Initialize core components\n     * @private\n     */\n    async initializeComponents() {\n        const gameBoard = document.getElementById('gameBoard');\n        if (!gameBoard) {\n            throw new Error('Game board element not found');\n        }\n        \n        // Initialize board renderer\n        this.boardRenderer = new LGameBoardRenderer(gameBoard);\n        await this.boardRenderer.init();\n        \n        // Initialize interaction handler\n        this.interactionHandler = new LGameInteractionHandler(this.boardRenderer, gameBoard);\n        \n        // Initialize animation manager\n        this.animationManager = new LGameAnimationManager(gameBoard, this.boardRenderer);\n        \n        console.log('✅ L-Game core components initialized');\n    }\n\n    /**\n     * Setup 4x4 L-Game board\n     * @private\n     */\n    async setupBoard() {\n        await this.boardRenderer.createBoard();\n        console.log('✅ L-Game board setup complete');\n    }\n\n    /**\n     * Setup user interactions\n     * @private\n     */\n    setupInteractions() {\n        // Setup cell interactions\n        this.interactionHandler.setupCellInteractions();\n        this.interactionHandler.setupKeyboardInteractions();\n        \n        // Set interaction callbacks\n        this.interactionHandler.setCallbacks({\n            onCellClick: (row, col, mode, selectedPiece, orientation) => {\n                this.handleCellClick(row, col, mode, selectedPiece, orientation);\n            },\n            onCellHover: (row, col) => {\n                this.handleCellHover(row, col);\n            },\n            onCellHoverLeave: () => {\n                this.handleCellHoverLeave();\n            },\n            onLPieceSelect: (player) => {\n                this.handleLPieceSelect(player);\n            }\n        });\n        \n        console.log('✅ L-Game interactions setup complete');\n    }\n\n    /**\n     * Setup UI controls (buttons, selectors)\n     * @private\n     */\n    setupUIControls() {\n        // New Game button\n        const newGameBtn = document.getElementById('newGameBtn');\n        if (newGameBtn) {\n            newGameBtn.addEventListener('click', () => this.startNewGame());\n        }\n        \n        // Undo button\n        const undoBtn = document.getElementById('undoBtn');\n        if (undoBtn) {\n            undoBtn.addEventListener('click', () => this.undoLastMove());\n        }\n        \n        // Help button\n        const helpBtn = document.getElementById('helpBtn');\n        if (helpBtn) {\n            helpBtn.addEventListener('click', () => this.showHelpModal());\n        }\n        \n        // Assistance button\n        const assistanceBtn = document.getElementById('assistanceBtn');\n        if (assistanceBtn) {\n            assistanceBtn.addEventListener('click', () => this.showAssistanceModal());\n        }\n        \n        // L-piece selection buttons (if available)\n        const player1Button = document.getElementById('selectPlayer1LPiece');\n        if (player1Button) {\n            player1Button.addEventListener('click', () => this.selectLPiece(1));\n        }\n        \n        const player2Button = document.getElementById('selectPlayer2LPiece');\n        if (player2Button) {\n            player2Button.addEventListener('click', () => this.selectLPiece(2));\n        }\n        \n        console.log('✅ L-Game UI controls setup complete');\n    }\n\n    /**\n     * Setup keyboard shortcuts\n     * @private\n     */\n    setupKeyboardShortcuts() {\n        document.addEventListener('keydown', (event) => {\n            // Prevent shortcuts when typing in inputs\n            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\n                return;\n            }\n            \n            switch (event.key.toLowerCase()) {\n                case 'n':\n                    this.startNewGame();\n                    event.preventDefault();\n                    break;\n                case 'u':\n                    this.undoLastMove();\n                    event.preventDefault();\n                    break;\n                case 'r':\n                    this.rotateCurrentLPiece();\n                    event.preventDefault();\n                    break;\n                case '1':\n                    this.selectLPiece(1);\n                    event.preventDefault();\n                    break;\n                case '2':\n                    this.selectLPiece(2);\n                    event.preventDefault();\n                    break;\n                case 'l':\n                    this.setInteractionMode('L_PIECE');\n                    event.preventDefault();\n                    break;\n                case 'space':\n                    this.setInteractionMode('NEUTRAL_PIECE');\n                    event.preventDefault();\n                    break;\n                case 'f1':\n                    this.showHelpModal();\n                    event.preventDefault();\n                    break;\n                case 'f2':\n                    this.showAssistanceModal();\n                    event.preventDefault();\n                    break;\n            }\n        });\n        \n        console.log('✅ L-Game keyboard shortcuts setup complete');\n    }\n\n    /**\n     * Setup game engine event listeners\n     * @private\n     */\n    setupGameEngineEvents() {\n        // Listen to BitPacked engine events\n        this.gameEngine.on('move', (data) => {\n            this.onEngineMove(data);\n        });\n\n        this.gameEngine.on('lPieceMove', (data) => {\n            this.onEngineLPieceMove(data);\n        });\n\n        this.gameEngine.on('neutralMove', (data) => {\n            this.onEngineNeutralMove(data);\n        });\n\n        this.gameEngine.on('gameOver', (data) => {\n            this.onEngineGameOver(data);\n        });\n\n        this.gameEngine.on('newGame', (data) => {\n            this.onEngineNewGame(data);\n        });\n\n        console.log('✅ Game engine events setup complete');\n    }\n\n    /**\n     * Handle cell click for L-Game moves\n     * @private\n     */\n    async handleCellClick(row, col, mode, selectedPiece, orientation) {\n        if (this.gameOver) {\n            console.log('Game is over, ignoring click');\n            return;\n        }\n        \n        try {\n            // Check if clicked on own L-piece to select it\n            const boardState = this.gameEngine.getBoard();\n            const cellValue = boardState[row][col];\n            \n            if (cellValue === this.currentPlayer) {\n                // Clicked on own L-piece - select it for movement\n                this.selectLPiece(this.currentPlayer);\n                this.showMessage(`L-Stück Spieler ${this.currentPlayer} ausgewählt. Klicken Sie auf eine neue Position.`, 'info');\n                return;\n            }\n            \n            if (mode === 'L_PIECE' && selectedPiece) {\n                await this.placeLPiece(row, col, selectedPiece, orientation);\n            } else if (mode === 'NEUTRAL_PIECE') {\n                await this.placeNeutralPiece(row, col);\n            } else {\n                this.showMessage('Klicken Sie zuerst auf Ihr L-Stück, dann auf die neue Position.', 'info');\n            }\n        } catch (error) {\n            console.error('❌ Cell click error:', error);\n            this.showMessage('Zug konnte nicht ausgeführt werden.', 'error');\n        }\n    }\n\n    /**\n     * Handle cell hover\n     * @private\n     */\n    handleCellHover(row, col) {\n        this.animationManager.animateCellHover(row, col);\n    }\n\n    /**\n     * Handle cell hover leave\n     * @private\n     */\n    handleCellHoverLeave() {\n        // Clear any hover effects\n    }\n\n    /**\n     * Handle L-piece selection\n     * @private\n     */\n    handleLPieceSelect(player) {\n        // Avoid infinite recursion - set state directly without calling selectLPiece\n        this.selectedLPiece = player;\n        this.setInteractionMode('L_PIECE');\n        this.updateCurrentPlayerDisplay();\n        console.log(`L-piece selected for player ${player} (via interaction handler)`);\n    }\n\n    /**\n     * Place L-piece on the board using BitPacked engine\n     * @private\n     */\n    async placeLPiece(anchorRow, anchorCol, player, orientation) {\n        try {\n            // Make move directly with BitPacked engine\n            const result = this.gameEngine.makeMove(anchorRow, anchorCol, orientation);\n            \n            // Animate L-piece placement\n            if (this.animationManager) {\n                const positions = this.calculateLPiecePositions(anchorRow, anchorCol, orientation);\n                await this.animationManager.animateLPiecePlacement(positions, player, orientation);\n            }\n            \n            // Update board visualization\n            await this.updateBoardFromEngine();\n            \n            // Update UI state\n            this.moveCount = result.moveNumber;\n            this.currentPlayer = result.currentPlayer;\n            this.gameOver = result.isGameOver;\n            \n            // Update display\n            this.updateGameDisplay();\n            \n            // Check for victory\n            if (result.isGameOver) {\n                await this.handleGameEnd(result.winner);\n            } else {\n                // Proceed to neutral piece phase (optional)\n                this.movePhase = 'neutral';\n                this.updateGameStatus('Neutraler Stein bewegen (optional)');\n            }\n            \n            console.log(`✅ L-piece placed: Player ${this.gameEngine.getPlayerName(player)} at (${anchorRow},${anchorCol}) orientation ${orientation}`);\n            \n        } catch (error) {\n            console.error('❌ L-piece placement failed:', error);\n            this.showMessage(`Ungültiger L-Stück Zug: ${error.message}`, 'warning');\n        }\n    }\n\n    /**\n     * Place neutral piece on the board using BitPacked engine\n     * @private\n     */\n    async placeNeutralPiece(row, col) {\n        try {\n            // Check if there's a neutral piece to move\n            const neutralPieces = this.gameEngine.getNeutralPieces();\n            if (neutralPieces.length === 0) {\n                this.showMessage('Keine neutralen Steine zum Bewegen verfügbar.', 'warning');\n                return;\n            }\n            \n            // For now, move the first neutral piece found to the target position\n            const fromPos = neutralPieces[0];\n            \n            // Make neutral piece move\n            const result = this.gameEngine.moveNeutralPiece(fromPos.row, fromPos.col, row, col);\n            \n            // Animate neutral piece movement\n            if (this.animationManager) {\n                await this.animationManager.animateNeutralPieceMovement(fromPos.row, fromPos.col, row, col);\n            }\n            \n            // Update board visualization\n            await this.updateBoardFromEngine();\n            \n            // Complete the turn\n            this.movePhase = 'complete';\n            this.updateGameStatus('Zug abgeschlossen - nächster Spieler');\n            \n            console.log(`✅ Neutral piece moved from (${fromPos.row},${fromPos.col}) to (${row},${col})`);\n            \n        } catch (error) {\n            console.error('❌ Neutral piece placement failed:', error);\n            this.showMessage(`Neutraler Stein konnte nicht bewegt werden: ${error.message}`, 'warning');\n        }\n    }\n\n    /**\n     * Calculate L-piece positions based on anchor and orientation\n     * @private\n     */\n    calculateLPiecePositions(anchorRow, anchorCol, orientation) {\n        // L-piece orientations (relative to anchor point)\n        const orientations = [\n            [[0, 0], [1, 0], [2, 0], [0, 1]], // L (normal)\n            [[0, 0], [0, 1], [0, 2], [1, 0]], // L (rotated 90°)\n            [[0, 0], [0, 1], [1, 1], [2, 1]], // L (rotated 180°)\n            [[0, 0], [1, 0], [1, -1], [1, -2]], // L (rotated 270°)\n            [[0, 0], [1, 0], [2, 0], [0, -1]], // L (flipped)\n            [[0, 0], [0, 1], [0, 2], [-1, 0]], // L (flipped + 90°)\n            [[0, 0], [0, -1], [1, -1], [2, -1]], // L (flipped + 180°)\n            [[0, 0], [-1, 0], [-1, 1], [-1, 2]]  // L (flipped + 270°)\n        ];\n        \n        const relativePositions = orientations[orientation % 8];\n        return relativePositions.map(([dRow, dCol]) => [\n            anchorRow + dRow,\n            anchorCol + dCol\n        ]);\n    }\n\n    /**\n     * Select L-piece for placement\n     */\n    selectLPiece(player) {\n        this.selectedLPiece = player;\n        this.interactionHandler.selectLPiece(player);\n        this.setInteractionMode('L_PIECE');\n        this.updateCurrentPlayerDisplay();\n        \n        console.log(`Selected L-piece for player ${player}`);\n    }\n\n    /**\n     * Rotate current L-piece orientation\n     */\n    rotateCurrentLPiece() {\n        this.currentOrientation = (this.currentOrientation + 1) % 8;\n        this.interactionHandler.rotateCurrentLPiece();\n        \n        console.log(`Rotated L-piece to orientation ${this.currentOrientation}`);\n    }\n\n    /**\n     * Set interaction mode\n     */\n    setInteractionMode(mode) {\n        this.interactionMode = mode;\n        this.interactionHandler.setInteractionMode(mode);\n        \n        console.log(`Interaction mode set to: ${mode}`);\n    }\n\n    /**\n     * Switch to next player\n     * @private\n     */\n    switchPlayer() {\n        this.currentPlayer = this.currentPlayer === 1 ? 2 : 1;\n        this.selectedLPiece = this.currentPlayer; // Auto-select current player's L-piece\n        this.updateCurrentPlayerDisplay();\n    }\n\n    /**\n     * Proceed to next game phase\n     * @private\n     */\n    proceedToNextPhase() {\n        // In L-Game, after L-piece placement, player may need to place neutral pieces\n        // This depends on the specific L-Game variant being implemented\n        this.setInteractionMode('NEUTRAL_PIECE');\n    }\n\n    /**\n     * Handle game end\n     * @private\n     */\n    async handleGameEnd(winningPlayer) {\n        this.gameOver = true;\n        this.scores[`player${winningPlayer}`]++;\n        \n        // Animate victory\n        await this.animationManager.animateVictory(winningPlayer);\n        \n        // Update display\n        this.updateScoreDisplay();\n        this.updateGameStatus(`Spieler ${winningPlayer} gewinnt!`);\n        \n        // Show victory message\n        this.showMessage(`🎉 Spieler ${winningPlayer} hat gewonnen!`, 'success');\n        \n        console.log(`🏆 Game ended: Player ${winningPlayer} wins!`);\n    }\n\n    /**\n     * Start new game with BitPacked engine\n     */\n    async startNewGame() {\n        try {\n            // Reset game engine\n            this.gameEngine.newGame();\n            \n            // Reset UI state\n            this.gameOver = false;\n            this.moveCount = 0;\n            this.currentPlayer = 1;\n            this.selectedLPiece = 1;\n            this.interactionMode = 'L_PIECE';\n            this.currentOrientation = 0;\n            this.movePhase = 'l-piece';\n            this.pendingNeutralMove = null;\n            this.gameHistory = [];\n            \n            // Clear visual effects\n            if (this.animationManager) {\n                this.animationManager.clearAllEffects();\n            }\n            \n            // Reset board\n            if (this.boardRenderer) {\n                await this.boardRenderer.clearBoard();\n                await this.boardRenderer.createBoard();\n            }\n            \n            // Update board from engine state\n            await this.updateBoardFromEngine();\n            \n            // Update display\n            this.updateGameDisplay();\n            this.updateGameStatus('Neues L-Game gestartet - L-Stück setzen');\n            \n            console.log('✅ New L-Game started with BitPacked engine');\n            \n        } catch (error) {\n            console.error('❌ Failed to start new game:', error);\n            this.showMessage('Neues Spiel konnte nicht gestartet werden.', 'error');\n        }\n    }\n\n    /**\n     * Update board visualization from BitPacked engine state\n     * @private\n     */\n    async updateBoardFromEngine() {\n        if (!this.gameEngine || !this.boardRenderer) return;\n        \n        const boardState = this.gameEngine.getBoard();\n        if (!boardState) return;\n        \n        // Clear current board\n        await this.boardRenderer.clearBoard();\n        \n        // Group cells by piece type and player\n        const player1Cells = [];\n        const player2Cells = [];\n        const neutralCells = [];\n        \n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 4; col++) {\n                const cellValue = boardState[row][col];\n                if (cellValue === 1) {\n                    player1Cells.push([row, col]);\n                } else if (cellValue === 2) {\n                    player2Cells.push([row, col]);\n                } else if (cellValue === 3) {\n                    neutralCells.push([row, col]);\n                }\n            }\n        }\n        \n        // Place L-pieces\n        if (player1Cells.length > 0) {\n            this.boardRenderer.placeLPiece('player1', player1Cells, 0);\n        }\n        if (player2Cells.length > 0) {\n            this.boardRenderer.placeLPiece('player2', player2Cells, 0);\n        }\n        \n        // Place neutral pieces\n        neutralCells.forEach(([row, col], index) => {\n            this.boardRenderer.placeNeutralPiece(`neutral${index + 1}`, row, col);\n        });\n        \n        console.log(`🎨 Board updated: ${player1Cells.length} player1, ${player2Cells.length} player2, ${neutralCells.length} neutral pieces`);\n    }\n\n    /**\n     * Undo last move\n     */\n    async undoLastMove() {\n        if (this.moveCount === 0) {\n            this.showMessage('Keine Züge zum Rückgängigmachen.', 'info');\n            return;\n        }\n        \n        try {\n            const result = await this.gameEngine.undoMove();\n            if (result.success) {\n                this.moveCount--;\n                this.updateGameDisplay();\n                this.showMessage('Zug rückgängig gemacht.', 'info');\n            } else {\n                this.showMessage('Zug konnte nicht rückgängig gemacht werden.', 'warning');\n            }\n        } catch (error) {\n            console.error('❌ Undo failed:', error);\n            this.showMessage('Fehler beim Rückgängigmachen.', 'error');\n        }\n    }\n\n    /**\n     * Initialize game state\n     * @private\n     */\n    initializeGameState() {\n        this.updateGameDisplay();\n        this.updateGameStatus('Bereit zum Spielen');\n        this.selectLPiece(1); // Start with player 1\n    }\n\n    /**\n     * Load initial L-Game configuration from WASM engine\n     * @private\n     */\n    async loadInitialGameConfiguration() {\n        try {\n            console.log('🎯 Loading initial L-Game configuration...');\n            \n            // Get the initial board state from WASM engine\n            await this.updateBoardFromEngine();\n            \n            // Update game display to reflect initial state\n            this.updateGameDisplay();\n            this.updateGameStatus('L-Game bereit - Spieler 1 beginnt');\n            \n            console.log('✅ Initial L-Game configuration loaded');\n            \n        } catch (error) {\n            console.error('❌ Failed to load initial L-Game configuration:', error);\n            // Continue anyway - game will work with empty board\n        }\n    }\n\n    /**\n     * Update game display\n     * @private\n     */\n    updateGameDisplay() {\n        this.updateMoveCounter();\n        this.updateCurrentPlayerDisplay();\n        this.updateScoreDisplay();\n    }\n\n    /**\n     * Update move counter\n     * @private\n     */\n    updateMoveCounter() {\n        const moveCounter = document.getElementById('moveCounter');\n        if (moveCounter) {\n            moveCounter.textContent = this.moveCount;\n        }\n    }\n\n    /**\n     * Update current player display\n     * @private\n     */\n    updateCurrentPlayerDisplay() {\n        const currentPlayerDisplay = document.getElementById('currentPlayerDisplay');\n        const currentPlayerIndicator = document.getElementById('currentPlayerIndicator');\n        \n        if (currentPlayerDisplay) {\n            currentPlayerDisplay.innerHTML = `\n                <span class=\"player-piece player-${this.currentPlayer}\"></span>\n                <span>Spieler ${this.currentPlayer}</span>\n            `;\n        }\n        \n        if (currentPlayerIndicator) {\n            currentPlayerIndicator.innerHTML = `\n                <span class=\"player-indicator active\">\n                    <span class=\"player-piece player-${this.currentPlayer}\"></span>\n                    Spieler ${this.currentPlayer} ist am Zug\n                </span>\n            `;\n        }\n    }\n\n    /**\n     * Update score display\n     * @private\n     */\n    updateScoreDisplay() {\n        const player1Score = document.getElementById('player1Score');\n        const player2Score = document.getElementById('player2Score');\n        \n        if (player1Score) {\n            player1Score.textContent = this.scores.player1;\n        }\n        \n        if (player2Score) {\n            player2Score.textContent = this.scores.player2;\n        }\n    }\n\n    /**\n     * Update game status\n     * @private\n     */\n    updateGameStatus(message) {\n        const gameStatus = document.getElementById('gameStatus');\n        if (gameStatus) {\n            gameStatus.textContent = message;\n        }\n    }\n\n    /**\n     * Show message to user\n     * @private\n     */\n    showMessage(message, type = 'info') {\n        console.log(`💬 ${type.toUpperCase()}: ${message}`);\n        \n        // Create message element\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `game-message message-${type}`;\n        messageDiv.textContent = message;\n        messageDiv.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${type === 'error' ? '#ef4444' : type === 'warning' ? '#f59e0b' : type === 'success' ? '#10b981' : '#3b82f6'};\n            color: white;\n            padding: 12px 16px;\n            border-radius: 8px;\n            z-index: 10000;\n            max-width: 300px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n        `;\n        \n        document.body.appendChild(messageDiv);\n        \n        // Remove message after 3 seconds\n        setTimeout(() => {\n            if (messageDiv.parentNode) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n        }, 3000);\n    }\n\n    /**\n     * Setup modal system\n     * @private\n     */\n    setupModalSystem() {\n        // Help modal handlers\n        const helpModal = document.getElementById('helpModal');\n        const closeHelpBtn = document.getElementById('closeHelpBtn');\n        const closeHelpFooterBtn = document.getElementById('closeHelpFooterBtn');\n        \n        if (closeHelpBtn) {\n            closeHelpBtn.addEventListener('click', () => this.hideModal('helpModal'));\n        }\n        \n        if (closeHelpFooterBtn) {\n            closeHelpFooterBtn.addEventListener('click', () => this.hideModal('helpModal'));\n        }\n        \n        // Assistance modal handlers\n        const assistanceModal = document.getElementById('assistanceModal');\n        const closeAssistanceBtn = document.getElementById('closeAssistanceBtn');\n        const closeAssistanceFooterBtn = document.getElementById('closeAssistanceFooterBtn');\n        \n        if (closeAssistanceBtn) {\n            closeAssistanceBtn.addEventListener('click', () => this.hideModal('assistanceModal'));\n        }\n        \n        if (closeAssistanceFooterBtn) {\n            closeAssistanceFooterBtn.addEventListener('click', () => this.hideModal('assistanceModal'));\n        }\n        \n        // Click outside to close\n        [helpModal, assistanceModal].forEach(modal => {\n            if (modal) {\n                modal.addEventListener('click', (e) => {\n                    if (e.target === modal) {\n                        this.hideModal(modal.id);\n                    }\n                });\n            }\n        });\n        \n        console.log('✅ L-Game modal system setup complete');\n    }\n\n    /**\n     * Show help modal\n     */\n    showHelpModal() {\n        this.showModal('helpModal');\n    }\n\n    /**\n     * Show assistance modal\n     */\n    showAssistanceModal() {\n        this.showModal('assistanceModal');\n    }\n\n    /**\n     * Show modal\n     * @private\n     */\n    showModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.style.display = 'flex';\n            modal.classList.remove('hidden');\n            document.body.style.overflow = 'hidden';\n        }\n    }\n\n    /**\n     * Hide modal\n     * @private\n     */\n    hideModal(modalId) {\n        const modal = document.getElementById(modalId);\n        if (modal) {\n            modal.style.display = 'none';\n            modal.classList.add('hidden');\n            document.body.style.overflow = '';\n        }\n    }\n\n    /**\n     * Get current game state\n     */\n    getGameState() {\n        return {\n            currentPlayer: this.currentPlayer,\n            gameOver: this.gameOver,\n            moveCount: this.moveCount,\n            scores: { ...this.scores },\n            selectedLPiece: this.selectedLPiece,\n            interactionMode: this.interactionMode,\n            currentOrientation: this.currentOrientation\n        };\n    }\n\n    /**\n     * Cleanup and destroy UI\n     */\n    destroy() {\n        // Destroy components\n        if (this.animationManager) {\n            this.animationManager.destroy();\n        }\n        \n        if (this.interactionHandler) {\n            this.interactionHandler.destroy();\n        }\n        \n        if (this.boardRenderer) {\n            this.boardRenderer.destroy();\n        }\n        \n        // Destroy game engine\n        if (this.gameEngine) {\n            this.gameEngine.destroy();\n        }\n        \n        // Clear state\n        this.isInitialized = false;\n        \n        console.log('🧹 L-Game UI destroyed');\n    }\n\n    // ==================== ENGINE EVENT HANDLERS ====================\n\n    /**\n     * Handle move event from BitPacked engine\n     * @private\n     */\n    onEngineMove(data) {\n        console.log('🎯 Engine move event:', data);\n        this.updateBoardFromEngine();\n        this.updateGameDisplay();\n    }\n\n    /**\n     * Handle L-piece move event from BitPacked engine\n     * @private\n     */\n    onEngineLPieceMove(data) {\n        console.log('🧩 Engine L-piece move:', data);\n        this.currentPlayer = data.currentPlayer;\n        this.moveCount = data.moveNumber;\n        \n        if (data.canMoveNeutral) {\n            this.movePhase = 'neutral';\n            this.updateGameStatus('Neutraler Stein bewegen (optional)');\n        } else {\n            this.movePhase = 'complete';\n        }\n        \n        this.updateGameDisplay();\n    }\n\n    /**\n     * Handle neutral move event from BitPacked engine\n     * @private\n     */\n    onEngineNeutralMove(data) {\n        console.log('🔘 Engine neutral move:', data);\n        this.movePhase = 'complete';\n        this.updateGameStatus('Zug abgeschlossen');\n        this.updateBoardFromEngine();\n    }\n\n    /**\n     * Handle game over event from BitPacked engine\n     * @private\n     */\n    onEngineGameOver(data) {\n        console.log('🏁 Engine game over:', data);\n        this.gameOver = true;\n        this.handleGameEnd(data.winner);\n    }\n\n    /**\n     * Handle new game event from BitPacked engine\n     * @private\n     */\n    onEngineNewGame(data) {\n        console.log('🆕 Engine new game:', data);\n        this.updateBoardFromEngine();\n        this.updateGameDisplay();\n    }\n}","\n        import { LGameUI } from './js/ui-production.js';\n        \n        async function initializeLGame() {\n            try {\n                console.log('🧩 Starting L-Game with BitPacked Engine...');\n                \n                // Hide loading overlay\n                const loadingOverlay = document.getElementById('loading-overlay');\n                const loadingProgress = document.getElementById('loading-progress');\n                \n                if (loadingProgress) {\n                    loadingProgress.textContent = 'BitPacked Engine wird initialisiert...';\n                }\n                \n                // Initialize UI with BitPacked engine\n                const ui = new LGameUI();\n                await ui.init();\n                \n                // Update system status\n                const wasmStatus = document.getElementById('wasm-status');\n                const gameEngineStatus = document.getElementById('game-engine-status');\n                \n                if (wasmStatus) {\n                    wasmStatus.textContent = 'Geladen';\n                    wasmStatus.className = 'font-bold text-green-600';\n                }\n                \n                if (gameEngineStatus) {\n                    gameEngineStatus.textContent = 'BitPacked Ready';\n                    gameEngineStatus.className = 'font-bold text-green-600';\n                }\n                \n                // Hide loading overlay\n                if (loadingOverlay) {\n                    loadingOverlay.style.display = 'none';\n                }\n                \n                // Make objects globally available for debugging\n                window.ui = ui;\n                window.gameEngine = ui.gameEngine;\n                \n                console.log('✅ L-Game BitPacked initialization complete!');\n                console.log('🎯 Performance:', ui.gameEngine.getPerformanceStats());\n                \n            } catch (error) {\n                console.error('❌ L-Game initialization failed:', error);\n                \n                // Show error modal\n                const errorModal = document.getElementById('error-modal');\n                const errorMessage = document.getElementById('error-message');\n                const loadingOverlay = document.getElementById('loading-overlay');\n                \n                if (loadingOverlay) {\n                    loadingOverlay.style.display = 'none';\n                }\n                \n                if (errorModal) {\n                    errorModal.classList.remove('hidden');\n                }\n                \n                if (errorMessage) {\n                    errorMessage.textContent = `BitPacked Engine Fehler: ${error.message}`;\n                }\n            }\n        }\n        \n        // Retry button handler\n        document.addEventListener('DOMContentLoaded', () => {\n            const retryButton = document.getElementById('retry-button');\n            const closeErrorButton = document.getElementById('close-error');\n            \n            if (retryButton) {\n                retryButton.addEventListener('click', () => {\n                    location.reload();\n                });\n            }\n            \n            if (closeErrorButton) {\n                closeErrorButton.addEventListener('click', () => {\n                    const errorModal = document.getElementById('error-modal');\n                    if (errorModal) {\n                        errorModal.classList.add('hidden');\n                    }\n                });\n            }\n        });\n        \n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initializeLGame);\n        } else {\n            initializeLGame();\n        }\n    "],"file":"assets/lgame-8ARrmcya.js"}