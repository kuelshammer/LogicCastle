<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="135" failures="20" errors="0" time="3.561909625">
    <testsuite name="tests/vitest/ai-strategy-dom-tests.vitest.js" timestamp="2025-06-23T20:10:14.888Z" hostname="Mac" tests="16" failures="0" errors="0" skipped="0" time="0.083088208">
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should handle strategic analysis integration" time="0.0126185">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should handle multiple consecutive moves without corruption" time="0.008646917">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should apply even/odd strategy with DOM feedback" time="0.007297791">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should detect Zugzwang situations with UI integration" time="0.006361042">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should analyze fork opportunities with DOM updates" time="0.002434">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should fallback to safe random with DOM state" time="0.002609541">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should maintain performance under complex board states" time="0.0047785">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should maintain move determinism for identical states" time="0.00115025">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should show differences between random vs strategic bots" time="0.007318958">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should show defensive vs offensive preferences" time="0.014052">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should prevent state corruption during analysis" time="0.001110584">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should handle cross-bot performance in complex positions" time="0.001364292">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should handle random fallback behavior with DOM" time="0.0010305">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should maintain multiple move sequence consistency" time="0.001175709">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should perform well with helper analysis integration" time="0.0012165">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should handle state isolation across multiple calls" time="0.008422958">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-matrix-demo.vitest.js" timestamp="2025-06-23T20:10:14.889Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="0.015959708">
        <testcase classname="tests/vitest/bot-matrix-demo.vitest.js" name="Bot Matrix Demo Tests &gt; Demo: 50-Game Bot Matrix with &quot;Verlierer beginnt&quot; Logic" time="0.015418791">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-performance-100-series.vitest.js" timestamp="2025-06-23T20:10:14.889Z" hostname="Mac" tests="6" failures="0" errors="0" skipped="0" time="0.153162125">
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should complete 100 games without errors (Easy vs Medium)" time="0.057651958">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should complete 100 games without errors (Medium vs Hard)" time="0.035658458">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should show skill differential (Hard vs Easy)" time="0.023885042">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Implementation Validation &gt; all bots should follow 4-stage decision process" time="0.007111917">
            <system-out>

🔧 Universal Logic Tests: 150/150 passed

            </system-out>
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Implementation Validation &gt; no bot should make illegal moves in extended play" time="0.006191333">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Performance Metrics &gt; game completion rate should be 100%" time="0.020111375">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-strength-comparison.vitest.js" timestamp="2025-06-23T20:10:14.890Z" hostname="Mac" tests="8" failures="2" errors="0" skipped="0" time="0.125985666">
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should beat Smart Random Bot majority of time" time="0.013008667">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should dominate Easy Bot" time="0.001513666">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Smart Random Bot should beat Easy Bot" time="0.000862125">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should have higher strategic move ratio" time="0.006210666">
            <failure message="expected 0.88 to be greater than 0.88" type="AssertionError">
AssertionError: expected 0.88 to be greater than 0.88
 ❯ tests/vitest/bot-strength-comparison.vitest.js:603:48
            </failure>
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; All bots should prefer strategic opening moves" time="0.000829792">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Bots should handle complex board states without crashing" time="0.001026125">
            <system-out>
Complex Board State Test:

            </system-out>
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Bot strength hierarchy should be maintained" time="0.013752083">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; 1000-Game Bot Matrix Analysis with &quot;Verlierer beginnt&quot; Logic" time="0.087583541">
            <failure message="expected 0 to be greater than 0.45" type="AssertionError">
AssertionError: expected 0 to be greater than 0.45
 ❯ tests/vitest/bot-strength-comparison.vitest.js:743:39
 ❯ tests/vitest/bot-strength-comparison.vitest.js:736:18
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-tournament.vitest.js" timestamp="2025-06-23T20:10:14.891Z" hostname="Mac" tests="3" failures="0" errors="0" skipped="0" time="0.07778025">
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should run complete tournament and establish rankings" time="0.022469208">
        </testcase>
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should validate Enhanced Smart Bot performance metrics" time="0.036216375">
        </testcase>
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should demonstrate strategic improvement over time" time="0.018518875">
            <system-out>

📈 Strategic Evolution Test...


            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/comprehensive-bot-matrix-5x5.vitest.js" timestamp="2025-06-23T20:10:14.891Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="0.439924291">
        <testcase classname="tests/vitest/comprehensive-bot-matrix-5x5.vitest.js" name="Comprehensive 5x5 Bot Matrix - 100 Game Series &gt; should run complete 5x5 matrix and generate performance table" time="0.438764583">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/debug-bot-matrix.vitest.js" timestamp="2025-06-23T20:10:14.891Z" hostname="Mac" tests="2" failures="0" errors="0" skipped="0" time="0.009073084">
        <testcase classname="tests/vitest/debug-bot-matrix.vitest.js" name="Debug Bot Matrix &gt; should count all games correctly" time="0.007296">
        </testcase>
        <testcase classname="tests/vitest/debug-bot-matrix.vitest.js" name="Debug Bot Matrix &gt; should run small matrix without errors" time="0.00127175">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/fork-detection.vitest.js" timestamp="2025-06-23T20:10:14.892Z" hostname="Mac" tests="14" failures="4" errors="0" skipped="0" time="0.037947584">
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x _ x _ pattern (user example)" time="0.016870625">
            <failure message="expected 0 to be greater than 0" type="AssertionError">
AssertionError: expected 0 to be greater than 0
 ❯ tests/vitest/fork-detection.vitest.js:160:34
            </failure>
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x _ x pattern" time="0.002874083">
            <failure message="expected 2 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected 2 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 2

 ❯ tests/vitest/fork-detection.vitest.js:173:34
            </failure>
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect x _ x _ pattern" time="0.000826083">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x x _ pattern" time="0.000733833">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Counter-Move Calculation &gt; should calculate correct counter moves for _ x _ x pattern" time="0.000909083">
            <failure message="expected 2 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected 2 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 2

 ❯ tests/vitest/fork-detection.vitest.js:206:34
            </failure>
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Counter-Move Calculation &gt; should prioritize center positions in counter moves" time="0.000358708">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Critical Fork Defense &gt; should identify opponent forks as critical threats" time="0.000613125">
            <failure message="expected 2 to be 1 // Object.is equality" type="AssertionError">
AssertionError: expected 2 to be 1 // Object.is equality

- Expected
+ Received

- 1
+ 2

 ❯ tests/vitest/fork-detection.vitest.js:243:45
            </failure>
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Critical Fork Defense &gt; should provide specific columns for counter-moves" time="0.005186666">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Opportunity Detection &gt; should find opportunities to create our own forks" time="0.0031475">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should not detect forks when opponent pieces block pattern" time="0.001587667">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should handle empty board gracefully" time="0.000561042">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should handle full board gracefully" time="0.000371417">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Real Game Scenario Testing &gt; should solve the user reported problem: _ _ x x x _ _" time="0.001855375">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Real Game Scenario Testing &gt; should recognize when player X can create winning fork" time="0.000606875">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/simple-backend.vitest.js" timestamp="2025-06-23T20:10:14.893Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.046260792">
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should perform basic calculations" time="0.007013">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should work with DOM elements" time="0.002058417">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should handle async operations" time="0.016879708">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should provide performance timing" time="0.0011795">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle array operations" time="0.001367709">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle object operations" time="0.007641125">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle deep equality" time="0.000726958">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Error Handling Tests &gt; should catch thrown errors" time="0.00058625">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Error Handling Tests &gt; should handle function calls that should not throw" time="0.000867459">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate board operations" time="0.000574083">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate win detection logic" time="0.000278375">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate valid moves checking" time="0.005127208">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/strategic-bot-fix-validation.vitest.js" timestamp="2025-06-23T20:10:14.894Z" hostname="Mac" tests="5" failures="0" errors="0" skipped="0" time="0.013484208">
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Each strategic bot type uses distinct implementation" time="0.007006292">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; getBestMove routes to specific strategy methods" time="0.0014985">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Strategic bots show different move preferences" time="0.002269791">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Universal logic fallback works for unknown bot types" time="0.000679209">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Performance Impact Assessment &gt; Strategic routing does not significantly impact performance" time="0.0013275">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-bot-mapping-simple.vitest.js" timestamp="2025-06-23T20:10:14.894Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.013794334">
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-easy to offensiv-gemischt (Rank #4)" time="0.0066625">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-medium to enhanced-smart (Rank #2)" time="0.000940084">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-strong to defensive (Rank #1)" time="0.000655459">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should maintain legacy vs-bot-smart compatibility" time="0.0007885">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should default to easy for unknown modes" time="0.000497125">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; AI Mode Detection &gt; should correctly identify AI modes" time="0.000444667">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Player Name Configuration &gt; should set correct player names for bot modes" time="0.000269833">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Player Name Configuration &gt; should return default name for non-bot modes" time="0.0002085">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Strength Hierarchy Validation &gt; should implement correct strength ordering based on scientific analysis" time="0.000836042">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Strength Hierarchy Validation &gt; should provide meaningful difficulty progression" time="0.000566459">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Performance Validation Documentation &gt; should document that bot selection is scientifically validated" time="0.000674291">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Performance Validation Documentation &gt; should validate available bot modes match HTML select options" time="0.000332792">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-bot-mode-validation.vitest.js" timestamp="2025-06-23T20:10:14.895Z" hostname="Mac" tests="14" failures="14" errors="0" skipped="0" time="0.01896625">
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Mode Detection &gt; should correctly identify AI modes" time="0.009066834">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-easy to offensiv-gemischt (Rank #4)" time="0.0007095">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-medium to enhanced-smart (Rank #2)" time="0.000438083">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-strong to defensive (Rank #1)" time="0.001356334">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should maintain legacy vs-bot-smart compatibility" time="0.000715125">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Strength Hierarchy &gt; should implement correct strength ordering" time="0.000612625">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Strength Hierarchy &gt; should use scientifically validated bot rankings" time="0.000360833">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Player Name Configuration &gt; should set correct player names for bot modes" time="0.000501792">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Player Name Configuration &gt; should reset player names for two-player mode" time="0.000530167">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; AI Move Generation &gt; should generate valid moves for all bot difficulties" time="0.000475167">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; AI Move Generation &gt; should handle empty board scenarios" time="0.000343959">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Legacy Compatibility &gt; should maintain backward compatibility with existing modes" time="0.0002155">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Legacy Compatibility &gt; should handle unknown modes gracefully" time="0.000142">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="Bot Mode Performance Validation &gt; should validate that chosen bots are performance-tested" time="0.000209">
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:35:27
            </failure>
            <failure message="Cannot set properties of undefined (setting &apos;innerHTML&apos;)" type="TypeError">
TypeError: Cannot set properties of undefined (setting &apos;innerHTML&apos;)
 ❯ tests/vitest-setup.js:46:27
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-hints-modal-integration.vitest.js" timestamp="2025-06-23T20:10:14.899Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.124488">
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Hints button should exist and have correct styling" time="0.037486083">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Hints modal should toggle on button click" time="0.013279083">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; F2 keyboard shortcut should toggle hints modal" time="0.006600583">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; F1 keyboard shortcut should still work for help modal" time="0.016901666">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Close button should close hints modal" time="0.0125375">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Click outside modal should close it" time="0.005011667">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; All help checkboxes should be present in modal" time="0.00644">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Modal structure should be correct" time="0.004534375">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Modal should not interfere with game functionality" time="0.008391083">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Both modals should be able to coexist" time="0.007010417">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Checkbox states should persist across modal toggles" time="0.003975625">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Event listeners should be properly attached" time="0.001426541">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-undo-conditional.vitest.js" timestamp="2025-06-23T20:10:14.900Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.105860708">
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should initialize undo state as disabled for both players" time="0.021597834">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should bind undo checkbox elements correctly" time="0.040373625">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should update undo state when Player 1 checkbox is toggled" time="0.008622625">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should update undo state when Player 2 checkbox is toggled" time="0.003337583">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should disable undo button when current player has undo disabled" time="0.0020685">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should enable undo button when current player has undo enabled" time="0.003332625">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should prevent undo when current player has undo disabled" time="0.010335542">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should allow undo when current player has undo enabled" time="0.0024665">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should work independently for different players" time="0.001733917">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should persist checkbox states correctly" time="0.004648834">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should respect undo settings during game state changes" time="0.004766542">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should handle AI thinking state correctly" time="0.001228417">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ultimate-bot-matrix-1000.vitest.js" timestamp="2025-06-23T20:10:14.901Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="2.251373334">
        <testcase classname="tests/vitest/ultimate-bot-matrix-1000.vitest.js" name="Ultimate 5x5 Bot Matrix - 1000 Games with &quot;Verlierer beginnt&quot; Logic &gt; should run complete 5x5 matrix with all bots and generate comprehensive analysis" time="2.250799459">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/universal-bot-logic.vitest.js" timestamp="2025-06-23T20:10:14.901Z" hostname="Mac" tests="16" failures="0" errors="0" skipped="0" time="0.044761083">
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should detect horizontal winning move" time="0.007552709">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should detect vertical winning move" time="0.000996458">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should return null when no winning move exists" time="0.000771583">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should block immediate opponent winning move" time="0.0008155">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should block dangerous fork pattern _ x _ x" time="0.0009105">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should return null when no blocking needed" time="0.000306459">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 3: Safe Column Identification &gt; should identify safe columns (no traps)" time="0.000383042">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 3: Safe Column Identification &gt; should return all moves if no safe moves exist" time="0.000585458">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; easy bot should select randomly from safe columns" time="0.010777291">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; medium bot should prefer center columns" time="0.000625583">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; should handle single safe column" time="0.000246583">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; should return null for empty safe columns" time="0.00023125">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; all bot difficulties should follow 4-stage process" time="0.00242325">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; should prioritize winning over blocking" time="0.000377417">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; should prioritize blocking over safe random moves" time="0.002623166">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Bot Performance Validation &gt; should run game series between bots without errors" time="0.012628584">
        </testcase>
    </testsuite>
</testsuites>
