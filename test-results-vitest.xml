<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="199" failures="1" errors="0" time="35.182234417">
    <testsuite name="tests/vitest/ai-strategy-dom-tests.vitest.js" timestamp="2025-06-24T20:22:02.274Z" hostname="Mac" tests="16" failures="0" errors="0" skipped="0" time="0.755326958">
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should handle strategic analysis integration" time="0.226173">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should handle multiple consecutive moves without corruption" time="0.050073208">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should apply even/odd strategy with DOM feedback" time="0.036695667">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should detect Zugzwang situations with UI integration" time="0.043737333">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should analyze fork opportunities with DOM updates" time="0.038303375">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should fallback to safe random with DOM state" time="0.050289125">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Enhanced Smart (DOM-dependent) &gt; should maintain performance under complex board states" time="0.023295">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should maintain move determinism for identical states" time="0.0441775">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should show differences between random vs strategic bots" time="0.0468915">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should show defensive vs offensive preferences" time="0.020483042">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should prevent state corruption during analysis" time="0.020198084">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Consistency (DOM-dependent) &gt; should handle cross-bot performance in complex positions" time="0.047114666">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should handle random fallback behavior with DOM" time="0.031951834">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should maintain multiple move sequence consistency" time="0.023046875">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should perform well with helper analysis integration" time="0.012981167">
        </testcase>
        <testcase classname="tests/vitest/ai-strategy-dom-tests.vitest.js" name="AI Strategy Smart Random (DOM-dependent) &gt; should handle state isolation across multiple calls" time="0.030800458">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-matrix-demo.vitest.js" timestamp="2025-06-24T20:22:02.283Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="0.390425167">
        <testcase classname="tests/vitest/bot-matrix-demo.vitest.js" name="Bot Matrix Demo Tests &gt; Demo: 50-Game Bot Matrix with &quot;Verlierer beginnt&quot; Logic" time="0.384869916">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-performance-100-series.vitest.js" timestamp="2025-06-24T20:22:02.284Z" hostname="Mac" tests="6" failures="0" errors="0" skipped="0" time="1.747889833">
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should complete 100 games without errors (Easy vs Medium)" time="0.724857667">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should complete 100 games without errors (Medium vs Hard)" time="0.259589333">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Consistency &gt; should show skill differential (Hard vs Easy)" time="0.355168125">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Implementation Validation &gt; all bots should follow 4-stage decision process" time="0.088864375">
            <system-out>

🔧 Universal Logic Tests: 150/150 passed

            </system-out>
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Universal Logic Implementation Validation &gt; no bot should make illegal moves in extended play" time="0.080065458">
        </testcase>
        <testcase classname="tests/vitest/bot-performance-100-series.vitest.js" name="Bot Performance Validation - 100 Game Series &gt; Performance Metrics &gt; game completion rate should be 100%" time="0.235224417">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-strength-comparison.vitest.js" timestamp="2025-06-24T20:22:02.287Z" hostname="Mac" tests="8" failures="0" errors="0" skipped="1" time="0.483345792">
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should beat Smart Random Bot majority of time" time="0.202791875">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should dominate Easy Bot" time="0.059037208">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Smart Random Bot should beat Easy Bot" time="0.027559875">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Enhanced Smart Bot should have higher strategic move ratio" time="0.050299958">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; All bots should prefer strategic opening moves" time="0.028609167">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Bots should handle complex board states without crashing" time="0.054613084">
            <system-out>
Complex Board State Test:

            </system-out>
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; Bot strength hierarchy should be maintained" time="0.038905">
        </testcase>
        <testcase classname="tests/vitest/bot-strength-comparison.vitest.js" name="Bot Strength Comparison Tests &gt; 1000-Game Bot Matrix Analysis with &quot;Verlierer beginnt&quot; Logic" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/bot-tournament.vitest.js" timestamp="2025-06-24T20:22:02.291Z" hostname="Mac" tests="3" failures="0" errors="0" skipped="0" time="0.442360375">
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should run complete tournament and establish rankings" time="0.253739291">
        </testcase>
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should validate Enhanced Smart Bot performance metrics" time="0.084380083">
        </testcase>
        <testcase classname="tests/vitest/bot-tournament.vitest.js" name="Bot Tournament System &gt; should demonstrate strategic improvement over time" time="0.084800208">
            <system-out>

📈 Strategic Evolution Test...


            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/comprehensive-bot-matrix-5x5.vitest.js" timestamp="2025-06-24T20:22:02.293Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="3.815529416">
        <testcase classname="tests/vitest/comprehensive-bot-matrix-5x5.vitest.js" name="Comprehensive 5x5 Bot Matrix - 100 Game Series &gt; should run complete 5x5 matrix and generate performance table" time="3.808137042">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/debug-bot-matrix.vitest.js" timestamp="2025-06-24T20:22:02.293Z" hostname="Mac" tests="2" failures="0" errors="0" skipped="0" time="0.081522916">
        <testcase classname="tests/vitest/debug-bot-matrix.vitest.js" name="Debug Bot Matrix &gt; should count all games correctly" time="0.068760667">
        </testcase>
        <testcase classname="tests/vitest/debug-bot-matrix.vitest.js" name="Debug Bot Matrix &gt; should run small matrix without errors" time="0.010485042">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/dependency-injection.vitest.js" timestamp="2025-06-24T20:22:02.295Z" hostname="Mac" tests="22" failures="0" errors="0" skipped="0" time="1.502382709">
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should register and resolve simple services" time="0.6912755">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should support singleton services" time="0.064664667">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should handle factory functions" time="0.043374375">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should inject dependencies correctly" time="0.054867708">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should throw error for unregistered services" time="0.018895042">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; ServiceContainer Core Functionality &gt; should support child containers" time="0.026078125">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Interface Validation &gt; should validate objects against interfaces" time="0.025534875">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Interface Validation &gt; should create interface proxies for runtime validation" time="0.051813542">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Interface Validation &gt; should validate known service interfaces" time="0.025577291">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; GameFactory Configuration &gt; should configure for testing environment" time="0.017754584">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; GameFactory Configuration &gt; should create bots with different difficulties" time="0.005658791">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; GameFactory Configuration &gt; should handle configuration errors gracefully" time="0.020695375">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; GameFactory Configuration &gt; should not reconfigure when already configured" time="0.08212625">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; GameFactory Configuration &gt; should reset configuration properly" time="0.081536875">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Game Instance Creation &gt; should create functional game instances" time="0.03916675">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Game Instance Creation &gt; should create game with UI when DOM element provided" time="0.024631583">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Game Instance Creation &gt; should validate interfaces when requested" time="0.040682583">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Integration with Legacy Code &gt; should maintain backward compatibility" time="0.008324417">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Integration with Legacy Code &gt; should support asynchronous service resolution" time="0.0288445">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Error Handling and Edge Cases &gt; should handle circular dependencies gracefully" time="0.032984625">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Error Handling and Edge Cases &gt; should handle malformed service registrations" time="0.024271208">
        </testcase>
        <testcase classname="tests/vitest/dependency-injection.vitest.js" name="Dependency Injection System &gt; Error Handling and Edge Cases &gt; should clear all services properly" time="0.028841875">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/expert-bot-quick-test.vitest.js" timestamp="2025-06-24T20:22:02.304Z" hostname="Mac" tests="8" failures="0" errors="0" skipped="0" time="0.170718416">
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; UI Mode Mapping &gt; Expert mode should map to monte-carlo difficulty" time="0.095388791">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; UI Mode Mapping &gt; Expert should use enhanced Monte Carlo configuration" time="0.010739959">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Performance Validation &gt; Monte Carlo bot should make strategic moves" time="0.016986541">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Performance Validation &gt; Expert bot should show center preference in opening" time="0.007265333">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Performance Validation &gt; Expert bot should handle complex positions" time="0.012294834">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Bot Hierarchy Validation &gt; Bot difficulty progression should be logical" time="0.007640959">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Bot Hierarchy Validation &gt; Expert should be the highest difficulty available in UI" time="0.010125417">
        </testcase>
        <testcase classname="tests/vitest/expert-bot-quick-test.vitest.js" name="Expert Bot Integration Tests &gt; Monte Carlo Implementation Access &gt; Monte Carlo should use enhanced simulation count" time="0.003543166">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/expert-vs-strategic-quick.vitest.js" timestamp="2025-06-24T20:22:02.308Z" hostname="Mac" tests="7" failures="0" errors="0" skipped="0" time="0.372554125">
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Monte Carlo vs Strategic Bots &gt; Monte Carlo should outperform Defensive bot" time="0.167099583">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Monte Carlo vs Strategic Bots &gt; Monte Carlo should outperform Enhanced Smart bot" time="0.02893625">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Monte Carlo vs Strategic Bots &gt; Monte Carlo should dominate Smart Random bot" time="0.026603084">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Expert Mode Validation &gt; Expert should be strongest available bot in UI hierarchy" time="0.045082416">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Expert Mode Validation &gt; Monte Carlo should show consistent performance advantage" time="0.046727458">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Strategic Depth Comparison &gt; Monte Carlo should show better opening play" time="0.018029375">
        </testcase>
        <testcase classname="tests/vitest/expert-vs-strategic-quick.vitest.js" name="Expert vs Strategic Bots Performance Tests &gt; Strategic Depth Comparison &gt; Monte Carlo should handle complex positions better" time="0.027478333">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/fork-detection.vitest.js" timestamp="2025-06-24T20:22:02.311Z" hostname="Mac" tests="14" failures="1" errors="0" skipped="0" time="0.980110375">
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x _ x _ pattern (user example)" time="0.403424542">
            <failure message="expected 0 to be greater than or equal to 1" type="AssertionError">
AssertionError: expected 0 to be greater than or equal to 1
 ❯ tests/vitest/fork-detection.vitest.js:161:28
            </failure>
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x _ x pattern" time="0.055830625">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect x _ x _ pattern" time="0.038663542">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Classic Fork Pattern Detection &gt; should detect _ x x _ pattern" time="0.060562125">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Counter-Move Calculation &gt; should calculate correct counter moves for _ x _ x pattern" time="0.050902291">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Counter-Move Calculation &gt; should prioritize center positions in counter moves" time="0.048245583">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Critical Fork Defense &gt; should identify opponent forks as critical threats" time="0.05306675">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Critical Fork Defense &gt; should provide specific columns for counter-moves" time="0.041308416">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Fork Opportunity Detection &gt; should find opportunities to create our own forks" time="0.078327583">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should not detect forks when opponent pieces block pattern" time="0.04244875">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should handle empty board gracefully" time="0.010668458">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Edge Cases and Validation &gt; should handle full board gracefully" time="0.042855083">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Real Game Scenario Testing &gt; should solve the user reported problem: _ _ x x x _ _" time="0.014409666">
        </testcase>
        <testcase classname="tests/vitest/fork-detection.vitest.js" name="Fork Detection Core Logic &gt; Real Game Scenario Testing &gt; should recognize when player X can create winning fork" time="0.023524625">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/monte-carlo-enhanced.vitest.js" timestamp="2025-06-24T20:22:02.318Z" hostname="Mac" tests="17" failures="0" errors="0" skipped="0" time="1.398146708">
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Performance Improvements &gt; should use 1000 simulations instead of 100" time="0.328911666">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Performance Improvements &gt; should have time-boxing enabled" time="0.03837125">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Performance Improvements &gt; should complete thinking within time limit" time="0.191213625">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Adaptive Simulation Counts &gt; should adjust simulations based on game phase" time="0.008094583">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Adaptive Simulation Counts &gt; should use more simulations in mid-game" time="0.057172917">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Adaptive Simulation Counts &gt; should respect minimum simulations" time="0.04176325">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Adaptive Simulation Counts &gt; should respect maximum simulations" time="0.040873667">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; UCB1 Selection Strategy &gt; should explore unvisited columns first" time="0.023801209">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; UCB1 Selection Strategy &gt; should balance exploitation and exploration" time="0.027965208">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Confidence Weighting &gt; should apply confidence bonus to well-explored columns" time="0.011781167">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Strategic Strength &gt; should prefer winning moves in tactical positions" time="0.211386084">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Strategic Strength &gt; should avoid losing moves when possible" time="0.009801958">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Performance Benchmarks &gt; should run significantly more simulations than basic bot" time="0.113787">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Performance Benchmarks &gt; should maintain good performance under time pressure" time="0.088139458">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Integration with Universal 4-Stage Logic &gt; should work as Stage 4 strategy within safe columns only" time="0.119327417">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Integration with Universal 4-Stage Logic &gt; should handle empty safe columns gracefully" time="0.037012708">
        </testcase>
        <testcase classname="tests/vitest/monte-carlo-enhanced.vitest.js" name="Enhanced Monte Carlo Bot Tests &gt; Integration with Universal 4-Stage Logic &gt; should handle single safe column efficiently" time="0.010887292">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/new-bot-mapping.vitest.js" timestamp="2025-06-24T20:22:02.323Z" hostname="Mac" tests="10" failures="0" errors="0" skipped="0" time="0.408939375">
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; 3-Tier Bot Progression &gt; Easy bot should map to smart-random" time="0.186890083">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; 3-Tier Bot Progression &gt; Medium bot should map to offensiv-gemischt" time="0.015236458">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; 3-Tier Bot Progression &gt; Strong bot should map to monte-carlo" time="0.022816625">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; Bot Strength Progression &gt; Should have clear win rate progression" time="0.016328542">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; Bot Strength Progression &gt; Should have meaningful difficulty gaps" time="0.020675083">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; UI Options Validation &gt; Should have exactly 4 game modes (including 2-player)" time="0.027007459">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; UI Options Validation &gt; Should have clear bot names" time="0.021167709">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; Expected Performance Ranges &gt; Easy bot should be beginner-friendly" time="0.020535292">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; Expected Performance Ranges &gt; Medium bot should provide balanced challenge" time="0.020077708">
        </testcase>
        <testcase classname="tests/vitest/new-bot-mapping.vitest.js" name="Updated Bot Mapping Tests &gt; Expected Performance Ranges &gt; Strong bot should be challenging for experienced players" time="0.049899333">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/simple-backend.vitest.js" timestamp="2025-06-24T20:22:02.326Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.519827167">
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should perform basic calculations" time="0.162438084">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should work with DOM elements" time="0.033263708">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should handle async operations" time="0.04601025">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Simple Math Tests (Vitest Demo) &gt; should provide performance timing" time="0.049152958">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle array operations" time="0.029216084">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle object operations" time="0.028637042">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Array and Object Tests &gt; should handle deep equality" time="0.019306291">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Error Handling Tests &gt; should catch thrown errors" time="0.030420791">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Error Handling Tests &gt; should handle function calls that should not throw" time="0.004143375">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate board operations" time="0.047582917">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate win detection logic" time="0.030633959">
        </testcase>
        <testcase classname="tests/vitest/simple-backend.vitest.js" name="Game Logic Simulation (without actual classes) &gt; should simulate valid moves checking" time="0.019837292">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/strategic-bot-fix-validation.vitest.js" timestamp="2025-06-24T20:22:02.330Z" hostname="Mac" tests="5" failures="0" errors="0" skipped="0" time="0.307114917">
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Each strategic bot type uses distinct implementation" time="0.170511833">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; getBestMove routes to specific strategy methods" time="0.040071583">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Strategic bots show different move preferences" time="0.047507666">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Strategic Bot Fix Validation &gt; Universal logic fallback works for unknown bot types" time="0.017043875">
        </testcase>
        <testcase classname="tests/vitest/strategic-bot-fix-validation.vitest.js" name="Performance Impact Assessment &gt; Strategic routing does not significantly impact performance" time="0.024153417">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-bot-mapping-simple.vitest.js" timestamp="2025-06-24T20:22:02.332Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.525508417">
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-easy to offensiv-gemischt (Rank #4)" time="0.195158">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-medium to enhanced-smart (Rank #2)" time="0.027892791">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should map vs-bot-strong to defensive (Rank #1)" time="0.031352292">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should maintain legacy vs-bot-smart compatibility" time="0.026454042">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Difficulty Mapping &gt; should default to easy for unknown modes" time="0.02989625">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; AI Mode Detection &gt; should correctly identify AI modes" time="0.038427333">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Player Name Configuration &gt; should set correct player names for bot modes" time="0.017736542">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Player Name Configuration &gt; should return default name for non-bot modes" time="0.019542292">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Strength Hierarchy Validation &gt; should implement correct strength ordering based on scientific analysis" time="0.025014542">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Bot Strength Hierarchy Validation &gt; should provide meaningful difficulty progression" time="0.0248345">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Performance Validation Documentation &gt; should document that bot selection is scientifically validated" time="0.060793417">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mapping-simple.vitest.js" name="UI Bot Mapping Logic &gt; Performance Validation Documentation &gt; should validate available bot modes match HTML select options" time="0.017210042">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-bot-mode-validation.vitest.js" timestamp="2025-06-24T20:22:02.336Z" hostname="Mac" tests="14" failures="0" errors="0" skipped="0" time="0.018639792">
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Mode Detection &gt; should correctly identify AI modes" time="0.006741167">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-easy to offensiv-gemischt (Rank #4)" time="0.001061583">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-medium to enhanced-smart (Rank #2)" time="0.0009835">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should map vs-bot-strong to defensive (Rank #1)" time="0.000453292">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Difficulty Mapping &gt; should maintain legacy vs-bot-smart compatibility" time="0.000639667">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Strength Hierarchy &gt; should implement correct strength ordering" time="0.000247875">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Bot Strength Hierarchy &gt; should use scientifically validated bot rankings" time="0.000230708">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Player Name Configuration &gt; should set correct player names for bot modes" time="0.00051025">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Player Name Configuration &gt; should reset player names for two-player mode" time="0.000534416">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; AI Move Generation &gt; should generate valid moves for all bot difficulties" time="0.000598833">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; AI Move Generation &gt; should handle empty board scenarios" time="0.000190875">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Legacy Compatibility &gt; should maintain backward compatibility with existing modes" time="0.000148875">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="UI Bot Mode Validation &gt; Legacy Compatibility &gt; should handle unknown modes gracefully" time="0.000099709">
        </testcase>
        <testcase classname="tests/vitest/ui-bot-mode-validation.vitest.js" name="Bot Mode Performance Validation &gt; should validate that chosen bots are performance-tested" time="0.000961125">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-hints-modal-integration.vitest.js" timestamp="2025-06-24T20:22:02.343Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="1.496987208">
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Hints button should exist and have correct styling" time="0.503218958">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Hints modal should toggle on button click" time="0.122392333">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; F2 keyboard shortcut should toggle hints modal" time="0.117538708">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; F1 keyboard shortcut should still work for help modal" time="0.1303365">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Close button should close hints modal" time="0.067566209">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Click outside modal should close it" time="0.076095167">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; All help checkboxes should be present in modal" time="0.106386125">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Modal structure should be correct" time="0.124200416">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Modal should not interfere with game functionality" time="0.102564625">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Both modals should be able to coexist" time="0.047426834">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Checkbox states should persist across modal toggles" time="0.040457708">
        </testcase>
        <testcase classname="tests/vitest/ui-hints-modal-integration.vitest.js" name="UI Hints Modal Integration Tests &gt; Event listeners should be properly attached" time="0.0452515">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ui-undo-conditional.vitest.js" timestamp="2025-06-24T20:22:02.348Z" hostname="Mac" tests="12" failures="0" errors="0" skipped="0" time="0.808367917">
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should initialize undo state as disabled for both players" time="0.260391167">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should bind undo checkbox elements correctly" time="0.069776292">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should update undo state when Player 1 checkbox is toggled" time="0.072367375">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should update undo state when Player 2 checkbox is toggled" time="0.054308042">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should disable undo button when current player has undo disabled" time="0.045749625">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should enable undo button when current player has undo enabled" time="0.046800667">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should prevent undo when current player has undo disabled" time="0.02783825">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should allow undo when current player has undo enabled" time="0.034880834">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should work independently for different players" time="0.04005675">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should persist checkbox states correctly" time="0.063393125">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should respect undo settings during game state changes" time="0.0369435">
        </testcase>
        <testcase classname="tests/vitest/ui-undo-conditional.vitest.js" name="UI Undo Conditional (Vitest Integration) &gt; should handle AI thinking state correctly" time="0.045194458">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/ultimate-bot-matrix-1000.vitest.js" timestamp="2025-06-24T20:22:02.352Z" hostname="Mac" tests="1" failures="0" errors="0" skipped="0" time="18.267985959">
        <testcase classname="tests/vitest/ultimate-bot-matrix-1000.vitest.js" name="Ultimate 5x5 Bot Matrix - 1000 Games with &quot;Verlierer beginnt&quot; Logic &gt; should run complete 5x5 matrix with all bots and generate comprehensive analysis" time="18.262581875">
        </testcase>
    </testsuite>
    <testsuite name="tests/vitest/universal-bot-logic.vitest.js" timestamp="2025-06-24T20:22:02.353Z" hostname="Mac" tests="16" failures="0" errors="0" skipped="0" time="0.688550875">
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should detect horizontal winning move" time="0.202607667">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should detect vertical winning move" time="0.019693625">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 1: Direct Win Detection &gt; should return null when no winning move exists" time="0.016667583">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should block immediate opponent winning move" time="0.020676459">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should block dangerous fork pattern _ x _ x" time="0.023567459">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 2: Comprehensive Blocking (includes _ x _ x _ pattern) &gt; should return null when no blocking needed" time="0.098033542">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 3: Safe Column Identification &gt; should identify safe columns (no traps)" time="0.0507445">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 3: Safe Column Identification &gt; should return all moves if no safe moves exist" time="0.013317292">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; easy bot should select randomly from safe columns" time="0.007759167">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; medium bot should prefer center columns" time="0.019005334">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; should handle single safe column" time="0.018902708">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; STAGE 4: Bot-Specific Selection &gt; should return null for empty safe columns" time="0.01042075">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; all bot difficulties should follow 4-stage process" time="0.041610458">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; should prioritize winning over blocking" time="0.010789875">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Universal Bot Logic (4-Stage System) &gt; Universal Bot Logic Integration &gt; should prioritize blocking over safe random moves" time="0.015067584">
        </testcase>
        <testcase classname="tests/vitest/universal-bot-logic.vitest.js" name="Bot Performance Validation &gt; should run game series between bots without errors" time="0.099963833">
        </testcase>
    </testsuite>
</testsuites>
